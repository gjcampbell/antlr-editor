// Generated from C:\git-seaquail.visualstudio.com\AntlrEditor\src\server\compiler\output\SQLite\SQLite.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SQLiteListener = require('./SQLiteListener').SQLiteListener;
var SQLiteVisitor = require('./SQLiteVisitor').SQLiteVisitor;

var grammarFileName = "SQLite.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u009f\u06c6\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0003\u0002\u0003",
    "\u0002\u0007\u0002\u00a9\n\u0002\f\u0002\u000e\u0002\u00ac\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0007\u0004\u00b4\n\u0004\f\u0004\u000e\u0004\u00b7\u000b\u0004\u0003",
    "\u0004\u0003\u0004\u0006\u0004\u00bb\n\u0004\r\u0004\u000e\u0004\u00bc",
    "\u0003\u0004\u0007\u0004\u00c0\n\u0004\f\u0004\u000e\u0004\u00c3\u000b",
    "\u0004\u0003\u0004\u0007\u0004\u00c6\n\u0004\f\u0004\u000e\u0004\u00c9",
    "\u000b\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00ce\n",
    "\u0005\u0005\u0005\u00d0\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00f0\n\u0005\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u00f7",
    "\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u00ff\n\u0006\u0003\u0006\u0005\u0006\u0102",
    "\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0005\u0007\u010b\n\u0007\u0003\b\u0003\b\u0005",
    "\b\u010f\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0005\t",
    "\u0117\n\t\u0003\t\u0003\t\u0005\t\u011b\n\t\u0005\t\u011d\n\t\u0003",
    "\n\u0003\n\u0003\n\u0005\n\u0122\n\n\u0005\n\u0124\n\n\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u0128\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0007\u000b\u012d\n\u000b\f\u000b\u000e\u000b\u0130\u000b\u000b\u0005",
    "\u000b\u0132\n\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b",
    "\u0137\n\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u013b\n\u000b\u0003",
    "\u000b\u0006\u000b\u013e\n\u000b\r\u000b\u000e\u000b\u013f\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u0147\n",
    "\u000b\f\u000b\u000e\u000b\u014a\u000b\u000b\u0005\u000b\u014c\n\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0152\n",
    "\u000b\u0005\u000b\u0154\n\u000b\u0003\f\u0003\f\u0005\f\u0158\n\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0005\f\u015e\n\f\u0003\f\u0003\f\u0003\f",
    "\u0005\f\u0163\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0007\f\u016c\n\f\f\f\u000e\f\u016f\u000b\f\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u0174\n\f\u0003\r\u0003\r\u0005\r\u0178\n\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0005\r\u017e\n\r\u0003\r\u0003\r\u0003\r\u0005\r",
    "\u0183\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u018a\n\r",
    "\f\r\u000e\r\u018d\u000b\r\u0003\r\u0003\r\u0007\r\u0191\n\r\f\r\u000e",
    "\r\u0194\u000b\r\u0003\r\u0003\r\u0003\r\u0005\r\u0199\n\r\u0003\r\u0003",
    "\r\u0005\r\u019d\n\r\u0003\u000e\u0003\u000e\u0005\u000e\u01a1\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u01a7\n",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u01ac\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u01b3\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u01bc\n\u000e\f\u000e\u000e",
    "\u000e\u01bf\u000b\u000e\u0005\u000e\u01c1\n\u000e\u0005\u000e\u01c3",
    "\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u01c9\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005",
    "\u000e\u01cf\n\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u01d3\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u01da\n\u000e\u0003\u000e\u0003\u000e\u0006\u000e\u01de\n\u000e\r\u000e",
    "\u000e\u000e\u01df\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0005",
    "\u000f\u01e6\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0005\u000f\u01ec\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005",
    "\u000f\u01f1\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0005\u0010\u01fd\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005",
    "\u0010\u0202\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u020b\n\u0010\f\u0010",
    "\u000e\u0010\u020e\u000b\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0212",
    "\n\u0010\u0003\u0011\u0005\u0011\u0215\n\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u021c\n\u0011\u0003",
    "\u0012\u0005\u0012\u021f\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u0226\n\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u022d\n\u0012",
    "\f\u0012\u000e\u0012\u0230\u000b\u0012\u0005\u0012\u0232\n\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0238\n\u0012",
    "\u0005\u0012\u023a\n\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u023e",
    "\n\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u0246\n\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u024b\n\u0014\u0003\u0014\u0003\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0253\n\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0258\n\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016",
    "\u0260\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0265",
    "\n\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0005\u0017\u026d\n\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0005\u0017\u0272\n\u0017\u0003\u0017\u0003\u0017\u0003\u0018",
    "\u0003\u0018\u0005\u0018\u0278\n\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0007\u0018\u027d\n\u0018\f\u0018\u000e\u0018\u0280\u000b\u0018",
    "\u0005\u0018\u0282\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0007\u0018\u0288\n\u0018\f\u0018\u000e\u0018\u028b\u000b\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018",
    "\u0292\n\u0018\f\u0018\u000e\u0018\u0295\u000b\u0018\u0005\u0018\u0297",
    "\n\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u029d\n\u0018\u0005\u0018\u029f\n\u0018\u0003\u0019\u0005\u0019\u02a2",
    "\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0005\u0019\u02b5\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u02bb\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0007\u0019\u02c2\n\u0019\f\u0019\u000e\u0019",
    "\u02c5\u000b\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u02c9\n\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019",
    "\u02d0\n\u0019\f\u0019\u000e\u0019\u02d3\u000b\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u02db",
    "\n\u0019\f\u0019\u000e\u0019\u02de\u000b\u0019\u0003\u0019\u0003\u0019",
    "\u0007\u0019\u02e2\n\u0019\f\u0019\u000e\u0019\u02e5\u000b\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u02ea\n\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u02f0\n\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0005\u001a\u02f9\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u0300\n\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u0304\n\u001b\u0005\u001b\u0306\n\u001b\u0003\u001c",
    "\u0003\u001c\u0005\u001c\u030a\n\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0311\n\u001d\u0005\u001d",
    "\u0313\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0317\n\u001d\u0003",
    "\u001d\u0005\u001d\u031a\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001f\u0003\u001f\u0005\u001f\u0321\n\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0007\u001f\u0326\n\u001f\f\u001f\u000e\u001f\u0329",
    "\u000b\u001f\u0005\u001f\u032b\n\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u0333\n\u001f",
    "\f\u001f\u000e\u001f\u0336\u000b\u001f\u0005\u001f\u0338\n\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u033e\n\u001f",
    "\u0005\u001f\u0340\n\u001f\u0003 \u0003 \u0005 \u0344\n \u0003 \u0003",
    " \u0003 \u0007 \u0349\n \f \u000e \u034c\u000b \u0005 \u034e\n \u0003",
    " \u0003 \u0003 \u0003 \u0007 \u0354\n \f \u000e \u0357\u000b \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0007 \u035e\n \f \u000e \u0361\u000b",
    " \u0005 \u0363\n \u0003 \u0003 \u0003 \u0003 \u0005 \u0369\n \u0005",
    " \u036b\n \u0003!\u0003!\u0005!\u036f\n!\u0003!\u0003!\u0003!\u0007",
    "!\u0374\n!\f!\u000e!\u0377\u000b!\u0003!\u0003!\u0003!\u0003!\u0007",
    "!\u037d\n!\f!\u000e!\u0380\u000b!\u0003!\u0005!\u0383\n!\u0005!\u0385",
    "\n!\u0003!\u0003!\u0005!\u0389\n!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0007!\u0390\n!\f!\u000e!\u0393\u000b!\u0003!\u0003!\u0005!\u0397",
    "\n!\u0005!\u0399\n!\u0003!\u0003!\u0003!\u0003!\u0003!\u0007!\u03a0",
    "\n!\f!\u000e!\u03a3\u000b!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0007!\u03ab\n!\f!\u000e!\u03ae\u000b!\u0003!\u0003!\u0007!\u03b2",
    "\n!\f!\u000e!\u03b5\u000b!\u0005!\u03b7\n!\u0003\"\u0005\"\u03ba\n\"",
    "\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0005\"\u03c7\n\"\u0003\"\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u03d3\n\"\f",
    "\"\u000e\"\u03d6\u000b\"\u0003\"\u0003\"\u0005\"\u03da\n\"\u0003#\u0005",
    "#\u03dd\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u03ea\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0007#\u03f6\n#\f#\u000e#\u03f9\u000b",
    "#\u0003#\u0003#\u0005#\u03fd\n#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007",
    "#\u0404\n#\f#\u000e#\u0407\u000b#\u0005#\u0409\n#\u0003#\u0003#\u0003",
    "#\u0003#\u0005#\u040f\n#\u0005#\u0411\n#\u0003$\u0003$\u0003%\u0003",
    "%\u0005%\u0417\n%\u0003%\u0007%\u041a\n%\f%\u000e%\u041d\u000b%\u0003",
    "&\u0006&\u0420\n&\r&\u000e&\u0421\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u042e\n&\u0003\'\u0003\'",
    "\u0005\'\u0432\n\'\u0003\'\u0003\'\u0003\'\u0005\'\u0437\n\'\u0003\'",
    "\u0003\'\u0005\'\u043b\n\'\u0003\'\u0005\'\u043e\n\'\u0003\'\u0003\'",
    "\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u0450\n\'\u0003\'",
    "\u0003\'\u0003\'\u0005\'\u0455\n\'\u0003(\u0003(\u0003(\u0005(\u045a",
    "\n(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u0462\n)\u0003",
    ")\u0003)\u0003)\u0005)\u0467\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0005)\u0470\n)\u0003)\u0003)\u0003)\u0007)\u0475\n)\f)\u000e",
    ")\u0478\u000b)\u0003)\u0005)\u047b\n)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005",
    ")\u048b\n)\u0003)\u0005)\u048e\n)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0005)\u0496\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0006)\u049d",
    "\n)\r)\u000e)\u049e\u0003)\u0003)\u0005)\u04a3\n)\u0003)\u0003)\u0003",
    ")\u0005)\u04a8\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0005)\u04c6\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0005)\u04d2\n)\u0003)\u0003)\u0003)\u0005)\u04d7\n",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003",
    ")\u0005)\u04e3\n)\u0003)\u0003)\u0003)\u0003)\u0005)\u04e9\n)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0005)\u04f0\n)\u0003)\u0003)\u0005)\u04f4",
    "\n)\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0007)\u04fc\n)\f)\u000e",
    ")\u04ff\u000b)\u0005)\u0501\n)\u0003)\u0003)\u0003)\u0003)\u0005)\u0507",
    "\n)\u0003)\u0005)\u050a\n)\u0007)\u050c\n)\f)\u000e)\u050f\u000b)\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0007*\u0517\n*\f*\u000e*\u051a",
    "\u000b*\u0003*\u0003*\u0005*\u051e\n*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u052a\n*\u0003*\u0003*\u0005",
    "*\u052e\n*\u0007*\u0530\n*\f*\u000e*\u0533\u000b*\u0003*\u0005*\u0536",
    "\n*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u053d\n*\u0005*\u053f",
    "\n*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u0547\n+\u0003",
    "+\u0003+\u0003,\u0003,\u0003,\u0005,\u054e\n,\u0003,\u0005,\u0551\n",
    ",\u0003-\u0003-\u0005-\u0555\n-\u0003-\u0003-\u0003-\u0005-\u055a\n",
    "-\u0003-\u0003-\u0003-\u0003-\u0007-\u0560\n-\f-\u000e-\u0563\u000b",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0007-\u0573\n-\f-\u000e-\u0576\u000b",
    "-\u0003-\u0003-\u0003-\u0005-\u057b\n-\u0003.\u0003.\u0005.\u057f\n",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0007.\u058d\n.\f.\u000e.\u0590\u000b.\u0003/\u0003",
    "/\u0003/\u0005/\u0595\n/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005",
    "/\u059d\n/\u00030\u00030\u00030\u00050\u05a2\n0\u00030\u00050\u05a5",
    "\n0\u00031\u00031\u00031\u00051\u05aa\n1\u00032\u00032\u00032\u0003",
    "2\u00032\u00072\u05b1\n2\f2\u000e2\u05b4\u000b2\u00032\u00032\u0005",
    "2\u05b8\n2\u00032\u00032\u00032\u00032\u00032\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00053\u05c6\n3\u00033\u00053\u05c9\n3\u0005",
    "3\u05cb\n3\u00034\u00034\u00034\u00054\u05d0\n4\u00034\u00034\u0005",
    "4\u05d4\n4\u00034\u00054\u05d7\n4\u00034\u00034\u00034\u00034\u0003",
    "4\u00054\u05de\n4\u00034\u00034\u00034\u00034\u00074\u05e4\n4\f4\u000e",
    "4\u05e7\u000b4\u00034\u00054\u05ea\n4\u00034\u00034\u00054\u05ee\n4",
    "\u00034\u00054\u05f1\n4\u00034\u00034\u00034\u00034\u00054\u05f7\n4",
    "\u00034\u00054\u05fa\n4\u00054\u05fc\n4\u00035\u00035\u00035\u00035",
    "\u00035\u00075\u0603\n5\f5\u000e5\u0606\u000b5\u00036\u00036\u00056",
    "\u060a\n6\u00036\u00036\u00056\u060e\n6\u00036\u00036\u00056\u0612\n",
    "6\u00036\u00056\u0615\n6\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00077\u061e\n7\f7\u000e7\u0621\u000b7\u00037\u00037\u00057\u0625",
    "\n7\u00038\u00038\u00058\u0629\n8\u00038\u00038\u00038\u00078\u062e",
    "\n8\f8\u000e8\u0631\u000b8\u00038\u00038\u00038\u00038\u00078\u0637",
    "\n8\f8\u000e8\u063a\u000b8\u00038\u00058\u063d\n8\u00058\u063f\n8\u0003",
    "8\u00038\u00058\u0643\n8\u00038\u00038\u00038\u00038\u00038\u00078\u064a",
    "\n8\f8\u000e8\u064d\u000b8\u00038\u00038\u00058\u0651\n8\u00058\u0653",
    "\n8\u00038\u00038\u00038\u00038\u00038\u00078\u065a\n8\f8\u000e8\u065d",
    "\u000b8\u00038\u00038\u00038\u00038\u00038\u00038\u00078\u0665\n8\f",
    "8\u000e8\u0668\u000b8\u00038\u00038\u00078\u066c\n8\f8\u000e8\u066f",
    "\u000b8\u00058\u0671\n8\u00039\u00039\u00039\u00039\u00039\u00059\u0678",
    "\n9\u0003:\u0003:\u0003:\u0003:\u0003:\u0007:\u067f\n:\f:\u000e:\u0682",
    "\u000b:\u0003:\u0003:\u0005:\u0686\n:\u0003;\u0005;\u0689\n;\u0003;",
    "\u0003;\u0003<\u0003<\u0003=\u0003=\u0003>\u0003>\u0003?\u0003?\u0005",
    "?\u0695\n?\u0003@\u0003@\u0003A\u0003A\u0003B\u0003B\u0003C\u0003C\u0003",
    "D\u0003D\u0003E\u0003E\u0003F\u0003F\u0003G\u0003G\u0003H\u0003H\u0003",
    "I\u0003I\u0003J\u0003J\u0003K\u0003K\u0003L\u0003L\u0003M\u0003M\u0003",
    "N\u0003N\u0003O\u0003O\u0003P\u0003P\u0003Q\u0003Q\u0003R\u0003R\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u06c4\nS\u0003S\u0002",
    "\u0003PT\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|",
    "~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094",
    "\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u0002\u0014\u0005\u0002",
    "<<GGTT\u0004\u000211DD\u0004\u0002\u0007\u0007ll\u0003\u0002\u0085\u0086",
    "\u0004\u0002\u001f\u001f@@\u0004\u0002$$>>\u0007\u0002\u001b\u001bJ",
    "JSS||\u007f\u007f\u0004\u0002\t\t\u000e\u000f\u0003\u0002\n\u000b\u0003",
    "\u0002\u0010\u0013\u0003\u0002\u0014\u0017\u0006\u0002OOcceexx\u0004",
    "\u0002==\u008d\u008d\u0005\u0002\u001b\u001bJJ\u007f\u007f\u0006\u0002",
    "68jj\u0098\u0098\u009a\u009b\u0004\u0002\n\fhh\u0004\u0002\u0097\u0097",
    "\u009a\u009a\u0003\u0002\u001b\u0096\u0002\u07d3\u0002\u00aa\u0003\u0002",
    "\u0002\u0002\u0004\u00af\u0003\u0002\u0002\u0002\u0006\u00b5\u0003\u0002",
    "\u0002\u0002\b\u00cf\u0003\u0002\u0002\u0002\n\u00f1\u0003\u0002\u0002",
    "\u0002\f\u0103\u0003\u0002\u0002\u0002\u000e\u010c\u0003\u0002\u0002",
    "\u0002\u0010\u0114\u0003\u0002\u0002\u0002\u0012\u011e\u0003\u0002\u0002",
    "\u0002\u0014\u0131\u0003\u0002\u0002\u0002\u0016\u0155\u0003\u0002\u0002",
    "\u0002\u0018\u0175\u0003\u0002\u0002\u0002\u001a\u019e\u0003\u0002\u0002",
    "\u0002\u001c\u01e3\u0003\u0002\u0002\u0002\u001e\u01f6\u0003\u0002\u0002",
    "\u0002 \u0214\u0003\u0002\u0002\u0002\"\u021e\u0003\u0002\u0002\u0002",
    "$\u023b\u0003\u0002\u0002\u0002&\u0241\u0003\u0002\u0002\u0002(\u024e",
    "\u0003\u0002\u0002\u0002*\u025b\u0003\u0002\u0002\u0002,\u0268\u0003",
    "\u0002\u0002\u0002.\u0281\u0003\u0002\u0002\u00020\u02a1\u0003\u0002",
    "\u0002\u00022\u02eb\u0003\u0002\u0002\u00024\u02fa\u0003\u0002\u0002",
    "\u00026\u0307\u0003\u0002\u0002\u00028\u030d\u0003\u0002\u0002\u0002",
    ":\u031b\u0003\u0002\u0002\u0002<\u032a\u0003\u0002\u0002\u0002>\u034d",
    "\u0003\u0002\u0002\u0002@\u03b6\u0003\u0002\u0002\u0002B\u03b9\u0003",
    "\u0002\u0002\u0002D\u03dc\u0003\u0002\u0002\u0002F\u0412\u0003\u0002",
    "\u0002\u0002H\u0414\u0003\u0002\u0002\u0002J\u041f\u0003\u0002\u0002",
    "\u0002L\u0431\u0003\u0002\u0002\u0002N\u0459\u0003\u0002\u0002\u0002",
    "P\u04a7\u0003\u0002\u0002\u0002R\u0510\u0003\u0002\u0002\u0002T\u0540",
    "\u0003\u0002\u0002\u0002V\u054a\u0003\u0002\u0002\u0002X\u0554\u0003",
    "\u0002\u0002\u0002Z\u057c\u0003\u0002\u0002\u0002\\\u0594\u0003\u0002",
    "\u0002\u0002^\u059e\u0003\u0002\u0002\u0002`\u05a9\u0003\u0002\u0002",
    "\u0002b\u05ab\u0003\u0002\u0002\u0002d\u05ca\u0003\u0002\u0002\u0002",
    "f\u05fb\u0003\u0002\u0002\u0002h\u05fd\u0003\u0002\u0002\u0002j\u0614",
    "\u0003\u0002\u0002\u0002l\u0624\u0003\u0002\u0002\u0002n\u0670\u0003",
    "\u0002\u0002\u0002p\u0677\u0003\u0002\u0002\u0002r\u0679\u0003\u0002",
    "\u0002\u0002t\u0688\u0003\u0002\u0002\u0002v\u068c\u0003\u0002\u0002",
    "\u0002x\u068e\u0003\u0002\u0002\u0002z\u0690\u0003\u0002\u0002\u0002",
    "|\u0694\u0003\u0002\u0002\u0002~\u0696\u0003\u0002\u0002\u0002\u0080",
    "\u0698\u0003\u0002\u0002\u0002\u0082\u069a\u0003\u0002\u0002\u0002\u0084",
    "\u069c\u0003\u0002\u0002\u0002\u0086\u069e\u0003\u0002\u0002\u0002\u0088",
    "\u06a0\u0003\u0002\u0002\u0002\u008a\u06a2\u0003\u0002\u0002\u0002\u008c",
    "\u06a4\u0003\u0002\u0002\u0002\u008e\u06a6\u0003\u0002\u0002\u0002\u0090",
    "\u06a8\u0003\u0002\u0002\u0002\u0092\u06aa\u0003\u0002\u0002\u0002\u0094",
    "\u06ac\u0003\u0002\u0002\u0002\u0096\u06ae\u0003\u0002\u0002\u0002\u0098",
    "\u06b0\u0003\u0002\u0002\u0002\u009a\u06b2\u0003\u0002\u0002\u0002\u009c",
    "\u06b4\u0003\u0002\u0002\u0002\u009e\u06b6\u0003\u0002\u0002\u0002\u00a0",
    "\u06b8\u0003\u0002\u0002\u0002\u00a2\u06ba\u0003\u0002\u0002\u0002\u00a4",
    "\u06c3\u0003\u0002\u0002\u0002\u00a6\u00a9\u0005\u0006\u0004\u0002\u00a7",
    "\u00a9\u0005\u0004\u0003\u0002\u00a8\u00a6\u0003\u0002\u0002\u0002\u00a8",
    "\u00a7\u0003\u0002\u0002\u0002\u00a9\u00ac\u0003\u0002\u0002\u0002\u00aa",
    "\u00a8\u0003\u0002\u0002\u0002\u00aa\u00ab\u0003\u0002\u0002\u0002\u00ab",
    "\u00ad\u0003\u0002\u0002\u0002\u00ac\u00aa\u0003\u0002\u0002\u0002\u00ad",
    "\u00ae\u0007\u0002\u0002\u0003\u00ae\u0003\u0003\u0002\u0002\u0002\u00af",
    "\u00b0\u0007\u009f\u0002\u0002\u00b0\u00b1\b\u0003\u0001\u0002\u00b1",
    "\u0005\u0003\u0002\u0002\u0002\u00b2\u00b4\u0007\u0003\u0002\u0002\u00b3",
    "\u00b2\u0003\u0002\u0002\u0002\u00b4\u00b7\u0003\u0002\u0002\u0002\u00b5",
    "\u00b3\u0003\u0002\u0002\u0002\u00b5\u00b6\u0003\u0002\u0002\u0002\u00b6",
    "\u00b8\u0003\u0002\u0002\u0002\u00b7\u00b5\u0003\u0002\u0002\u0002\u00b8",
    "\u00c1\u0005\b\u0005\u0002\u00b9\u00bb\u0007\u0003\u0002\u0002\u00ba",
    "\u00b9\u0003\u0002\u0002\u0002\u00bb\u00bc\u0003\u0002\u0002\u0002\u00bc",
    "\u00ba\u0003\u0002\u0002\u0002\u00bc\u00bd\u0003\u0002\u0002\u0002\u00bd",
    "\u00be\u0003\u0002\u0002\u0002\u00be\u00c0\u0005\b\u0005\u0002\u00bf",
    "\u00ba\u0003\u0002\u0002\u0002\u00c0\u00c3\u0003\u0002\u0002\u0002\u00c1",
    "\u00bf\u0003\u0002\u0002\u0002\u00c1\u00c2\u0003\u0002\u0002\u0002\u00c2",
    "\u00c7\u0003\u0002\u0002\u0002\u00c3\u00c1\u0003\u0002\u0002\u0002\u00c4",
    "\u00c6\u0007\u0003\u0002\u0002\u00c5\u00c4\u0003\u0002\u0002\u0002\u00c6",
    "\u00c9\u0003\u0002\u0002\u0002\u00c7\u00c5\u0003\u0002\u0002\u0002\u00c7",
    "\u00c8\u0003\u0002\u0002\u0002\u00c8\u0007\u0003\u0002\u0002\u0002\u00c9",
    "\u00c7\u0003\u0002\u0002\u0002\u00ca\u00cd\u0007I\u0002\u0002\u00cb",
    "\u00cc\u0007t\u0002\u0002\u00cc\u00ce\u0007q\u0002\u0002\u00cd\u00cb",
    "\u0003\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002\u0002\u0002\u00ce\u00d0",
    "\u0003\u0002\u0002\u0002\u00cf\u00ca\u0003\u0002\u0002\u0002\u00cf\u00d0",
    "\u0003\u0002\u0002\u0002\u00d0\u00ef\u0003\u0002\u0002\u0002\u00d1\u00f0",
    "\u0005\n\u0006\u0002\u00d2\u00f0\u0005\f\u0007\u0002\u00d3\u00f0\u0005",
    "\u000e\b\u0002\u00d4\u00f0\u0005\u0010\t\u0002\u00d5\u00f0\u0005\u0012",
    "\n\u0002\u00d6\u00f0\u0005\u0014\u000b\u0002\u00d7\u00f0\u0005\u0016",
    "\f\u0002\u00d8\u00f0\u0005\u0018\r\u0002\u00d9\u00f0\u0005\u001a\u000e",
    "\u0002\u00da\u00f0\u0005\u001c\u000f\u0002\u00db\u00f0\u0005\u001e\u0010",
    "\u0002\u00dc\u00f0\u0005 \u0011\u0002\u00dd\u00f0\u0005\"\u0012\u0002",
    "\u00de\u00f0\u0005$\u0013\u0002\u00df\u00f0\u0005&\u0014\u0002\u00e0",
    "\u00f0\u0005(\u0015\u0002\u00e1\u00f0\u0005*\u0016\u0002\u00e2\u00f0",
    "\u0005,\u0017\u0002\u00e3\u00f0\u0005.\u0018\u0002\u00e4\u00f0\u0005",
    "0\u0019\u0002\u00e5\u00f0\u00052\u001a\u0002\u00e6\u00f0\u00054\u001b",
    "\u0002\u00e7\u00f0\u00056\u001c\u0002\u00e8\u00f0\u00058\u001d\u0002",
    "\u00e9\u00f0\u0005:\u001e\u0002\u00ea\u00f0\u0005<\u001f\u0002\u00eb",
    "\u00f0\u0005> \u0002\u00ec\u00f0\u0005B\"\u0002\u00ed\u00f0\u0005D#",
    "\u0002\u00ee\u00f0\u0005F$\u0002\u00ef\u00d1\u0003\u0002\u0002\u0002",
    "\u00ef\u00d2\u0003\u0002\u0002\u0002\u00ef\u00d3\u0003\u0002\u0002\u0002",
    "\u00ef\u00d4\u0003\u0002\u0002\u0002\u00ef\u00d5\u0003\u0002\u0002\u0002",
    "\u00ef\u00d6\u0003\u0002\u0002\u0002\u00ef\u00d7\u0003\u0002\u0002\u0002",
    "\u00ef\u00d8\u0003\u0002\u0002\u0002\u00ef\u00d9\u0003\u0002\u0002\u0002",
    "\u00ef\u00da\u0003\u0002\u0002\u0002\u00ef\u00db\u0003\u0002\u0002\u0002",
    "\u00ef\u00dc\u0003\u0002\u0002\u0002\u00ef\u00dd\u0003\u0002\u0002\u0002",
    "\u00ef\u00de\u0003\u0002\u0002\u0002\u00ef\u00df\u0003\u0002\u0002\u0002",
    "\u00ef\u00e0\u0003\u0002\u0002\u0002\u00ef\u00e1\u0003\u0002\u0002\u0002",
    "\u00ef\u00e2\u0003\u0002\u0002\u0002\u00ef\u00e3\u0003\u0002\u0002\u0002",
    "\u00ef\u00e4\u0003\u0002\u0002\u0002\u00ef\u00e5\u0003\u0002\u0002\u0002",
    "\u00ef\u00e6\u0003\u0002\u0002\u0002\u00ef\u00e7\u0003\u0002\u0002\u0002",
    "\u00ef\u00e8\u0003\u0002\u0002\u0002\u00ef\u00e9\u0003\u0002\u0002\u0002",
    "\u00ef\u00ea\u0003\u0002\u0002\u0002\u00ef\u00eb\u0003\u0002\u0002\u0002",
    "\u00ef\u00ec\u0003\u0002\u0002\u0002\u00ef\u00ed\u0003\u0002\u0002\u0002",
    "\u00ef\u00ee\u0003\u0002\u0002\u0002\u00f0\t\u0003\u0002\u0002\u0002",
    "\u00f1\u00f2\u0007 \u0002\u0002\u00f2\u00f6\u0007\u0084\u0002\u0002",
    "\u00f3\u00f4\u0005\u0086D\u0002\u00f4\u00f5\u0007\u0004\u0002\u0002",
    "\u00f5\u00f7\u0003\u0002\u0002\u0002\u00f6\u00f3\u0003\u0002\u0002\u0002",
    "\u00f6\u00f7\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003\u0002\u0002\u0002",
    "\u00f8\u0101\u0005\u0088E\u0002\u00f9\u00fa\u0007{\u0002\u0002\u00fa",
    "\u00fb\u0007\u0088\u0002\u0002\u00fb\u0102\u0005\u008cG\u0002\u00fc",
    "\u00fe\u0007\u001d\u0002\u0002\u00fd\u00ff\u00070\u0002\u0002\u00fe",
    "\u00fd\u0003\u0002\u0002\u0002\u00fe\u00ff\u0003\u0002\u0002\u0002\u00ff",
    "\u0100\u0003\u0002\u0002\u0002\u0100\u0102\u0005H%\u0002\u0101\u00f9",
    "\u0003\u0002\u0002\u0002\u0101\u00fc\u0003\u0002\u0002\u0002\u0102\u000b",
    "\u0003\u0002\u0002\u0002\u0103\u010a\u0007!\u0002\u0002\u0104\u010b",
    "\u0005\u0086D\u0002\u0105\u010b\u0005\u008aF\u0002\u0106\u0107\u0005",
    "\u0086D\u0002\u0107\u0108\u0007\u0004\u0002\u0002\u0108\u0109\u0005",
    "\u008aF\u0002\u0109\u010b\u0003\u0002\u0002\u0002\u010a\u0104\u0003",
    "\u0002\u0002\u0002\u010a\u0105\u0003\u0002\u0002\u0002\u010a\u0106\u0003",
    "\u0002\u0002\u0002\u010a\u010b\u0003\u0002\u0002\u0002\u010b\r\u0003",
    "\u0002\u0002\u0002\u010c\u010e\u0007%\u0002\u0002\u010d\u010f\u0007",
    "9\u0002\u0002\u010e\u010d\u0003\u0002\u0002\u0002\u010e\u010f\u0003",
    "\u0002\u0002\u0002\u010f\u0110\u0003\u0002\u0002\u0002\u0110\u0111\u0005",
    "P)\u0002\u0111\u0112\u0007#\u0002\u0002\u0112\u0113\u0005\u0086D\u0002",
    "\u0113\u000f\u0003\u0002\u0002\u0002\u0114\u0116\u0007(\u0002\u0002",
    "\u0115\u0117\t\u0002\u0002\u0002\u0116\u0115\u0003\u0002\u0002\u0002",
    "\u0116\u0117\u0003\u0002\u0002\u0002\u0117\u011c\u0003\u0002\u0002\u0002",
    "\u0118\u011a\u0007\u0089\u0002\u0002\u0119\u011b\u0005\u00a2R\u0002",
    "\u011a\u0119\u0003\u0002\u0002\u0002\u011a\u011b\u0003\u0002\u0002\u0002",
    "\u011b\u011d\u0003\u0002\u0002\u0002\u011c\u0118\u0003\u0002\u0002\u0002",
    "\u011c\u011d\u0003\u0002\u0002\u0002\u011d\u0011\u0003\u0002\u0002\u0002",
    "\u011e\u0123\t\u0003\u0002\u0002\u011f\u0121\u0007\u0089\u0002\u0002",
    "\u0120\u0122\u0005\u00a2R\u0002\u0121\u0120\u0003\u0002\u0002\u0002",
    "\u0121\u0122\u0003\u0002\u0002\u0002\u0122\u0124\u0003\u0002\u0002\u0002",
    "\u0123\u011f\u0003\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002",
    "\u0124\u0013\u0003\u0002\u0002\u0002\u0125\u0127\u0007\u0095\u0002\u0002",
    "\u0126\u0128\u0007v\u0002\u0002\u0127\u0126\u0003\u0002\u0002\u0002",
    "\u0127\u0128\u0003\u0002\u0002\u0002\u0128\u0129\u0003\u0002\u0002\u0002",
    "\u0129\u012e\u0005b2\u0002\u012a\u012b\u0007\u0007\u0002\u0002\u012b",
    "\u012d\u0005b2\u0002\u012c\u012a\u0003\u0002\u0002\u0002\u012d\u0130",
    "\u0003\u0002\u0002\u0002\u012e\u012c\u0003\u0002\u0002\u0002\u012e\u012f",
    "\u0003\u0002\u0002\u0002\u012f\u0132\u0003\u0002\u0002\u0002\u0130\u012e",
    "\u0003\u0002\u0002\u0002\u0131\u0125\u0003\u0002\u0002\u0002\u0131\u0132",
    "\u0003\u0002\u0002\u0002\u0132\u0133\u0003\u0002\u0002\u0002\u0133\u013d",
    "\u0005n8\u0002\u0134\u0136\u0007\u008b\u0002\u0002\u0135\u0137\u0007",
    "\u001f\u0002\u0002\u0136\u0135\u0003\u0002\u0002\u0002\u0136\u0137\u0003",
    "\u0002\u0002\u0002\u0137\u013b\u0003\u0002\u0002\u0002\u0138\u013b\u0007",
    "\\\u0002\u0002\u0139\u013b\u0007F\u0002\u0002\u013a\u0134\u0003\u0002",
    "\u0002\u0002\u013a\u0138\u0003\u0002\u0002\u0002\u013a\u0139\u0003\u0002",
    "\u0002\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c\u013e\u0005n",
    "8\u0002\u013d\u013a\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002",
    "\u0002\u0002\u013f\u013d\u0003\u0002\u0002\u0002\u013f\u0140\u0003\u0002",
    "\u0002\u0002\u0140\u014b\u0003\u0002\u0002\u0002\u0141\u0142\u0007o",
    "\u0002\u0002\u0142\u0143\u0007*\u0002\u0002\u0143\u0148\u0005^0\u0002",
    "\u0144\u0145\u0007\u0007\u0002\u0002\u0145\u0147\u0005^0\u0002\u0146",
    "\u0144\u0003\u0002\u0002\u0002\u0147\u014a\u0003\u0002\u0002\u0002\u0148",
    "\u0146\u0003\u0002\u0002\u0002\u0148\u0149\u0003\u0002\u0002\u0002\u0149",
    "\u014c\u0003\u0002\u0002\u0002\u014a\u0148\u0003\u0002\u0002\u0002\u014b",
    "\u0141\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c",
    "\u0153\u0003\u0002\u0002\u0002\u014d\u014e\u0007d\u0002\u0002\u014e",
    "\u0151\u0005P)\u0002\u014f\u0150\t\u0004\u0002\u0002\u0150\u0152\u0005",
    "P)\u0002\u0151\u014f\u0003\u0002\u0002\u0002\u0151\u0152\u0003\u0002",
    "\u0002\u0002\u0152\u0154\u0003\u0002\u0002\u0002\u0153\u014d\u0003\u0002",
    "\u0002\u0002\u0153\u0154\u0003\u0002\u0002\u0002\u0154\u0015\u0003\u0002",
    "\u0002\u0002\u0155\u0157\u00074\u0002\u0002\u0156\u0158\u0007\u008c",
    "\u0002\u0002\u0157\u0156\u0003\u0002\u0002\u0002\u0157\u0158\u0003\u0002",
    "\u0002\u0002\u0158\u0159\u0003\u0002\u0002\u0002\u0159\u015d\u0007V",
    "\u0002\u0002\u015a\u015b\u0007R\u0002\u0002\u015b\u015c\u0007h\u0002",
    "\u0002\u015c\u015e\u0007H\u0002\u0002\u015d\u015a\u0003\u0002\u0002",
    "\u0002\u015d\u015e\u0003\u0002\u0002\u0002\u015e\u0162\u0003\u0002\u0002",
    "\u0002\u015f\u0160\u0005\u0086D\u0002\u0160\u0161\u0007\u0004\u0002",
    "\u0002\u0161\u0163\u0003\u0002\u0002\u0002\u0162\u015f\u0003\u0002\u0002",
    "\u0002\u0162\u0163\u0003\u0002\u0002\u0002\u0163\u0164\u0003\u0002\u0002",
    "\u0002\u0164\u0165\u0005\u0094K\u0002\u0165\u0166\u0007m\u0002\u0002",
    "\u0166\u0167\u0005\u0088E\u0002\u0167\u0168\u0007\u0005\u0002\u0002",
    "\u0168\u016d\u0005V,\u0002\u0169\u016a\u0007\u0007\u0002\u0002\u016a",
    "\u016c\u0005V,\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016c\u016f",
    "\u0003\u0002\u0002\u0002\u016d\u016b\u0003\u0002\u0002\u0002\u016d\u016e",
    "\u0003\u0002\u0002\u0002\u016e\u0170\u0003\u0002\u0002\u0002\u016f\u016d",
    "\u0003\u0002\u0002\u0002\u0170\u0173\u0007\u0006\u0002\u0002\u0171\u0172",
    "\u0007\u0094\u0002\u0002\u0172\u0174\u0005P)\u0002\u0173\u0171\u0003",
    "\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174\u0017\u0003",
    "\u0002\u0002\u0002\u0175\u0177\u00074\u0002\u0002\u0176\u0178\t\u0005",
    "\u0002\u0002\u0177\u0176\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002",
    "\u0002\u0002\u0178\u0179\u0003\u0002\u0002\u0002\u0179\u017d\u0007\u0084",
    "\u0002\u0002\u017a\u017b\u0007R\u0002\u0002\u017b\u017c\u0007h\u0002",
    "\u0002\u017c\u017e\u0007H\u0002\u0002\u017d\u017a\u0003\u0002\u0002",
    "\u0002\u017d\u017e\u0003\u0002\u0002\u0002\u017e\u0182\u0003\u0002\u0002",
    "\u0002\u017f\u0180\u0005\u0086D\u0002\u0180\u0181\u0007\u0004\u0002",
    "\u0002\u0181\u0183\u0003\u0002\u0002\u0002\u0182\u017f\u0003\u0002\u0002",
    "\u0002\u0182\u0183\u0003\u0002\u0002\u0002\u0183\u0184\u0003\u0002\u0002",
    "\u0002\u0184\u019c\u0005\u0088E\u0002\u0185\u0186\u0007\u0005\u0002",
    "\u0002\u0186\u018b\u0005H%\u0002\u0187\u0188\u0007\u0007\u0002\u0002",
    "\u0188\u018a\u0005H%\u0002\u0189\u0187\u0003\u0002\u0002\u0002\u018a",
    "\u018d\u0003\u0002\u0002\u0002\u018b\u0189\u0003\u0002\u0002\u0002\u018b",
    "\u018c\u0003\u0002\u0002\u0002\u018c\u0192\u0003\u0002\u0002\u0002\u018d",
    "\u018b\u0003\u0002\u0002\u0002\u018e\u018f\u0007\u0007\u0002\u0002\u018f",
    "\u0191\u0005X-\u0002\u0190\u018e\u0003\u0002\u0002\u0002\u0191\u0194",
    "\u0003\u0002\u0002\u0002\u0192\u0190\u0003\u0002\u0002\u0002\u0192\u0193",
    "\u0003\u0002\u0002\u0002\u0193\u0195\u0003\u0002\u0002\u0002\u0194\u0192",
    "\u0003\u0002\u0002\u0002\u0195\u0198\u0007\u0006\u0002\u0002\u0196\u0197",
    "\u0007\u0096\u0002\u0002\u0197\u0199\u0007\u0097\u0002\u0002\u0198\u0196",
    "\u0003\u0002\u0002\u0002\u0198\u0199\u0003\u0002\u0002\u0002\u0199\u019d",
    "\u0003\u0002\u0002\u0002\u019a\u019b\u0007#\u0002\u0002\u019b\u019d",
    "\u0005> \u0002\u019c\u0185\u0003\u0002\u0002\u0002\u019c\u019a\u0003",
    "\u0002\u0002\u0002\u019d\u0019\u0003\u0002\u0002\u0002\u019e\u01a0\u0007",
    "4\u0002\u0002\u019f\u01a1\t\u0005\u0002\u0002\u01a0\u019f\u0003\u0002",
    "\u0002\u0002\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002",
    "\u0002\u0002\u01a2\u01a6\u0007\u008a\u0002\u0002\u01a3\u01a4\u0007R",
    "\u0002\u0002\u01a4\u01a5\u0007h\u0002\u0002\u01a5\u01a7\u0007H\u0002",
    "\u0002\u01a6\u01a3\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002",
    "\u0002\u01a7\u01ab\u0003\u0002\u0002\u0002\u01a8\u01a9\u0005\u0086D",
    "\u0002\u01a9\u01aa\u0007\u0004\u0002\u0002\u01aa\u01ac\u0003\u0002\u0002",
    "\u0002\u01ab\u01a8\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003\u0002\u0002",
    "\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad\u01b2\u0005\u0096L",
    "\u0002\u01ae\u01b3\u0007\'\u0002\u0002\u01af\u01b3\u0007\u001e\u0002",
    "\u0002\u01b0\u01b1\u0007[\u0002\u0002\u01b1\u01b3\u0007k\u0002\u0002",
    "\u01b2\u01ae\u0003\u0002\u0002\u0002\u01b2\u01af\u0003\u0002\u0002\u0002",
    "\u01b2\u01b0\u0003\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002",
    "\u01b3\u01c2\u0003\u0002\u0002\u0002\u01b4\u01c3\u0007=\u0002\u0002",
    "\u01b5\u01c3\u0007Z\u0002\u0002\u01b6\u01c0\u0007\u008d\u0002\u0002",
    "\u01b7\u01b8\u0007k\u0002\u0002\u01b8\u01bd\u0005\u008eH\u0002\u01b9",
    "\u01ba\u0007\u0007\u0002\u0002\u01ba\u01bc\u0005\u008eH\u0002\u01bb",
    "\u01b9\u0003\u0002\u0002\u0002\u01bc\u01bf\u0003\u0002\u0002\u0002\u01bd",
    "\u01bb\u0003\u0002\u0002\u0002\u01bd\u01be\u0003\u0002\u0002\u0002\u01be",
    "\u01c1\u0003\u0002\u0002\u0002\u01bf\u01bd\u0003\u0002\u0002\u0002\u01c0",
    "\u01b7\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002\u01c1",
    "\u01c3\u0003\u0002\u0002\u0002\u01c2\u01b4\u0003\u0002\u0002\u0002\u01c2",
    "\u01b5\u0003\u0002\u0002\u0002\u01c2\u01b6\u0003\u0002\u0002\u0002\u01c3",
    "\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c8\u0007m\u0002\u0002\u01c5",
    "\u01c6\u0005\u0086D\u0002\u01c6\u01c7\u0007\u0004\u0002\u0002\u01c7",
    "\u01c9\u0003\u0002\u0002\u0002\u01c8\u01c5\u0003\u0002\u0002\u0002\u01c8",
    "\u01c9\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002\u0002\u0002\u01ca",
    "\u01ce\u0005\u0088E\u0002\u01cb\u01cc\u0007K\u0002\u0002\u01cc\u01cd",
    "\u0007B\u0002\u0002\u01cd\u01cf\u0007\u0080\u0002\u0002\u01ce\u01cb",
    "\u0003\u0002\u0002\u0002\u01ce\u01cf\u0003\u0002\u0002\u0002\u01cf\u01d2",
    "\u0003\u0002\u0002\u0002\u01d0\u01d1\u0007\u0093\u0002\u0002\u01d1\u01d3",
    "\u0005P)\u0002\u01d2\u01d0\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003",
    "\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4\u01dd\u0007",
    "(\u0002\u0002\u01d5\u01da\u0005B\"\u0002\u01d6\u01da\u00050\u0019\u0002",
    "\u01d7\u01da\u0005 \u0011\u0002\u01d8\u01da\u0005> \u0002\u01d9\u01d5",
    "\u0003\u0002\u0002\u0002\u01d9\u01d6\u0003\u0002\u0002\u0002\u01d9\u01d7",
    "\u0003\u0002\u0002\u0002\u01d9\u01d8\u0003\u0002\u0002\u0002\u01da\u01db",
    "\u0003\u0002\u0002\u0002\u01db\u01dc\u0007\u0003\u0002\u0002\u01dc\u01de",
    "\u0003\u0002\u0002\u0002\u01dd\u01d9\u0003\u0002\u0002\u0002\u01de\u01df",
    "\u0003\u0002\u0002\u0002\u01df\u01dd\u0003\u0002\u0002\u0002\u01df\u01e0",
    "\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002\u01e1\u01e2",
    "\u0007D\u0002\u0002\u01e2\u001b\u0003\u0002\u0002\u0002\u01e3\u01e5",
    "\u00074\u0002\u0002\u01e4\u01e6\t\u0005\u0002\u0002\u01e5\u01e4\u0003",
    "\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003",
    "\u0002\u0002\u0002\u01e7\u01eb\u0007\u0091\u0002\u0002\u01e8\u01e9\u0007",
    "R\u0002\u0002\u01e9\u01ea\u0007h\u0002\u0002\u01ea\u01ec\u0007H\u0002",
    "\u0002\u01eb\u01e8\u0003\u0002\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002",
    "\u0002\u01ec\u01f0\u0003\u0002\u0002\u0002\u01ed\u01ee\u0005\u0086D",
    "\u0002\u01ee\u01ef\u0007\u0004\u0002\u0002\u01ef\u01f1\u0003\u0002\u0002",
    "\u0002\u01f0\u01ed\u0003\u0002\u0002\u0002\u01f0\u01f1\u0003\u0002\u0002",
    "\u0002\u01f1\u01f2\u0003\u0002\u0002\u0002\u01f2\u01f3\u0005\u0098M",
    "\u0002\u01f3\u01f4\u0007#\u0002\u0002\u01f4\u01f5\u0005> \u0002\u01f5",
    "\u001d\u0003\u0002\u0002\u0002\u01f6\u01f7\u00074\u0002\u0002\u01f7",
    "\u01f8\u0007\u0092\u0002\u0002\u01f8\u01fc\u0007\u0084\u0002\u0002\u01f9",
    "\u01fa\u0007R\u0002\u0002\u01fa\u01fb\u0007h\u0002\u0002\u01fb\u01fd",
    "\u0007H\u0002\u0002\u01fc\u01f9\u0003\u0002\u0002\u0002\u01fc\u01fd",
    "\u0003\u0002\u0002\u0002\u01fd\u0201\u0003\u0002\u0002\u0002\u01fe\u01ff",
    "\u0005\u0086D\u0002\u01ff\u0200\u0007\u0004\u0002\u0002\u0200\u0202",
    "\u0003\u0002\u0002\u0002\u0201\u01fe\u0003\u0002\u0002\u0002\u0201\u0202",
    "\u0003\u0002\u0002\u0002\u0202\u0203\u0003\u0002\u0002\u0002\u0203\u0204",
    "\u0005\u0088E\u0002\u0204\u0205\u0007\u008e\u0002\u0002\u0205\u0211",
    "\u0005\u009aN\u0002\u0206\u0207\u0007\u0005\u0002\u0002\u0207\u020c",
    "\u0005|?\u0002\u0208\u0209\u0007\u0007\u0002\u0002\u0209\u020b\u0005",
    "|?\u0002\u020a\u0208\u0003\u0002\u0002\u0002\u020b\u020e\u0003\u0002",
    "\u0002\u0002\u020c\u020a\u0003\u0002\u0002\u0002\u020c\u020d\u0003\u0002",
    "\u0002\u0002\u020d\u020f\u0003\u0002\u0002\u0002\u020e\u020c\u0003\u0002",
    "\u0002\u0002\u020f\u0210\u0007\u0006\u0002\u0002\u0210\u0212\u0003\u0002",
    "\u0002\u0002\u0211\u0206\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002",
    "\u0002\u0002\u0212\u001f\u0003\u0002\u0002\u0002\u0213\u0215\u0005Z",
    ".\u0002\u0214\u0213\u0003\u0002\u0002\u0002\u0214\u0215\u0003\u0002",
    "\u0002\u0002\u0215\u0216\u0003\u0002\u0002\u0002\u0216\u0217\u0007=",
    "\u0002\u0002\u0217\u0218\u0007M\u0002\u0002\u0218\u021b\u0005\\/\u0002",
    "\u0219\u021a\u0007\u0094\u0002\u0002\u021a\u021c\u0005P)\u0002\u021b",
    "\u0219\u0003\u0002\u0002\u0002\u021b\u021c\u0003\u0002\u0002\u0002\u021c",
    "!\u0003\u0002\u0002\u0002\u021d\u021f\u0005Z.\u0002\u021e\u021d\u0003",
    "\u0002\u0002\u0002\u021e\u021f\u0003\u0002\u0002\u0002\u021f\u0220\u0003",
    "\u0002\u0002\u0002\u0220\u0221\u0007=\u0002\u0002\u0221\u0222\u0007",
    "M\u0002\u0002\u0222\u0225\u0005\\/\u0002\u0223\u0224\u0007\u0094\u0002",
    "\u0002\u0224\u0226\u0005P)\u0002\u0225\u0223\u0003\u0002\u0002\u0002",
    "\u0225\u0226\u0003\u0002\u0002\u0002\u0226\u0239\u0003\u0002\u0002\u0002",
    "\u0227\u0228\u0007o\u0002\u0002\u0228\u0229\u0007*\u0002\u0002\u0229",
    "\u022e\u0005^0\u0002\u022a\u022b\u0007\u0007\u0002\u0002\u022b\u022d",
    "\u0005^0\u0002\u022c\u022a\u0003\u0002\u0002\u0002\u022d\u0230\u0003",
    "\u0002\u0002\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022e\u022f\u0003",
    "\u0002\u0002\u0002\u022f\u0232\u0003\u0002\u0002\u0002\u0230\u022e\u0003",
    "\u0002\u0002\u0002\u0231\u0227\u0003\u0002\u0002\u0002\u0231\u0232\u0003",
    "\u0002\u0002\u0002\u0232\u0233\u0003\u0002\u0002\u0002\u0233\u0234\u0007",
    "d\u0002\u0002\u0234\u0237\u0005P)\u0002\u0235\u0236\t\u0004\u0002\u0002",
    "\u0236\u0238\u0005P)\u0002\u0237\u0235\u0003\u0002\u0002\u0002\u0237",
    "\u0238\u0003\u0002\u0002\u0002\u0238\u023a\u0003\u0002\u0002\u0002\u0239",
    "\u0231\u0003\u0002\u0002\u0002\u0239\u023a\u0003\u0002\u0002\u0002\u023a",
    "#\u0003\u0002\u0002\u0002\u023b\u023d\u0007?\u0002\u0002\u023c\u023e",
    "\u00079\u0002\u0002\u023d\u023c\u0003\u0002\u0002\u0002\u023d\u023e",
    "\u0003\u0002\u0002\u0002\u023e\u023f\u0003\u0002\u0002\u0002\u023f\u0240",
    "\u0005\u0086D\u0002\u0240%\u0003\u0002\u0002\u0002\u0241\u0242\u0007",
    "A\u0002\u0002\u0242\u0245\u0007V\u0002\u0002\u0243\u0244\u0007R\u0002",
    "\u0002\u0244\u0246\u0007H\u0002\u0002\u0245\u0243\u0003\u0002\u0002",
    "\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u024a\u0003\u0002\u0002",
    "\u0002\u0247\u0248\u0005\u0086D\u0002\u0248\u0249\u0007\u0004\u0002",
    "\u0002\u0249\u024b\u0003\u0002\u0002\u0002\u024a\u0247\u0003\u0002\u0002",
    "\u0002\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002\u0002",
    "\u0002\u024c\u024d\u0005\u0094K\u0002\u024d\'\u0003\u0002\u0002\u0002",
    "\u024e\u024f\u0007A\u0002\u0002\u024f\u0252\u0007\u0084\u0002\u0002",
    "\u0250\u0251\u0007R\u0002\u0002\u0251\u0253\u0007H\u0002\u0002\u0252",
    "\u0250\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002\u0253",
    "\u0257\u0003\u0002\u0002\u0002\u0254\u0255\u0005\u0086D\u0002\u0255",
    "\u0256\u0007\u0004\u0002\u0002\u0256\u0258\u0003\u0002\u0002\u0002\u0257",
    "\u0254\u0003\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258",
    "\u0259\u0003\u0002\u0002\u0002\u0259\u025a\u0005\u0088E\u0002\u025a",
    ")\u0003\u0002\u0002\u0002\u025b\u025c\u0007A\u0002\u0002\u025c\u025f",
    "\u0007\u008a\u0002\u0002\u025d\u025e\u0007R\u0002\u0002\u025e\u0260",
    "\u0007H\u0002\u0002\u025f\u025d\u0003\u0002\u0002\u0002\u025f\u0260",
    "\u0003\u0002\u0002\u0002\u0260\u0264\u0003\u0002\u0002\u0002\u0261\u0262",
    "\u0005\u0086D\u0002\u0262\u0263\u0007\u0004\u0002\u0002\u0263\u0265",
    "\u0003\u0002\u0002\u0002\u0264\u0261\u0003\u0002\u0002\u0002\u0264\u0265",
    "\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002\u0266\u0267",
    "\u0005\u0096L\u0002\u0267+\u0003\u0002\u0002\u0002\u0268\u0269\u0007",
    "A\u0002\u0002\u0269\u026c\u0007\u0091\u0002\u0002\u026a\u026b\u0007",
    "R\u0002\u0002\u026b\u026d\u0007H\u0002\u0002\u026c\u026a\u0003\u0002",
    "\u0002\u0002\u026c\u026d\u0003\u0002\u0002\u0002\u026d\u0271\u0003\u0002",
    "\u0002\u0002\u026e\u026f\u0005\u0086D\u0002\u026f\u0270\u0007\u0004",
    "\u0002\u0002\u0270\u0272\u0003\u0002\u0002\u0002\u0271\u026e\u0003\u0002",
    "\u0002\u0002\u0271\u0272\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002",
    "\u0002\u0002\u0273\u0274\u0005\u0098M\u0002\u0274-\u0003\u0002\u0002",
    "\u0002\u0275\u0277\u0007\u0095\u0002\u0002\u0276\u0278\u0007v\u0002",
    "\u0002\u0277\u0276\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002\u0002",
    "\u0002\u0278\u0279\u0003\u0002\u0002\u0002\u0279\u027e\u0005b2\u0002",
    "\u027a\u027b\u0007\u0007\u0002\u0002\u027b\u027d\u0005b2\u0002\u027c",
    "\u027a\u0003\u0002\u0002\u0002\u027d\u0280\u0003\u0002\u0002\u0002\u027e",
    "\u027c\u0003\u0002\u0002\u0002\u027e\u027f\u0003\u0002\u0002\u0002\u027f",
    "\u0282\u0003\u0002\u0002\u0002\u0280\u027e\u0003\u0002\u0002\u0002\u0281",
    "\u0275\u0003\u0002\u0002\u0002\u0281\u0282\u0003\u0002\u0002\u0002\u0282",
    "\u0283\u0003\u0002\u0002\u0002\u0283\u0289\u0005n8\u0002\u0284\u0285",
    "\u0005p9\u0002\u0285\u0286\u0005n8\u0002\u0286\u0288\u0003\u0002\u0002",
    "\u0002\u0287\u0284\u0003\u0002\u0002\u0002\u0288\u028b\u0003\u0002\u0002",
    "\u0002\u0289\u0287\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002\u0002",
    "\u0002\u028a\u0296\u0003\u0002\u0002\u0002\u028b\u0289\u0003\u0002\u0002",
    "\u0002\u028c\u028d\u0007o\u0002\u0002\u028d\u028e\u0007*\u0002\u0002",
    "\u028e\u0293\u0005^0\u0002\u028f\u0290\u0007\u0007\u0002\u0002\u0290",
    "\u0292\u0005^0\u0002\u0291\u028f\u0003\u0002\u0002\u0002\u0292\u0295",
    "\u0003\u0002\u0002\u0002\u0293\u0291\u0003\u0002\u0002\u0002\u0293\u0294",
    "\u0003\u0002\u0002\u0002\u0294\u0297\u0003\u0002\u0002\u0002\u0295\u0293",
    "\u0003\u0002\u0002\u0002\u0296\u028c\u0003\u0002\u0002\u0002\u0296\u0297",
    "\u0003\u0002\u0002\u0002\u0297\u029e\u0003\u0002\u0002\u0002\u0298\u0299",
    "\u0007d\u0002\u0002\u0299\u029c\u0005P)\u0002\u029a\u029b\t\u0004\u0002",
    "\u0002\u029b\u029d\u0005P)\u0002\u029c\u029a\u0003\u0002\u0002\u0002",
    "\u029c\u029d\u0003\u0002\u0002\u0002\u029d\u029f\u0003\u0002\u0002\u0002",
    "\u029e\u0298\u0003\u0002\u0002\u0002\u029e\u029f\u0003\u0002\u0002\u0002",
    "\u029f/\u0003\u0002\u0002\u0002\u02a0\u02a2\u0005Z.\u0002\u02a1\u02a0",
    "\u0003\u0002\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2\u02b4",
    "\u0003\u0002\u0002\u0002\u02a3\u02b5\u0007Z\u0002\u0002\u02a4\u02b5",
    "\u0007|\u0002\u0002\u02a5\u02a6\u0007Z\u0002\u0002\u02a6\u02a7\u0007",
    "n\u0002\u0002\u02a7\u02b5\u0007|\u0002\u0002\u02a8\u02a9\u0007Z\u0002",
    "\u0002\u02a9\u02aa\u0007n\u0002\u0002\u02aa\u02b5\u0007\u007f\u0002",
    "\u0002\u02ab\u02ac\u0007Z\u0002\u0002\u02ac\u02ad\u0007n\u0002\u0002",
    "\u02ad\u02b5\u0007\u001b\u0002\u0002\u02ae\u02af\u0007Z\u0002\u0002",
    "\u02af\u02b0\u0007n\u0002\u0002\u02b0\u02b5\u0007J\u0002\u0002\u02b1",
    "\u02b2\u0007Z\u0002\u0002\u02b2\u02b3\u0007n\u0002\u0002\u02b3\u02b5",
    "\u0007S\u0002\u0002\u02b4\u02a3\u0003\u0002\u0002\u0002\u02b4\u02a4",
    "\u0003\u0002\u0002\u0002\u02b4\u02a5\u0003\u0002\u0002\u0002\u02b4\u02a8",
    "\u0003\u0002\u0002\u0002\u02b4\u02ab\u0003\u0002\u0002\u0002\u02b4\u02ae",
    "\u0003\u0002\u0002\u0002\u02b4\u02b1\u0003\u0002\u0002\u0002\u02b5\u02b6",
    "\u0003\u0002\u0002\u0002\u02b6\u02ba\u0007]\u0002\u0002\u02b7\u02b8",
    "\u0005\u0086D\u0002\u02b8\u02b9\u0007\u0004\u0002\u0002\u02b9\u02bb",
    "\u0003\u0002\u0002\u0002\u02ba\u02b7\u0003\u0002\u0002\u0002\u02ba\u02bb",
    "\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u02c8",
    "\u0005\u0088E\u0002\u02bd\u02be\u0007\u0005\u0002\u0002\u02be\u02c3",
    "\u0005\u008eH\u0002\u02bf\u02c0\u0007\u0007\u0002\u0002\u02c0\u02c2",
    "\u0005\u008eH\u0002\u02c1\u02bf\u0003\u0002\u0002\u0002\u02c2\u02c5",
    "\u0003\u0002\u0002\u0002\u02c3\u02c1\u0003\u0002\u0002\u0002\u02c3\u02c4",
    "\u0003\u0002\u0002\u0002\u02c4\u02c6\u0003\u0002\u0002\u0002\u02c5\u02c3",
    "\u0003\u0002\u0002\u0002\u02c6\u02c7\u0007\u0006\u0002\u0002\u02c7\u02c9",
    "\u0003\u0002\u0002\u0002\u02c8\u02bd\u0003\u0002\u0002\u0002\u02c8\u02c9",
    "\u0003\u0002\u0002\u0002\u02c9\u02e9\u0003\u0002\u0002\u0002\u02ca\u02cb",
    "\u0007\u0090\u0002\u0002\u02cb\u02cc\u0007\u0005\u0002\u0002\u02cc\u02d1",
    "\u0005P)\u0002\u02cd\u02ce\u0007\u0007\u0002\u0002\u02ce\u02d0\u0005",
    "P)\u0002\u02cf\u02cd\u0003\u0002\u0002\u0002\u02d0\u02d3\u0003\u0002",
    "\u0002\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002",
    "\u0002\u0002\u02d2\u02d4\u0003\u0002\u0002\u0002\u02d3\u02d1\u0003\u0002",
    "\u0002\u0002\u02d4\u02e3\u0007\u0006\u0002\u0002\u02d5\u02d6\u0007\u0007",
    "\u0002\u0002\u02d6\u02d7\u0007\u0005\u0002\u0002\u02d7\u02dc\u0005P",
    ")\u0002\u02d8\u02d9\u0007\u0007\u0002\u0002\u02d9\u02db\u0005P)\u0002",
    "\u02da\u02d8\u0003\u0002\u0002\u0002\u02db\u02de\u0003\u0002\u0002\u0002",
    "\u02dc\u02da\u0003\u0002\u0002\u0002\u02dc\u02dd\u0003\u0002\u0002\u0002",
    "\u02dd\u02df\u0003\u0002\u0002\u0002\u02de\u02dc\u0003\u0002\u0002\u0002",
    "\u02df\u02e0\u0007\u0006\u0002\u0002\u02e0\u02e2\u0003\u0002\u0002\u0002",
    "\u02e1\u02d5\u0003\u0002\u0002\u0002\u02e2\u02e5\u0003\u0002\u0002\u0002",
    "\u02e3\u02e1\u0003\u0002\u0002\u0002\u02e3\u02e4\u0003\u0002\u0002\u0002",
    "\u02e4\u02ea\u0003\u0002\u0002\u0002\u02e5\u02e3\u0003\u0002\u0002\u0002",
    "\u02e6\u02ea\u0005> \u0002\u02e7\u02e8\u0007:\u0002\u0002\u02e8\u02ea",
    "\u0007\u0090\u0002\u0002\u02e9\u02ca\u0003\u0002\u0002\u0002\u02e9\u02e6",
    "\u0003\u0002\u0002\u0002\u02e9\u02e7\u0003\u0002\u0002\u0002\u02ea1",
    "\u0003\u0002\u0002\u0002\u02eb\u02ef\u0007r\u0002\u0002\u02ec\u02ed",
    "\u0005\u0086D\u0002\u02ed\u02ee\u0007\u0004\u0002\u0002\u02ee\u02f0",
    "\u0003\u0002\u0002\u0002\u02ef\u02ec\u0003\u0002\u0002\u0002\u02ef\u02f0",
    "\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002\u0002\u0002\u02f1\u02f8",
    "\u0005\u009cO\u0002\u02f2\u02f3\u0007\b\u0002\u0002\u02f3\u02f9\u0005",
    "`1\u0002\u02f4\u02f5\u0007\u0005\u0002\u0002\u02f5\u02f6\u0005`1\u0002",
    "\u02f6\u02f7\u0007\u0006\u0002\u0002\u02f7\u02f9\u0003\u0002\u0002\u0002",
    "\u02f8\u02f2\u0003\u0002\u0002\u0002\u02f8\u02f4\u0003\u0002\u0002\u0002",
    "\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f93\u0003\u0002\u0002\u0002",
    "\u02fa\u0305\u0007y\u0002\u0002\u02fb\u0306\u0005\u0090I\u0002\u02fc",
    "\u02fd\u0005\u0086D\u0002\u02fd\u02fe\u0007\u0004\u0002\u0002\u02fe",
    "\u0300\u0003\u0002\u0002\u0002\u02ff\u02fc\u0003\u0002\u0002\u0002\u02ff",
    "\u0300\u0003\u0002\u0002\u0002\u0300\u0303\u0003\u0002\u0002\u0002\u0301",
    "\u0304\u0005\u0088E\u0002\u0302\u0304\u0005\u0094K\u0002\u0303\u0301",
    "\u0003\u0002\u0002\u0002\u0303\u0302\u0003\u0002\u0002\u0002\u0304\u0306",
    "\u0003\u0002\u0002\u0002\u0305\u02fb\u0003\u0002\u0002\u0002\u0305\u02ff",
    "\u0003\u0002\u0002\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u03065",
    "\u0003\u0002\u0002\u0002\u0307\u0309\u0007z\u0002\u0002\u0308\u030a",
    "\u0007\u0081\u0002\u0002\u0309\u0308\u0003\u0002\u0002\u0002\u0309\u030a",
    "\u0003\u0002\u0002\u0002\u030a\u030b\u0003\u0002\u0002\u0002\u030b\u030c",
    "\u0005\u009eP\u0002\u030c7\u0003\u0002\u0002\u0002\u030d\u0312\u0007",
    "\u007f\u0002\u0002\u030e\u0310\u0007\u0089\u0002\u0002\u030f\u0311\u0005",
    "\u00a2R\u0002\u0310\u030f\u0003\u0002\u0002\u0002\u0310\u0311\u0003",
    "\u0002\u0002\u0002\u0311\u0313\u0003\u0002\u0002\u0002\u0312\u030e\u0003",
    "\u0002\u0002\u0002\u0312\u0313\u0003\u0002\u0002\u0002\u0313\u0319\u0003",
    "\u0002\u0002\u0002\u0314\u0316\u0007\u0088\u0002\u0002\u0315\u0317\u0007",
    "\u0081\u0002\u0002\u0316\u0315\u0003\u0002\u0002\u0002\u0316\u0317\u0003",
    "\u0002\u0002\u0002\u0317\u0318\u0003\u0002\u0002\u0002\u0318\u031a\u0005",
    "\u009eP\u0002\u0319\u0314\u0003\u0002\u0002\u0002\u0319\u031a\u0003",
    "\u0002\u0002\u0002\u031a9\u0003\u0002\u0002\u0002\u031b\u031c\u0007",
    "\u0081\u0002\u0002\u031c\u031d\u0005\u009eP\u0002\u031d;\u0003\u0002",
    "\u0002\u0002\u031e\u0320\u0007\u0095\u0002\u0002\u031f\u0321\u0007v",
    "\u0002\u0002\u0320\u031f\u0003\u0002\u0002\u0002\u0320\u0321\u0003\u0002",
    "\u0002\u0002\u0321\u0322\u0003\u0002\u0002\u0002\u0322\u0327\u0005b",
    "2\u0002\u0323\u0324\u0007\u0007\u0002\u0002\u0324\u0326\u0005b2\u0002",
    "\u0325\u0323\u0003\u0002\u0002\u0002\u0326\u0329\u0003\u0002\u0002\u0002",
    "\u0327\u0325\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002",
    "\u0328\u032b\u0003\u0002\u0002\u0002\u0329\u0327\u0003\u0002\u0002\u0002",
    "\u032a\u031e\u0003\u0002\u0002\u0002\u032a\u032b\u0003\u0002\u0002\u0002",
    "\u032b\u032c\u0003\u0002\u0002\u0002\u032c\u0337\u0005n8\u0002\u032d",
    "\u032e\u0007o\u0002\u0002\u032e\u032f\u0007*\u0002\u0002\u032f\u0334",
    "\u0005^0\u0002\u0330\u0331\u0007\u0007\u0002\u0002\u0331\u0333\u0005",
    "^0\u0002\u0332\u0330\u0003\u0002\u0002\u0002\u0333\u0336\u0003\u0002",
    "\u0002\u0002\u0334\u0332\u0003\u0002\u0002\u0002\u0334\u0335\u0003\u0002",
    "\u0002\u0002\u0335\u0338\u0003\u0002\u0002\u0002\u0336\u0334\u0003\u0002",
    "\u0002\u0002\u0337\u032d\u0003\u0002\u0002\u0002\u0337\u0338\u0003\u0002",
    "\u0002\u0002\u0338\u033f\u0003\u0002\u0002\u0002\u0339\u033a\u0007d",
    "\u0002\u0002\u033a\u033d\u0005P)\u0002\u033b\u033c\t\u0004\u0002\u0002",
    "\u033c\u033e\u0005P)\u0002\u033d\u033b\u0003\u0002\u0002\u0002\u033d",
    "\u033e\u0003\u0002\u0002\u0002\u033e\u0340\u0003\u0002\u0002\u0002\u033f",
    "\u0339\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340",
    "=\u0003\u0002\u0002\u0002\u0341\u0343\u0007\u0095\u0002\u0002\u0342",
    "\u0344\u0007v\u0002\u0002\u0343\u0342\u0003\u0002\u0002\u0002\u0343",
    "\u0344\u0003\u0002\u0002\u0002\u0344\u0345\u0003\u0002\u0002\u0002\u0345",
    "\u034a\u0005b2\u0002\u0346\u0347\u0007\u0007\u0002\u0002\u0347\u0349",
    "\u0005b2\u0002\u0348\u0346\u0003\u0002\u0002\u0002\u0349\u034c\u0003",
    "\u0002\u0002\u0002\u034a\u0348\u0003\u0002\u0002\u0002\u034a\u034b\u0003",
    "\u0002\u0002\u0002\u034b\u034e\u0003\u0002\u0002\u0002\u034c\u034a\u0003",
    "\u0002\u0002\u0002\u034d\u0341\u0003\u0002\u0002\u0002\u034d\u034e\u0003",
    "\u0002\u0002\u0002\u034e\u034f\u0003\u0002\u0002\u0002\u034f\u0355\u0005",
    "@!\u0002\u0350\u0351\u0005p9\u0002\u0351\u0352\u0005@!\u0002\u0352\u0354",
    "\u0003\u0002\u0002\u0002\u0353\u0350\u0003\u0002\u0002\u0002\u0354\u0357",
    "\u0003\u0002\u0002\u0002\u0355\u0353\u0003\u0002\u0002\u0002\u0355\u0356",
    "\u0003\u0002\u0002\u0002\u0356\u0362\u0003\u0002\u0002\u0002\u0357\u0355",
    "\u0003\u0002\u0002\u0002\u0358\u0359\u0007o\u0002\u0002\u0359\u035a",
    "\u0007*\u0002\u0002\u035a\u035f\u0005^0\u0002\u035b\u035c\u0007\u0007",
    "\u0002\u0002\u035c\u035e\u0005^0\u0002\u035d\u035b\u0003\u0002\u0002",
    "\u0002\u035e\u0361\u0003\u0002\u0002\u0002\u035f\u035d\u0003\u0002\u0002",
    "\u0002\u035f\u0360\u0003\u0002\u0002\u0002\u0360\u0363\u0003\u0002\u0002",
    "\u0002\u0361\u035f\u0003\u0002\u0002\u0002\u0362\u0358\u0003\u0002\u0002",
    "\u0002\u0362\u0363\u0003\u0002\u0002\u0002\u0363\u036a\u0003\u0002\u0002",
    "\u0002\u0364\u0365\u0007d\u0002\u0002\u0365\u0368\u0005P)\u0002\u0366",
    "\u0367\t\u0004\u0002\u0002\u0367\u0369\u0005P)\u0002\u0368\u0366\u0003",
    "\u0002\u0002\u0002\u0368\u0369\u0003\u0002\u0002\u0002\u0369\u036b\u0003",
    "\u0002\u0002\u0002\u036a\u0364\u0003\u0002\u0002\u0002\u036a\u036b\u0003",
    "\u0002\u0002\u0002\u036b?\u0003\u0002\u0002\u0002\u036c\u036e\u0007",
    "\u0082\u0002\u0002\u036d\u036f\t\u0006\u0002\u0002\u036e\u036d\u0003",
    "\u0002\u0002\u0002\u036e\u036f\u0003\u0002\u0002\u0002\u036f\u0370\u0003",
    "\u0002\u0002\u0002\u0370\u0375\u0005d3\u0002\u0371\u0372\u0007\u0007",
    "\u0002\u0002\u0372\u0374\u0005d3\u0002\u0373\u0371\u0003\u0002\u0002",
    "\u0002\u0374\u0377\u0003\u0002\u0002\u0002\u0375\u0373\u0003\u0002\u0002",
    "\u0002\u0375\u0376\u0003\u0002\u0002\u0002\u0376\u0384\u0003\u0002\u0002",
    "\u0002\u0377\u0375\u0003\u0002\u0002\u0002\u0378\u0382\u0007M\u0002",
    "\u0002\u0379\u037e\u0005f4\u0002\u037a\u037b\u0007\u0007\u0002\u0002",
    "\u037b\u037d\u0005f4\u0002\u037c\u037a\u0003\u0002\u0002\u0002\u037d",
    "\u0380\u0003\u0002\u0002\u0002\u037e\u037c\u0003\u0002\u0002\u0002\u037e",
    "\u037f\u0003\u0002\u0002\u0002\u037f\u0383\u0003\u0002\u0002\u0002\u0380",
    "\u037e\u0003\u0002\u0002\u0002\u0381\u0383\u0005h5\u0002\u0382\u0379",
    "\u0003\u0002\u0002\u0002\u0382\u0381\u0003\u0002\u0002\u0002\u0383\u0385",
    "\u0003\u0002\u0002\u0002\u0384\u0378\u0003\u0002\u0002\u0002\u0384\u0385",
    "\u0003\u0002\u0002\u0002\u0385\u0388\u0003\u0002\u0002\u0002\u0386\u0387",
    "\u0007\u0094\u0002\u0002\u0387\u0389\u0005P)\u0002\u0388\u0386\u0003",
    "\u0002\u0002\u0002\u0388\u0389\u0003\u0002\u0002\u0002\u0389\u0398\u0003",
    "\u0002\u0002\u0002\u038a\u038b\u0007P\u0002\u0002\u038b\u038c\u0007",
    "*\u0002\u0002\u038c\u0391\u0005P)\u0002\u038d\u038e\u0007\u0007\u0002",
    "\u0002\u038e\u0390\u0005P)\u0002\u038f\u038d\u0003\u0002\u0002\u0002",
    "\u0390\u0393\u0003\u0002\u0002\u0002\u0391\u038f\u0003\u0002\u0002\u0002",
    "\u0391\u0392\u0003\u0002\u0002\u0002\u0392\u0396\u0003\u0002\u0002\u0002",
    "\u0393\u0391\u0003\u0002\u0002\u0002\u0394\u0395\u0007Q\u0002\u0002",
    "\u0395\u0397\u0005P)\u0002\u0396\u0394\u0003\u0002\u0002\u0002\u0396",
    "\u0397\u0003\u0002\u0002\u0002\u0397\u0399\u0003\u0002\u0002\u0002\u0398",
    "\u038a\u0003\u0002\u0002\u0002\u0398\u0399\u0003\u0002\u0002\u0002\u0399",
    "\u03b7\u0003\u0002\u0002\u0002\u039a\u039b\u0007\u0090\u0002\u0002\u039b",
    "\u039c\u0007\u0005\u0002\u0002\u039c\u03a1\u0005P)\u0002\u039d\u039e",
    "\u0007\u0007\u0002\u0002\u039e\u03a0\u0005P)\u0002\u039f\u039d\u0003",
    "\u0002\u0002\u0002\u03a0\u03a3\u0003\u0002\u0002\u0002\u03a1\u039f\u0003",
    "\u0002\u0002\u0002\u03a1\u03a2\u0003\u0002\u0002\u0002\u03a2\u03a4\u0003",
    "\u0002\u0002\u0002\u03a3\u03a1\u0003\u0002\u0002\u0002\u03a4\u03b3\u0007",
    "\u0006\u0002\u0002\u03a5\u03a6\u0007\u0007\u0002\u0002\u03a6\u03a7\u0007",
    "\u0005\u0002\u0002\u03a7\u03ac\u0005P)\u0002\u03a8\u03a9\u0007\u0007",
    "\u0002\u0002\u03a9\u03ab\u0005P)\u0002\u03aa\u03a8\u0003\u0002\u0002",
    "\u0002\u03ab\u03ae\u0003\u0002\u0002\u0002\u03ac\u03aa\u0003\u0002\u0002",
    "\u0002\u03ac\u03ad\u0003\u0002\u0002\u0002\u03ad\u03af\u0003\u0002\u0002",
    "\u0002\u03ae\u03ac\u0003\u0002\u0002\u0002\u03af\u03b0\u0007\u0006\u0002",
    "\u0002\u03b0\u03b2\u0003\u0002\u0002\u0002\u03b1\u03a5\u0003\u0002\u0002",
    "\u0002\u03b2\u03b5\u0003\u0002\u0002\u0002\u03b3\u03b1\u0003\u0002\u0002",
    "\u0002\u03b3\u03b4\u0003\u0002\u0002\u0002\u03b4\u03b7\u0003\u0002\u0002",
    "\u0002\u03b5\u03b3\u0003\u0002\u0002\u0002\u03b6\u036c\u0003\u0002\u0002",
    "\u0002\u03b6\u039a\u0003\u0002\u0002\u0002\u03b7A\u0003\u0002\u0002",
    "\u0002\u03b8\u03ba\u0005Z.\u0002\u03b9\u03b8\u0003\u0002\u0002\u0002",
    "\u03b9\u03ba\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002",
    "\u03bb\u03c6\u0007\u008d\u0002\u0002\u03bc\u03bd\u0007n\u0002\u0002",
    "\u03bd\u03c7\u0007\u007f\u0002\u0002\u03be\u03bf\u0007n\u0002\u0002",
    "\u03bf\u03c7\u0007\u001b\u0002\u0002\u03c0\u03c1\u0007n\u0002\u0002",
    "\u03c1\u03c7\u0007|\u0002\u0002\u03c2\u03c3\u0007n\u0002\u0002\u03c3",
    "\u03c7\u0007J\u0002\u0002\u03c4\u03c5\u0007n\u0002\u0002\u03c5\u03c7",
    "\u0007S\u0002\u0002\u03c6\u03bc\u0003\u0002\u0002\u0002\u03c6\u03be",
    "\u0003\u0002\u0002\u0002\u03c6\u03c0\u0003\u0002\u0002\u0002\u03c6\u03c2",
    "\u0003\u0002\u0002\u0002\u03c6\u03c4\u0003\u0002\u0002\u0002\u03c6\u03c7",
    "\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002\u03c8\u03c9",
    "\u0005\\/\u0002\u03c9\u03ca\u0007\u0083\u0002\u0002\u03ca\u03cb\u0005",
    "\u008eH\u0002\u03cb\u03cc\u0007\b\u0002\u0002\u03cc\u03d4\u0005P)\u0002",
    "\u03cd\u03ce\u0007\u0007\u0002\u0002\u03ce\u03cf\u0005\u008eH\u0002",
    "\u03cf\u03d0\u0007\b\u0002\u0002\u03d0\u03d1\u0005P)\u0002\u03d1\u03d3",
    "\u0003\u0002\u0002\u0002\u03d2\u03cd\u0003\u0002\u0002\u0002\u03d3\u03d6",
    "\u0003\u0002\u0002\u0002\u03d4\u03d2\u0003\u0002\u0002\u0002\u03d4\u03d5",
    "\u0003\u0002\u0002\u0002\u03d5\u03d9\u0003\u0002\u0002\u0002\u03d6\u03d4",
    "\u0003\u0002\u0002\u0002\u03d7\u03d8\u0007\u0094\u0002\u0002\u03d8\u03da",
    "\u0005P)\u0002\u03d9\u03d7\u0003\u0002\u0002\u0002\u03d9\u03da\u0003",
    "\u0002\u0002\u0002\u03daC\u0003\u0002\u0002\u0002\u03db\u03dd\u0005",
    "Z.\u0002\u03dc\u03db\u0003\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002",
    "\u0002\u0002\u03dd\u03de\u0003\u0002\u0002\u0002\u03de\u03e9\u0007\u008d",
    "\u0002\u0002\u03df\u03e0\u0007n\u0002\u0002\u03e0\u03ea\u0007\u007f",
    "\u0002\u0002\u03e1\u03e2\u0007n\u0002\u0002\u03e2\u03ea\u0007\u001b",
    "\u0002\u0002\u03e3\u03e4\u0007n\u0002\u0002\u03e4\u03ea\u0007|\u0002",
    "\u0002\u03e5\u03e6\u0007n\u0002\u0002\u03e6\u03ea\u0007J\u0002\u0002",
    "\u03e7\u03e8\u0007n\u0002\u0002\u03e8\u03ea\u0007S\u0002\u0002\u03e9",
    "\u03df\u0003\u0002\u0002\u0002\u03e9\u03e1\u0003\u0002\u0002\u0002\u03e9",
    "\u03e3\u0003\u0002\u0002\u0002\u03e9\u03e5\u0003\u0002\u0002\u0002\u03e9",
    "\u03e7\u0003\u0002\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea",
    "\u03eb\u0003\u0002\u0002\u0002\u03eb\u03ec\u0005\\/\u0002\u03ec\u03ed",
    "\u0007\u0083\u0002\u0002\u03ed\u03ee\u0005\u008eH\u0002\u03ee\u03ef",
    "\u0007\b\u0002\u0002\u03ef\u03f7\u0005P)\u0002\u03f0\u03f1\u0007\u0007",
    "\u0002\u0002\u03f1\u03f2\u0005\u008eH\u0002\u03f2\u03f3\u0007\b\u0002",
    "\u0002\u03f3\u03f4\u0005P)\u0002\u03f4\u03f6\u0003\u0002\u0002\u0002",
    "\u03f5\u03f0\u0003\u0002\u0002\u0002\u03f6\u03f9\u0003\u0002\u0002\u0002",
    "\u03f7\u03f5\u0003\u0002\u0002\u0002\u03f7\u03f8\u0003\u0002\u0002\u0002",
    "\u03f8\u03fc\u0003\u0002\u0002\u0002\u03f9\u03f7\u0003\u0002\u0002\u0002",
    "\u03fa\u03fb\u0007\u0094\u0002\u0002\u03fb\u03fd\u0005P)\u0002\u03fc",
    "\u03fa\u0003\u0002\u0002\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd",
    "\u0410\u0003\u0002\u0002\u0002\u03fe\u03ff\u0007o\u0002\u0002\u03ff",
    "\u0400\u0007*\u0002\u0002\u0400\u0405\u0005^0\u0002\u0401\u0402\u0007",
    "\u0007\u0002\u0002\u0402\u0404\u0005^0\u0002\u0403\u0401\u0003\u0002",
    "\u0002\u0002\u0404\u0407\u0003\u0002\u0002\u0002\u0405\u0403\u0003\u0002",
    "\u0002\u0002\u0405\u0406\u0003\u0002\u0002\u0002\u0406\u0409\u0003\u0002",
    "\u0002\u0002\u0407\u0405\u0003\u0002\u0002\u0002\u0408\u03fe\u0003\u0002",
    "\u0002\u0002\u0408\u0409\u0003\u0002\u0002\u0002\u0409\u040a\u0003\u0002",
    "\u0002\u0002\u040a\u040b\u0007d\u0002\u0002\u040b\u040e\u0005P)\u0002",
    "\u040c\u040d\t\u0004\u0002\u0002\u040d\u040f\u0005P)\u0002\u040e\u040c",
    "\u0003\u0002\u0002\u0002\u040e\u040f\u0003\u0002\u0002\u0002\u040f\u0411",
    "\u0003\u0002\u0002\u0002\u0410\u0408\u0003\u0002\u0002\u0002\u0410\u0411",
    "\u0003\u0002\u0002\u0002\u0411E\u0003\u0002\u0002\u0002\u0412\u0413",
    "\u0007\u008f\u0002\u0002\u0413G\u0003\u0002\u0002\u0002\u0414\u0416",
    "\u0005\u008eH\u0002\u0415\u0417\u0005J&\u0002\u0416\u0415\u0003\u0002",
    "\u0002\u0002\u0416\u0417\u0003\u0002\u0002\u0002\u0417\u041b\u0003\u0002",
    "\u0002\u0002\u0418\u041a\u0005L\'\u0002\u0419\u0418\u0003\u0002\u0002",
    "\u0002\u041a\u041d\u0003\u0002\u0002\u0002\u041b\u0419\u0003\u0002\u0002",
    "\u0002\u041b\u041c\u0003\u0002\u0002\u0002\u041cI\u0003\u0002\u0002",
    "\u0002\u041d\u041b\u0003\u0002\u0002\u0002\u041e\u0420\u0005\u0082B",
    "\u0002\u041f\u041e\u0003\u0002\u0002\u0002\u0420\u0421\u0003\u0002\u0002",
    "\u0002\u0421\u041f\u0003\u0002\u0002\u0002\u0421\u0422\u0003\u0002\u0002",
    "\u0002\u0422\u042d\u0003\u0002\u0002\u0002\u0423\u0424\u0007\u0005\u0002",
    "\u0002\u0424\u0425\u0005t;\u0002\u0425\u0426\u0007\u0006\u0002\u0002",
    "\u0426\u042e\u0003\u0002\u0002\u0002\u0427\u0428\u0007\u0005\u0002\u0002",
    "\u0428\u0429\u0005t;\u0002\u0429\u042a\u0007\u0007\u0002\u0002\u042a",
    "\u042b\u0005t;\u0002\u042b\u042c\u0007\u0006\u0002\u0002\u042c\u042e",
    "\u0003\u0002\u0002\u0002\u042d\u0423\u0003\u0002\u0002\u0002\u042d\u0427",
    "\u0003\u0002\u0002\u0002\u042d\u042e\u0003\u0002\u0002\u0002\u042eK",
    "\u0003\u0002\u0002\u0002\u042f\u0430\u00073\u0002\u0002\u0430\u0432",
    "\u0005\u0082B\u0002\u0431\u042f\u0003\u0002\u0002\u0002\u0431\u0432",
    "\u0003\u0002\u0002\u0002\u0432\u0454\u0003\u0002\u0002\u0002\u0433\u0434",
    "\u0007s\u0002\u0002\u0434\u0436\u0007a\u0002\u0002\u0435\u0437\t\u0007",
    "\u0002\u0002\u0436\u0435\u0003\u0002\u0002\u0002\u0436\u0437\u0003\u0002",
    "\u0002\u0002\u0437\u0438\u0003\u0002\u0002\u0002\u0438\u043a\u0005N",
    "(\u0002\u0439\u043b\u0007&\u0002\u0002\u043a\u0439\u0003\u0002\u0002",
    "\u0002\u043a\u043b\u0003\u0002\u0002\u0002\u043b\u0455\u0003\u0002\u0002",
    "\u0002\u043c\u043e\u0007h\u0002\u0002\u043d\u043c\u0003\u0002\u0002",
    "\u0002\u043d\u043e\u0003\u0002\u0002\u0002\u043e\u043f\u0003\u0002\u0002",
    "\u0002\u043f\u0440\u0007j\u0002\u0002\u0440\u0455\u0005N(\u0002\u0441",
    "\u0442\u0007\u008c\u0002\u0002\u0442\u0455\u0005N(\u0002\u0443\u0444",
    "\u0007.\u0002\u0002\u0444\u0445\u0007\u0005\u0002\u0002\u0445\u0446",
    "\u0005P)\u0002\u0446\u0447\u0007\u0006\u0002\u0002\u0447\u0455\u0003",
    "\u0002\u0002\u0002\u0448\u044f\u0007:\u0002\u0002\u0449\u0450\u0005",
    "t;\u0002\u044a\u0450\u0005v<\u0002\u044b\u044c\u0007\u0005\u0002\u0002",
    "\u044c\u044d\u0005P)\u0002\u044d\u044e\u0007\u0006\u0002\u0002\u044e",
    "\u0450\u0003\u0002\u0002\u0002\u044f\u0449\u0003\u0002\u0002\u0002\u044f",
    "\u044a\u0003\u0002\u0002\u0002\u044f\u044b\u0003\u0002\u0002\u0002\u0450",
    "\u0455\u0003\u0002\u0002\u0002\u0451\u0452\u0007/\u0002\u0002\u0452",
    "\u0455\u0005\u0090I\u0002\u0453\u0455\u0005R*\u0002\u0454\u0433\u0003",
    "\u0002\u0002\u0002\u0454\u043d\u0003\u0002\u0002\u0002\u0454\u0441\u0003",
    "\u0002\u0002\u0002\u0454\u0443\u0003\u0002\u0002\u0002\u0454\u0448\u0003",
    "\u0002\u0002\u0002\u0454\u0451\u0003\u0002\u0002\u0002\u0454\u0453\u0003",
    "\u0002\u0002\u0002\u0455M\u0003\u0002\u0002\u0002\u0456\u0457\u0007",
    "m\u0002\u0002\u0457\u0458\u00072\u0002\u0002\u0458\u045a\t\b\u0002\u0002",
    "\u0459\u0456\u0003\u0002\u0002\u0002\u0459\u045a\u0003\u0002\u0002\u0002",
    "\u045aO\u0003\u0002\u0002\u0002\u045b\u045c\b)\u0001\u0002\u045c\u04a8",
    "\u0005v<\u0002\u045d\u04a8\u0007\u0099\u0002\u0002\u045e\u045f\u0005",
    "\u0086D\u0002\u045f\u0460\u0007\u0004\u0002\u0002\u0460\u0462\u0003",
    "\u0002\u0002\u0002\u0461\u045e\u0003\u0002\u0002\u0002\u0461\u0462\u0003",
    "\u0002\u0002\u0002\u0462\u0463\u0003\u0002\u0002\u0002\u0463\u0464\u0005",
    "\u0088E\u0002\u0464\u0465\u0007\u0004\u0002\u0002\u0465\u0467\u0003",
    "\u0002\u0002\u0002\u0466\u0461\u0003\u0002\u0002\u0002\u0466\u0467\u0003",
    "\u0002\u0002\u0002\u0467\u0468\u0003\u0002\u0002\u0002\u0468\u04a8\u0005",
    "\u008eH\u0002\u0469\u046a\u0005x=\u0002\u046a\u046b\u0005P)\u0017\u046b",
    "\u04a8\u0003\u0002\u0002\u0002\u046c\u046d\u0005\u0084C\u0002\u046d",
    "\u047a\u0007\u0005\u0002\u0002\u046e\u0470\u0007@\u0002\u0002\u046f",
    "\u046e\u0003\u0002\u0002\u0002\u046f\u0470\u0003\u0002\u0002\u0002\u0470",
    "\u0471\u0003\u0002\u0002\u0002\u0471\u0476\u0005P)\u0002\u0472\u0473",
    "\u0007\u0007\u0002\u0002\u0473\u0475\u0005P)\u0002\u0474\u0472\u0003",
    "\u0002\u0002\u0002\u0475\u0478\u0003\u0002\u0002\u0002\u0476\u0474\u0003",
    "\u0002\u0002\u0002\u0476\u0477\u0003\u0002\u0002\u0002\u0477\u047b\u0003",
    "\u0002\u0002\u0002\u0478\u0476\u0003\u0002\u0002\u0002\u0479\u047b\u0007",
    "\t\u0002\u0002\u047a\u046f\u0003\u0002\u0002\u0002\u047a\u0479\u0003",
    "\u0002\u0002\u0002\u047a\u047b\u0003\u0002\u0002\u0002\u047b\u047c\u0003",
    "\u0002\u0002\u0002\u047c\u047d\u0007\u0006\u0002\u0002\u047d\u04a8\u0003",
    "\u0002\u0002\u0002\u047e\u047f\u0007\u0005\u0002\u0002\u047f\u0480\u0005",
    "P)\u0002\u0480\u0481\u0007\u0006\u0002\u0002\u0481\u04a8\u0003\u0002",
    "\u0002\u0002\u0482\u0483\u0007-\u0002\u0002\u0483\u0484\u0007\u0005",
    "\u0002\u0002\u0484\u0485\u0005P)\u0002\u0485\u0486\u0007#\u0002\u0002",
    "\u0486\u0487\u0005J&\u0002\u0487\u0488\u0007\u0006\u0002\u0002\u0488",
    "\u04a8\u0003\u0002\u0002\u0002\u0489\u048b\u0007h\u0002\u0002\u048a",
    "\u0489\u0003\u0002\u0002\u0002\u048a\u048b\u0003\u0002\u0002\u0002\u048b",
    "\u048c\u0003\u0002\u0002\u0002\u048c\u048e\u0007H\u0002\u0002\u048d",
    "\u048a\u0003\u0002\u0002\u0002\u048d\u048e\u0003\u0002\u0002\u0002\u048e",
    "\u048f\u0003\u0002\u0002\u0002\u048f\u0490\u0007\u0005\u0002\u0002\u0490",
    "\u0491\u0005> \u0002\u0491\u0492\u0007\u0006\u0002\u0002\u0492\u04a8",
    "\u0003\u0002\u0002\u0002\u0493\u0495\u0007,\u0002\u0002\u0494\u0496",
    "\u0005P)\u0002\u0495\u0494\u0003\u0002\u0002\u0002\u0495\u0496\u0003",
    "\u0002\u0002\u0002\u0496\u049c\u0003\u0002\u0002\u0002\u0497\u0498\u0007",
    "\u0093\u0002\u0002\u0498\u0499\u0005P)\u0002\u0499\u049a\u0007\u0087",
    "\u0002\u0002\u049a\u049b\u0005P)\u0002\u049b\u049d\u0003\u0002\u0002",
    "\u0002\u049c\u0497\u0003\u0002\u0002\u0002\u049d\u049e\u0003\u0002\u0002",
    "\u0002\u049e\u049c\u0003\u0002\u0002\u0002\u049e\u049f\u0003\u0002\u0002",
    "\u0002\u049f\u04a2\u0003\u0002\u0002\u0002\u04a0\u04a1\u0007C\u0002",
    "\u0002\u04a1\u04a3\u0005P)\u0002\u04a2\u04a0\u0003\u0002\u0002\u0002",
    "\u04a2\u04a3\u0003\u0002\u0002\u0002\u04a3\u04a4\u0003\u0002\u0002\u0002",
    "\u04a4\u04a5\u0007D\u0002\u0002\u04a5\u04a8\u0003\u0002\u0002\u0002",
    "\u04a6\u04a8\u0005T+\u0002\u04a7\u045b\u0003\u0002\u0002\u0002\u04a7",
    "\u045d\u0003\u0002\u0002\u0002\u04a7\u0466\u0003\u0002\u0002\u0002\u04a7",
    "\u0469\u0003\u0002\u0002\u0002\u04a7\u046c\u0003\u0002\u0002\u0002\u04a7",
    "\u047e\u0003\u0002\u0002\u0002\u04a7\u0482\u0003\u0002\u0002\u0002\u04a7",
    "\u048d\u0003\u0002\u0002\u0002\u04a7\u0493\u0003\u0002\u0002\u0002\u04a7",
    "\u04a6\u0003\u0002\u0002\u0002\u04a8\u050d\u0003\u0002\u0002\u0002\u04a9",
    "\u04aa\f\u0016\u0002\u0002\u04aa\u04ab\u0007\r\u0002\u0002\u04ab\u050c",
    "\u0005P)\u0017\u04ac\u04ad\f\u0015\u0002\u0002\u04ad\u04ae\t\t\u0002",
    "\u0002\u04ae\u050c\u0005P)\u0016\u04af\u04b0\f\u0014\u0002\u0002\u04b0",
    "\u04b1\t\n\u0002\u0002\u04b1\u050c\u0005P)\u0015\u04b2\u04b3\f\u0013",
    "\u0002\u0002\u04b3\u04b4\t\u000b\u0002\u0002\u04b4\u050c\u0005P)\u0014",
    "\u04b5\u04b6\f\u0012\u0002\u0002\u04b6\u04b7\t\f\u0002\u0002\u04b7\u050c",
    "\u0005P)\u0013\u04b8\u04c5\f\u0011\u0002\u0002\u04b9\u04c6\u0007\b\u0002",
    "\u0002\u04ba\u04c6\u0007\u0018\u0002\u0002\u04bb\u04c6\u0007\u0019\u0002",
    "\u0002\u04bc\u04c6\u0007\u001a\u0002\u0002\u04bd\u04c6\u0007^\u0002",
    "\u0002\u04be\u04bf\u0007^\u0002\u0002\u04bf\u04c6\u0007h\u0002\u0002",
    "\u04c0\u04c6\u0007U\u0002\u0002\u04c1\u04c6\u0007c\u0002\u0002\u04c2",
    "\u04c6\u0007O\u0002\u0002\u04c3\u04c6\u0007e\u0002\u0002\u04c4\u04c6",
    "\u0007x\u0002\u0002\u04c5\u04b9\u0003\u0002\u0002\u0002\u04c5\u04ba",
    "\u0003\u0002\u0002\u0002\u04c5\u04bb\u0003\u0002\u0002\u0002\u04c5\u04bc",
    "\u0003\u0002\u0002\u0002\u04c5\u04bd\u0003\u0002\u0002\u0002\u04c5\u04be",
    "\u0003\u0002\u0002\u0002\u04c5\u04c0\u0003\u0002\u0002\u0002\u04c5\u04c1",
    "\u0003\u0002\u0002\u0002\u04c5\u04c2\u0003\u0002\u0002\u0002\u04c5\u04c3",
    "\u0003\u0002\u0002\u0002\u04c5\u04c4\u0003\u0002\u0002\u0002\u04c6\u04c7",
    "\u0003\u0002\u0002\u0002\u04c7\u050c\u0005P)\u0012\u04c8\u04c9\f\u0010",
    "\u0002\u0002\u04c9\u04ca\u0007\"\u0002\u0002\u04ca\u050c\u0005P)\u0011",
    "\u04cb\u04cc\f\u000f\u0002\u0002\u04cc\u04cd\u0007n\u0002\u0002\u04cd",
    "\u050c\u0005P)\u0010\u04ce\u04cf\f\b\u0002\u0002\u04cf\u04d1\u0007^",
    "\u0002\u0002\u04d0\u04d2\u0007h\u0002\u0002\u04d1\u04d0\u0003\u0002",
    "\u0002\u0002\u04d1\u04d2\u0003\u0002\u0002\u0002\u04d2\u04d3\u0003\u0002",
    "\u0002\u0002\u04d3\u050c\u0005P)\t\u04d4\u04d6\f\u0007\u0002\u0002\u04d5",
    "\u04d7\u0007h\u0002\u0002\u04d6\u04d5\u0003\u0002\u0002\u0002\u04d6",
    "\u04d7\u0003\u0002\u0002\u0002\u04d7\u04d8\u0003\u0002\u0002\u0002\u04d8",
    "\u04d9\u0007)\u0002\u0002\u04d9\u04da\u0005P)\u0002\u04da\u04db\u0007",
    "\"\u0002\u0002\u04db\u04dc\u0005P)\b\u04dc\u050c\u0003\u0002\u0002\u0002",
    "\u04dd\u04de\f\u000b\u0002\u0002\u04de\u04df\u0007/\u0002\u0002\u04df",
    "\u050c\u0005\u0090I\u0002\u04e0\u04e2\f\n\u0002\u0002\u04e1\u04e3\u0007",
    "h\u0002\u0002\u04e2\u04e1\u0003\u0002\u0002\u0002\u04e2\u04e3\u0003",
    "\u0002\u0002\u0002\u04e3\u04e4\u0003\u0002\u0002\u0002\u04e4\u04e5\t",
    "\r\u0002\u0002\u04e5\u04e8\u0005P)\u0002\u04e6\u04e7\u0007E\u0002\u0002",
    "\u04e7\u04e9\u0005P)\u0002\u04e8\u04e6\u0003\u0002\u0002\u0002\u04e8",
    "\u04e9\u0003\u0002\u0002\u0002\u04e9\u050c\u0003\u0002\u0002\u0002\u04ea",
    "\u04ef\f\t\u0002\u0002\u04eb\u04f0\u0007_\u0002\u0002\u04ec\u04f0\u0007",
    "i\u0002\u0002\u04ed\u04ee\u0007h\u0002\u0002\u04ee\u04f0\u0007j\u0002",
    "\u0002\u04ef\u04eb\u0003\u0002\u0002\u0002\u04ef\u04ec\u0003\u0002\u0002",
    "\u0002\u04ef\u04ed\u0003\u0002\u0002\u0002\u04f0\u050c\u0003\u0002\u0002",
    "\u0002\u04f1\u04f3\f\u0006\u0002\u0002\u04f2\u04f4\u0007h\u0002\u0002",
    "\u04f3\u04f2\u0003\u0002\u0002\u0002\u04f3\u04f4\u0003\u0002\u0002\u0002",
    "\u04f4\u04f5\u0003\u0002\u0002\u0002\u04f5\u0509\u0007U\u0002\u0002",
    "\u04f6\u0500\u0007\u0005\u0002\u0002\u04f7\u0501\u0005> \u0002\u04f8",
    "\u04fd\u0005P)\u0002\u04f9\u04fa\u0007\u0007\u0002\u0002\u04fa\u04fc",
    "\u0005P)\u0002\u04fb\u04f9\u0003\u0002\u0002\u0002\u04fc\u04ff\u0003",
    "\u0002\u0002\u0002\u04fd\u04fb\u0003\u0002\u0002\u0002\u04fd\u04fe\u0003",
    "\u0002\u0002\u0002\u04fe\u0501\u0003\u0002\u0002\u0002\u04ff\u04fd\u0003",
    "\u0002\u0002\u0002\u0500\u04f7\u0003\u0002\u0002\u0002\u0500\u04f8\u0003",
    "\u0002\u0002\u0002\u0500\u0501\u0003\u0002\u0002\u0002\u0501\u0502\u0003",
    "\u0002\u0002\u0002\u0502\u050a\u0007\u0006\u0002\u0002\u0503\u0504\u0005",
    "\u0086D\u0002\u0504\u0505\u0007\u0004\u0002\u0002\u0505\u0507\u0003",
    "\u0002\u0002\u0002\u0506\u0503\u0003\u0002\u0002\u0002\u0506\u0507\u0003",
    "\u0002\u0002\u0002\u0507\u0508\u0003\u0002\u0002\u0002\u0508\u050a\u0005",
    "\u0088E\u0002\u0509\u04f6\u0003\u0002\u0002\u0002\u0509\u0506\u0003",
    "\u0002\u0002\u0002\u050a\u050c\u0003\u0002\u0002\u0002\u050b\u04a9\u0003",
    "\u0002\u0002\u0002\u050b\u04ac\u0003\u0002\u0002\u0002\u050b\u04af\u0003",
    "\u0002\u0002\u0002\u050b\u04b2\u0003\u0002\u0002\u0002\u050b\u04b5\u0003",
    "\u0002\u0002\u0002\u050b\u04b8\u0003\u0002\u0002\u0002\u050b\u04c8\u0003",
    "\u0002\u0002\u0002\u050b\u04cb\u0003\u0002\u0002\u0002\u050b\u04ce\u0003",
    "\u0002\u0002\u0002\u050b\u04d4\u0003\u0002\u0002\u0002\u050b\u04dd\u0003",
    "\u0002\u0002\u0002\u050b\u04e0\u0003\u0002\u0002\u0002\u050b\u04ea\u0003",
    "\u0002\u0002\u0002\u050b\u04f1\u0003\u0002\u0002\u0002\u050c\u050f\u0003",
    "\u0002\u0002\u0002\u050d\u050b\u0003\u0002\u0002\u0002\u050d\u050e\u0003",
    "\u0002\u0002\u0002\u050eQ\u0003\u0002\u0002\u0002\u050f\u050d\u0003",
    "\u0002\u0002\u0002\u0510\u0511\u0007w\u0002\u0002\u0511\u051d\u0005",
    "\u0092J\u0002\u0512\u0513\u0007\u0005\u0002\u0002\u0513\u0518\u0005",
    "\u008eH\u0002\u0514\u0515\u0007\u0007\u0002\u0002\u0515\u0517\u0005",
    "\u008eH\u0002\u0516\u0514\u0003\u0002\u0002\u0002\u0517\u051a\u0003",
    "\u0002\u0002\u0002\u0518\u0516\u0003\u0002\u0002\u0002\u0518\u0519\u0003",
    "\u0002\u0002\u0002\u0519\u051b\u0003\u0002\u0002\u0002\u051a\u0518\u0003",
    "\u0002\u0002\u0002\u051b\u051c\u0007\u0006\u0002\u0002\u051c\u051e\u0003",
    "\u0002\u0002\u0002\u051d\u0512\u0003\u0002\u0002\u0002\u051d\u051e\u0003",
    "\u0002\u0002\u0002\u051e\u0531\u0003\u0002\u0002\u0002\u051f\u0520\u0007",
    "m\u0002\u0002\u0520\u0529\t\u000e\u0002\u0002\u0521\u0522\u0007\u0083",
    "\u0002\u0002\u0522\u052a\u0007j\u0002\u0002\u0523\u0524\u0007\u0083",
    "\u0002\u0002\u0524\u052a\u0007:\u0002\u0002\u0525\u052a\u0007+\u0002",
    "\u0002\u0526\u052a\u0007}\u0002\u0002\u0527\u0528\u0007g\u0002\u0002",
    "\u0528\u052a\u0007\u001c\u0002\u0002\u0529\u0521\u0003\u0002\u0002\u0002",
    "\u0529\u0523\u0003\u0002\u0002\u0002\u0529\u0525\u0003\u0002\u0002\u0002",
    "\u0529\u0526\u0003\u0002\u0002\u0002\u0529\u0527\u0003\u0002\u0002\u0002",
    "\u052a\u052e\u0003\u0002\u0002\u0002\u052b\u052c\u0007e\u0002\u0002",
    "\u052c\u052e\u0005\u0082B\u0002\u052d\u051f\u0003\u0002\u0002\u0002",
    "\u052d\u052b\u0003\u0002\u0002\u0002\u052e\u0530\u0003\u0002\u0002\u0002",
    "\u052f\u052d\u0003\u0002\u0002\u0002\u0530\u0533\u0003\u0002\u0002\u0002",
    "\u0531\u052f\u0003\u0002\u0002\u0002\u0531\u0532\u0003\u0002\u0002\u0002",
    "\u0532\u053e\u0003\u0002\u0002\u0002\u0533\u0531\u0003\u0002\u0002\u0002",
    "\u0534\u0536\u0007h\u0002\u0002\u0535\u0534\u0003\u0002\u0002\u0002",
    "\u0535\u0536\u0003\u0002\u0002\u0002\u0536\u0537\u0003\u0002\u0002\u0002",
    "\u0537\u053c\u0007;\u0002\u0002\u0538\u0539\u0007X\u0002\u0002\u0539",
    "\u053d\u0007<\u0002\u0002\u053a\u053b\u0007X\u0002\u0002\u053b\u053d",
    "\u0007T\u0002\u0002\u053c\u0538\u0003\u0002\u0002\u0002\u053c\u053a",
    "\u0003\u0002\u0002\u0002\u053c\u053d\u0003\u0002\u0002\u0002\u053d\u053f",
    "\u0003\u0002\u0002\u0002\u053e\u0535\u0003\u0002\u0002\u0002\u053e\u053f",
    "\u0003\u0002\u0002\u0002\u053fS\u0003\u0002\u0002\u0002\u0540\u0541",
    "\u0007u\u0002\u0002\u0541\u0546\u0007\u0005\u0002\u0002\u0542\u0547",
    "\u0007S\u0002\u0002\u0543\u0544\t\u000f\u0002\u0002\u0544\u0545\u0007",
    "\u0007\u0002\u0002\u0545\u0547\u0005z>\u0002\u0546\u0542\u0003\u0002",
    "\u0002\u0002\u0546\u0543\u0003\u0002\u0002\u0002\u0547\u0548\u0003\u0002",
    "\u0002\u0002\u0548\u0549\u0007\u0006\u0002\u0002\u0549U\u0003\u0002",
    "\u0002\u0002\u054a\u054d\u0005\u008eH\u0002\u054b\u054c\u0007/\u0002",
    "\u0002\u054c\u054e\u0005\u0090I\u0002\u054d\u054b\u0003\u0002\u0002",
    "\u0002\u054d\u054e\u0003\u0002\u0002\u0002\u054e\u0550\u0003\u0002\u0002",
    "\u0002\u054f\u0551\t\u0007\u0002\u0002\u0550\u054f\u0003\u0002\u0002",
    "\u0002\u0550\u0551\u0003\u0002\u0002\u0002\u0551W\u0003\u0002\u0002",
    "\u0002\u0552\u0553\u00073\u0002\u0002\u0553\u0555\u0005\u0082B\u0002",
    "\u0554\u0552\u0003\u0002\u0002\u0002\u0554\u0555\u0003\u0002\u0002\u0002",
    "\u0555\u057a\u0003\u0002\u0002\u0002\u0556\u0557\u0007s\u0002\u0002",
    "\u0557\u055a\u0007a\u0002\u0002\u0558\u055a\u0007\u008c\u0002\u0002",
    "\u0559\u0556\u0003\u0002\u0002\u0002\u0559\u0558\u0003\u0002\u0002\u0002",
    "\u055a\u055b\u0003\u0002\u0002\u0002\u055b\u055c\u0007\u0005\u0002\u0002",
    "\u055c\u0561\u0005V,\u0002\u055d\u055e\u0007\u0007\u0002\u0002\u055e",
    "\u0560\u0005V,\u0002\u055f\u055d\u0003\u0002\u0002\u0002\u0560\u0563",
    "\u0003\u0002\u0002\u0002\u0561\u055f\u0003\u0002\u0002\u0002\u0561\u0562",
    "\u0003\u0002\u0002\u0002\u0562\u0564\u0003\u0002\u0002\u0002\u0563\u0561",
    "\u0003\u0002\u0002\u0002\u0564\u0565\u0007\u0006\u0002\u0002\u0565\u0566",
    "\u0005N(\u0002\u0566\u057b\u0003\u0002\u0002\u0002\u0567\u0568\u0007",
    ".\u0002\u0002\u0568\u0569\u0007\u0005\u0002\u0002\u0569\u056a\u0005",
    "P)\u0002\u056a\u056b\u0007\u0006\u0002\u0002\u056b\u057b\u0003\u0002",
    "\u0002\u0002\u056c\u056d\u0007L\u0002\u0002\u056d\u056e\u0007a\u0002",
    "\u0002\u056e\u056f\u0007\u0005\u0002\u0002\u056f\u0574\u0005\u008eH",
    "\u0002\u0570\u0571\u0007\u0007\u0002\u0002\u0571\u0573\u0005\u008eH",
    "\u0002\u0572\u0570\u0003\u0002\u0002\u0002\u0573\u0576\u0003\u0002\u0002",
    "\u0002\u0574\u0572\u0003\u0002\u0002\u0002\u0574\u0575\u0003\u0002\u0002",
    "\u0002\u0575\u0577\u0003\u0002\u0002\u0002\u0576\u0574\u0003\u0002\u0002",
    "\u0002\u0577\u0578\u0007\u0006\u0002\u0002\u0578\u0579\u0005R*\u0002",
    "\u0579\u057b\u0003\u0002\u0002\u0002\u057a\u0559\u0003\u0002\u0002\u0002",
    "\u057a\u0567\u0003\u0002\u0002\u0002\u057a\u056c\u0003\u0002\u0002\u0002",
    "\u057bY\u0003\u0002\u0002\u0002\u057c\u057e\u0007\u0095\u0002\u0002",
    "\u057d\u057f\u0007v\u0002\u0002\u057e\u057d\u0003\u0002\u0002\u0002",
    "\u057e\u057f\u0003\u0002\u0002\u0002\u057f\u0580\u0003\u0002\u0002\u0002",
    "\u0580\u0581\u0005r:\u0002\u0581\u0582\u0007#\u0002\u0002\u0582\u0583",
    "\u0007\u0005\u0002\u0002\u0583\u0584\u0005> \u0002\u0584\u058e\u0007",
    "\u0006\u0002\u0002\u0585\u0586\u0007\u0007\u0002\u0002\u0586\u0587\u0005",
    "r:\u0002\u0587\u0588\u0007#\u0002\u0002\u0588\u0589\u0007\u0005\u0002",
    "\u0002\u0589\u058a\u0005> \u0002\u058a\u058b\u0007\u0006\u0002\u0002",
    "\u058b\u058d\u0003\u0002\u0002\u0002\u058c\u0585\u0003\u0002\u0002\u0002",
    "\u058d\u0590\u0003\u0002\u0002\u0002\u058e\u058c\u0003\u0002\u0002\u0002",
    "\u058e\u058f\u0003\u0002\u0002\u0002\u058f[\u0003\u0002\u0002\u0002",
    "\u0590\u058e\u0003\u0002\u0002\u0002\u0591\u0592\u0005\u0086D\u0002",
    "\u0592\u0593\u0007\u0004\u0002\u0002\u0593\u0595\u0003\u0002\u0002\u0002",
    "\u0594\u0591\u0003\u0002\u0002\u0002\u0594\u0595\u0003\u0002\u0002\u0002",
    "\u0595\u0596\u0003\u0002\u0002\u0002\u0596\u059c\u0005\u0088E\u0002",
    "\u0597\u0598\u0007W\u0002\u0002\u0598\u0599\u0007*\u0002\u0002\u0599",
    "\u059d\u0005\u0094K\u0002\u059a\u059b\u0007h\u0002\u0002\u059b\u059d",
    "\u0007W\u0002\u0002\u059c\u0597\u0003\u0002\u0002\u0002\u059c\u059a",
    "\u0003\u0002\u0002\u0002\u059c\u059d\u0003\u0002\u0002\u0002\u059d]",
    "\u0003\u0002\u0002\u0002\u059e\u05a1\u0005P)\u0002\u059f\u05a0\u0007",
    "/\u0002\u0002\u05a0\u05a2\u0005\u0090I\u0002\u05a1\u059f\u0003\u0002",
    "\u0002\u0002\u05a1\u05a2\u0003\u0002\u0002\u0002\u05a2\u05a4\u0003\u0002",
    "\u0002\u0002\u05a3\u05a5\t\u0007\u0002\u0002\u05a4\u05a3\u0003\u0002",
    "\u0002\u0002\u05a4\u05a5\u0003\u0002\u0002\u0002\u05a5_\u0003\u0002",
    "\u0002\u0002\u05a6\u05aa\u0005t;\u0002\u05a7\u05aa\u0005\u0082B\u0002",
    "\u05a8\u05aa\u0007\u009a\u0002\u0002\u05a9\u05a6\u0003\u0002\u0002\u0002",
    "\u05a9\u05a7\u0003\u0002\u0002\u0002\u05a9\u05a8\u0003\u0002\u0002\u0002",
    "\u05aaa\u0003\u0002\u0002\u0002\u05ab\u05b7\u0005\u0088E\u0002\u05ac",
    "\u05ad\u0007\u0005\u0002\u0002\u05ad\u05b2\u0005\u008eH\u0002\u05ae",
    "\u05af\u0007\u0007\u0002\u0002\u05af\u05b1\u0005\u008eH\u0002\u05b0",
    "\u05ae\u0003\u0002\u0002\u0002\u05b1\u05b4\u0003\u0002\u0002\u0002\u05b2",
    "\u05b0\u0003\u0002\u0002\u0002\u05b2\u05b3\u0003\u0002\u0002\u0002\u05b3",
    "\u05b5\u0003\u0002\u0002\u0002\u05b4\u05b2\u0003\u0002\u0002\u0002\u05b5",
    "\u05b6\u0007\u0006\u0002\u0002\u05b6\u05b8\u0003\u0002\u0002\u0002\u05b7",
    "\u05ac\u0003\u0002\u0002\u0002\u05b7\u05b8\u0003\u0002\u0002\u0002\u05b8",
    "\u05b9\u0003\u0002\u0002\u0002\u05b9\u05ba\u0007#\u0002\u0002\u05ba",
    "\u05bb\u0007\u0005\u0002\u0002\u05bb\u05bc\u0005> \u0002\u05bc\u05bd",
    "\u0007\u0006\u0002\u0002\u05bdc\u0003\u0002\u0002\u0002\u05be\u05cb",
    "\u0007\t\u0002\u0002\u05bf\u05c0\u0005\u0088E\u0002\u05c0\u05c1\u0007",
    "\u0004\u0002\u0002\u05c1\u05c2\u0007\t\u0002\u0002\u05c2\u05cb\u0003",
    "\u0002\u0002\u0002\u05c3\u05c8\u0005P)\u0002\u05c4\u05c6\u0007#\u0002",
    "\u0002\u05c5\u05c4\u0003\u0002\u0002\u0002\u05c5\u05c6\u0003\u0002\u0002",
    "\u0002\u05c6\u05c7\u0003\u0002\u0002\u0002\u05c7\u05c9\u0005~@\u0002",
    "\u05c8\u05c5\u0003\u0002\u0002\u0002\u05c8\u05c9\u0003\u0002\u0002\u0002",
    "\u05c9\u05cb\u0003\u0002\u0002\u0002\u05ca\u05be\u0003\u0002\u0002\u0002",
    "\u05ca\u05bf\u0003\u0002\u0002\u0002\u05ca\u05c3\u0003\u0002\u0002\u0002",
    "\u05cbe\u0003\u0002\u0002\u0002\u05cc\u05cd\u0005\u0086D\u0002\u05cd",
    "\u05ce\u0007\u0004\u0002\u0002\u05ce\u05d0\u0003\u0002\u0002\u0002\u05cf",
    "\u05cc\u0003\u0002\u0002\u0002\u05cf\u05d0\u0003\u0002\u0002\u0002\u05d0",
    "\u05d1\u0003\u0002\u0002\u0002\u05d1\u05d6\u0005\u0088E\u0002\u05d2",
    "\u05d4\u0007#\u0002\u0002\u05d3\u05d2\u0003\u0002\u0002\u0002\u05d3",
    "\u05d4\u0003\u0002\u0002\u0002\u05d4\u05d5\u0003\u0002\u0002\u0002\u05d5",
    "\u05d7\u0005\u00a0Q\u0002\u05d6\u05d3\u0003\u0002\u0002\u0002\u05d6",
    "\u05d7\u0003\u0002\u0002\u0002\u05d7\u05dd\u0003\u0002\u0002\u0002\u05d8",
    "\u05d9\u0007W\u0002\u0002\u05d9\u05da\u0007*\u0002\u0002\u05da\u05de",
    "\u0005\u0094K\u0002\u05db\u05dc\u0007h\u0002\u0002\u05dc\u05de\u0007",
    "W\u0002\u0002\u05dd\u05d8\u0003\u0002\u0002\u0002\u05dd\u05db\u0003",
    "\u0002\u0002\u0002\u05dd\u05de\u0003\u0002\u0002\u0002\u05de\u05fc\u0003",
    "\u0002\u0002\u0002\u05df\u05e9\u0007\u0005\u0002\u0002\u05e0\u05e5\u0005",
    "f4\u0002\u05e1\u05e2\u0007\u0007\u0002\u0002\u05e2\u05e4\u0005f4\u0002",
    "\u05e3\u05e1\u0003\u0002\u0002\u0002\u05e4\u05e7\u0003\u0002\u0002\u0002",
    "\u05e5\u05e3\u0003\u0002\u0002\u0002\u05e5\u05e6\u0003\u0002\u0002\u0002",
    "\u05e6\u05ea\u0003\u0002\u0002\u0002\u05e7\u05e5\u0003\u0002\u0002\u0002",
    "\u05e8\u05ea\u0005h5\u0002\u05e9\u05e0\u0003\u0002\u0002\u0002\u05e9",
    "\u05e8\u0003\u0002\u0002\u0002\u05ea\u05eb\u0003\u0002\u0002\u0002\u05eb",
    "\u05f0\u0007\u0006\u0002\u0002\u05ec\u05ee\u0007#\u0002\u0002\u05ed",
    "\u05ec\u0003\u0002\u0002\u0002\u05ed\u05ee\u0003\u0002\u0002\u0002\u05ee",
    "\u05ef\u0003\u0002\u0002\u0002\u05ef\u05f1\u0005\u00a0Q\u0002\u05f0",
    "\u05ed\u0003\u0002\u0002\u0002\u05f0\u05f1\u0003\u0002\u0002\u0002\u05f1",
    "\u05fc\u0003\u0002\u0002\u0002\u05f2\u05f3\u0007\u0005\u0002\u0002\u05f3",
    "\u05f4\u0005> \u0002\u05f4\u05f9\u0007\u0006\u0002\u0002\u05f5\u05f7",
    "\u0007#\u0002\u0002\u05f6\u05f5\u0003\u0002\u0002\u0002\u05f6\u05f7",
    "\u0003\u0002\u0002\u0002\u05f7\u05f8\u0003\u0002\u0002\u0002\u05f8\u05fa",
    "\u0005\u00a0Q\u0002\u05f9\u05f6\u0003\u0002\u0002\u0002\u05f9\u05fa",
    "\u0003\u0002\u0002\u0002\u05fa\u05fc\u0003\u0002\u0002\u0002\u05fb\u05cf",
    "\u0003\u0002\u0002\u0002\u05fb\u05df\u0003\u0002\u0002\u0002\u05fb\u05f2",
    "\u0003\u0002\u0002\u0002\u05fcg\u0003\u0002\u0002\u0002\u05fd\u0604",
    "\u0005f4\u0002\u05fe\u05ff\u0005j6\u0002\u05ff\u0600\u0005f4\u0002\u0600",
    "\u0601\u0005l7\u0002\u0601\u0603\u0003\u0002\u0002\u0002\u0602\u05fe",
    "\u0003\u0002\u0002\u0002\u0603\u0606\u0003\u0002\u0002\u0002\u0604\u0602",
    "\u0003\u0002\u0002\u0002\u0604\u0605\u0003\u0002\u0002\u0002\u0605i",
    "\u0003\u0002\u0002\u0002\u0606\u0604\u0003\u0002\u0002\u0002\u0607\u0615",
    "\u0007\u0007\u0002\u0002\u0608\u060a\u0007f\u0002\u0002\u0609\u0608",
    "\u0003\u0002\u0002\u0002\u0609\u060a\u0003\u0002\u0002\u0002\u060a\u0611",
    "\u0003\u0002\u0002\u0002\u060b\u060d\u0007b\u0002\u0002\u060c\u060e",
    "\u0007p\u0002\u0002\u060d\u060c\u0003\u0002\u0002\u0002\u060d\u060e",
    "\u0003\u0002\u0002\u0002\u060e\u0612\u0003\u0002\u0002\u0002\u060f\u0612",
    "\u0007Y\u0002\u0002\u0610\u0612\u00075\u0002\u0002\u0611\u060b\u0003",
    "\u0002\u0002\u0002\u0611\u060f\u0003\u0002\u0002\u0002\u0611\u0610\u0003",
    "\u0002\u0002\u0002\u0611\u0612\u0003\u0002\u0002\u0002\u0612\u0613\u0003",
    "\u0002\u0002\u0002\u0613\u0615\u0007`\u0002\u0002\u0614\u0607\u0003",
    "\u0002\u0002\u0002\u0614\u0609\u0003\u0002\u0002\u0002\u0615k\u0003",
    "\u0002\u0002\u0002\u0616\u0617\u0007m\u0002\u0002\u0617\u0625\u0005",
    "P)\u0002\u0618\u0619\u0007\u008e\u0002\u0002\u0619\u061a\u0007\u0005",
    "\u0002\u0002\u061a\u061f\u0005\u008eH\u0002\u061b\u061c\u0007\u0007",
    "\u0002\u0002\u061c\u061e\u0005\u008eH\u0002\u061d\u061b\u0003\u0002",
    "\u0002\u0002\u061e\u0621\u0003\u0002\u0002\u0002\u061f\u061d\u0003\u0002",
    "\u0002\u0002\u061f\u0620\u0003\u0002\u0002\u0002\u0620\u0622\u0003\u0002",
    "\u0002\u0002\u0621\u061f\u0003\u0002\u0002\u0002\u0622\u0623\u0007\u0006",
    "\u0002\u0002\u0623\u0625\u0003\u0002\u0002\u0002\u0624\u0616\u0003\u0002",
    "\u0002\u0002\u0624\u0618\u0003\u0002\u0002\u0002\u0624\u0625\u0003\u0002",
    "\u0002\u0002\u0625m\u0003\u0002\u0002\u0002\u0626\u0628\u0007\u0082",
    "\u0002\u0002\u0627\u0629\t\u0006\u0002\u0002\u0628\u0627\u0003\u0002",
    "\u0002\u0002\u0628\u0629\u0003\u0002\u0002\u0002\u0629\u062a\u0003\u0002",
    "\u0002\u0002\u062a\u062f\u0005d3\u0002\u062b\u062c\u0007\u0007\u0002",
    "\u0002\u062c\u062e\u0005d3\u0002\u062d\u062b\u0003\u0002\u0002\u0002",
    "\u062e\u0631\u0003\u0002\u0002\u0002\u062f\u062d\u0003\u0002\u0002\u0002",
    "\u062f\u0630\u0003\u0002\u0002\u0002\u0630\u063e\u0003\u0002\u0002\u0002",
    "\u0631\u062f\u0003\u0002\u0002\u0002\u0632\u063c\u0007M\u0002\u0002",
    "\u0633\u0638\u0005f4\u0002\u0634\u0635\u0007\u0007\u0002\u0002\u0635",
    "\u0637\u0005f4\u0002\u0636\u0634\u0003\u0002\u0002\u0002\u0637\u063a",
    "\u0003\u0002\u0002\u0002\u0638\u0636\u0003\u0002\u0002\u0002\u0638\u0639",
    "\u0003\u0002\u0002\u0002\u0639\u063d\u0003\u0002\u0002\u0002\u063a\u0638",
    "\u0003\u0002\u0002\u0002\u063b\u063d\u0005h5\u0002\u063c\u0633\u0003",
    "\u0002\u0002\u0002\u063c\u063b\u0003\u0002\u0002\u0002\u063d\u063f\u0003",
    "\u0002\u0002\u0002\u063e\u0632\u0003\u0002\u0002\u0002\u063e\u063f\u0003",
    "\u0002\u0002\u0002\u063f\u0642\u0003\u0002\u0002\u0002\u0640\u0641\u0007",
    "\u0094\u0002\u0002\u0641\u0643\u0005P)\u0002\u0642\u0640\u0003\u0002",
    "\u0002\u0002\u0642\u0643\u0003\u0002\u0002\u0002\u0643\u0652\u0003\u0002",
    "\u0002\u0002\u0644\u0645\u0007P\u0002\u0002\u0645\u0646\u0007*\u0002",
    "\u0002\u0646\u064b\u0005P)\u0002\u0647\u0648\u0007\u0007\u0002\u0002",
    "\u0648\u064a\u0005P)\u0002\u0649\u0647\u0003\u0002\u0002\u0002\u064a",
    "\u064d\u0003\u0002\u0002\u0002\u064b\u0649\u0003\u0002\u0002\u0002\u064b",
    "\u064c\u0003\u0002\u0002\u0002\u064c\u0650\u0003\u0002\u0002\u0002\u064d",
    "\u064b\u0003\u0002\u0002\u0002\u064e\u064f\u0007Q\u0002\u0002\u064f",
    "\u0651\u0005P)\u0002\u0650\u064e\u0003\u0002\u0002\u0002\u0650\u0651",
    "\u0003\u0002\u0002\u0002\u0651\u0653\u0003\u0002\u0002\u0002\u0652\u0644",
    "\u0003\u0002\u0002\u0002\u0652\u0653\u0003\u0002\u0002\u0002\u0653\u0671",
    "\u0003\u0002\u0002\u0002\u0654\u0655\u0007\u0090\u0002\u0002\u0655\u0656",
    "\u0007\u0005\u0002\u0002\u0656\u065b\u0005P)\u0002\u0657\u0658\u0007",
    "\u0007\u0002\u0002\u0658\u065a\u0005P)\u0002\u0659\u0657\u0003\u0002",
    "\u0002\u0002\u065a\u065d\u0003\u0002\u0002\u0002\u065b\u0659\u0003\u0002",
    "\u0002\u0002\u065b\u065c\u0003\u0002\u0002\u0002\u065c\u065e\u0003\u0002",
    "\u0002\u0002\u065d\u065b\u0003\u0002\u0002\u0002\u065e\u066d\u0007\u0006",
    "\u0002\u0002\u065f\u0660\u0007\u0007\u0002\u0002\u0660\u0661\u0007\u0005",
    "\u0002\u0002\u0661\u0666\u0005P)\u0002\u0662\u0663\u0007\u0007\u0002",
    "\u0002\u0663\u0665\u0005P)\u0002\u0664\u0662\u0003\u0002\u0002\u0002",
    "\u0665\u0668\u0003\u0002\u0002\u0002\u0666\u0664\u0003\u0002\u0002\u0002",
    "\u0666\u0667\u0003\u0002\u0002\u0002\u0667\u0669\u0003\u0002\u0002\u0002",
    "\u0668\u0666\u0003\u0002\u0002\u0002\u0669\u066a\u0007\u0006\u0002\u0002",
    "\u066a\u066c\u0003\u0002\u0002\u0002\u066b\u065f\u0003\u0002\u0002\u0002",
    "\u066c\u066f\u0003\u0002\u0002\u0002\u066d\u066b\u0003\u0002\u0002\u0002",
    "\u066d\u066e\u0003\u0002\u0002\u0002\u066e\u0671\u0003\u0002\u0002\u0002",
    "\u066f\u066d\u0003\u0002\u0002\u0002\u0670\u0626\u0003\u0002\u0002\u0002",
    "\u0670\u0654\u0003\u0002\u0002\u0002\u0671o\u0003\u0002\u0002\u0002",
    "\u0672\u0678\u0007\u008b\u0002\u0002\u0673\u0674\u0007\u008b\u0002\u0002",
    "\u0674\u0678\u0007\u001f\u0002\u0002\u0675\u0678\u0007\\\u0002\u0002",
    "\u0676\u0678\u0007F\u0002\u0002\u0677\u0672\u0003\u0002\u0002\u0002",
    "\u0677\u0673\u0003\u0002\u0002\u0002\u0677\u0675\u0003\u0002\u0002\u0002",
    "\u0677\u0676\u0003\u0002\u0002\u0002\u0678q\u0003\u0002\u0002\u0002",
    "\u0679\u0685\u0005\u0088E\u0002\u067a\u067b\u0007\u0005\u0002\u0002",
    "\u067b\u0680\u0005\u008eH\u0002\u067c\u067d\u0007\u0007\u0002\u0002",
    "\u067d\u067f\u0005\u008eH\u0002\u067e\u067c\u0003\u0002\u0002\u0002",
    "\u067f\u0682\u0003\u0002\u0002\u0002\u0680\u067e\u0003\u0002\u0002\u0002",
    "\u0680\u0681\u0003\u0002\u0002\u0002\u0681\u0683\u0003\u0002\u0002\u0002",
    "\u0682\u0680\u0003\u0002\u0002\u0002\u0683\u0684\u0007\u0006\u0002\u0002",
    "\u0684\u0686\u0003\u0002\u0002\u0002\u0685\u067a\u0003\u0002\u0002\u0002",
    "\u0685\u0686\u0003\u0002\u0002\u0002\u0686s\u0003\u0002\u0002\u0002",
    "\u0687\u0689\t\n\u0002\u0002\u0688\u0687\u0003\u0002\u0002\u0002\u0688",
    "\u0689\u0003\u0002\u0002\u0002\u0689\u068a\u0003\u0002\u0002\u0002\u068a",
    "\u068b\u0007\u0098\u0002\u0002\u068bu\u0003\u0002\u0002\u0002\u068c",
    "\u068d\t\u0010\u0002\u0002\u068dw\u0003\u0002\u0002\u0002\u068e\u068f",
    "\t\u0011\u0002\u0002\u068fy\u0003\u0002\u0002\u0002\u0690\u0691\u0007",
    "\u009a\u0002\u0002\u0691{\u0003\u0002\u0002\u0002\u0692\u0695\u0005",
    "P)\u0002\u0693\u0695\u0005H%\u0002\u0694\u0692\u0003\u0002\u0002\u0002",
    "\u0694\u0693\u0003\u0002\u0002\u0002\u0695}\u0003\u0002\u0002\u0002",
    "\u0696\u0697\t\u0012\u0002\u0002\u0697\u007f\u0003\u0002\u0002\u0002",
    "\u0698\u0699\t\u0013\u0002\u0002\u0699\u0081\u0003\u0002\u0002\u0002",
    "\u069a\u069b\u0005\u00a4S\u0002\u069b\u0083\u0003\u0002\u0002\u0002",
    "\u069c\u069d\u0005\u00a4S\u0002\u069d\u0085\u0003\u0002\u0002\u0002",
    "\u069e\u069f\u0005\u00a4S\u0002\u069f\u0087\u0003\u0002\u0002\u0002",
    "\u06a0\u06a1\u0005\u00a4S\u0002\u06a1\u0089\u0003\u0002\u0002\u0002",
    "\u06a2\u06a3\u0005\u00a4S\u0002\u06a3\u008b\u0003\u0002\u0002\u0002",
    "\u06a4\u06a5\u0005\u00a4S\u0002\u06a5\u008d\u0003\u0002\u0002\u0002",
    "\u06a6\u06a7\u0005\u00a4S\u0002\u06a7\u008f\u0003\u0002\u0002\u0002",
    "\u06a8\u06a9\u0005\u00a4S\u0002\u06a9\u0091\u0003\u0002\u0002\u0002",
    "\u06aa\u06ab\u0005\u00a4S\u0002\u06ab\u0093\u0003\u0002\u0002\u0002",
    "\u06ac\u06ad\u0005\u00a4S\u0002\u06ad\u0095\u0003\u0002\u0002\u0002",
    "\u06ae\u06af\u0005\u00a4S\u0002\u06af\u0097\u0003\u0002\u0002\u0002",
    "\u06b0\u06b1\u0005\u00a4S\u0002\u06b1\u0099\u0003\u0002\u0002\u0002",
    "\u06b2\u06b3\u0005\u00a4S\u0002\u06b3\u009b\u0003\u0002\u0002\u0002",
    "\u06b4\u06b5\u0005\u00a4S\u0002\u06b5\u009d\u0003\u0002\u0002\u0002",
    "\u06b6\u06b7\u0005\u00a4S\u0002\u06b7\u009f\u0003\u0002\u0002\u0002",
    "\u06b8\u06b9\u0005\u00a4S\u0002\u06b9\u00a1\u0003\u0002\u0002\u0002",
    "\u06ba\u06bb\u0005\u00a4S\u0002\u06bb\u00a3\u0003\u0002\u0002\u0002",
    "\u06bc\u06c4\u0007\u0097\u0002\u0002\u06bd\u06c4\u0005\u0080A\u0002",
    "\u06be\u06c4\u0007\u009a\u0002\u0002\u06bf\u06c0\u0007\u0005\u0002\u0002",
    "\u06c0\u06c1\u0005\u00a4S\u0002\u06c1\u06c2\u0007\u0006\u0002\u0002",
    "\u06c2\u06c4\u0003\u0002\u0002\u0002\u06c3\u06bc\u0003\u0002\u0002\u0002",
    "\u06c3\u06bd\u0003\u0002\u0002\u0002\u06c3\u06be\u0003\u0002\u0002\u0002",
    "\u06c3\u06bf\u0003\u0002\u0002\u0002\u06c4\u00a5\u0003\u0002\u0002\u0002",
    "\u00f6\u00a8\u00aa\u00b5\u00bc\u00c1\u00c7\u00cd\u00cf\u00ef\u00f6\u00fe",
    "\u0101\u010a\u010e\u0116\u011a\u011c\u0121\u0123\u0127\u012e\u0131\u0136",
    "\u013a\u013f\u0148\u014b\u0151\u0153\u0157\u015d\u0162\u016d\u0173\u0177",
    "\u017d\u0182\u018b\u0192\u0198\u019c\u01a0\u01a6\u01ab\u01b2\u01bd\u01c0",
    "\u01c2\u01c8\u01ce\u01d2\u01d9\u01df\u01e5\u01eb\u01f0\u01fc\u0201\u020c",
    "\u0211\u0214\u021b\u021e\u0225\u022e\u0231\u0237\u0239\u023d\u0245\u024a",
    "\u0252\u0257\u025f\u0264\u026c\u0271\u0277\u027e\u0281\u0289\u0293\u0296",
    "\u029c\u029e\u02a1\u02b4\u02ba\u02c3\u02c8\u02d1\u02dc\u02e3\u02e9\u02ef",
    "\u02f8\u02ff\u0303\u0305\u0309\u0310\u0312\u0316\u0319\u0320\u0327\u032a",
    "\u0334\u0337\u033d\u033f\u0343\u034a\u034d\u0355\u035f\u0362\u0368\u036a",
    "\u036e\u0375\u037e\u0382\u0384\u0388\u0391\u0396\u0398\u03a1\u03ac\u03b3",
    "\u03b6\u03b9\u03c6\u03d4\u03d9\u03dc\u03e9\u03f7\u03fc\u0405\u0408\u040e",
    "\u0410\u0416\u041b\u0421\u042d\u0431\u0436\u043a\u043d\u044f\u0454\u0459",
    "\u0461\u0466\u046f\u0476\u047a\u048a\u048d\u0495\u049e\u04a2\u04a7\u04c5",
    "\u04d1\u04d6\u04e2\u04e8\u04ef\u04f3\u04fd\u0500\u0506\u0509\u050b\u050d",
    "\u0518\u051d\u0529\u052d\u0531\u0535\u053c\u053e\u0546\u054d\u0550\u0554",
    "\u0559\u0561\u0574\u057a\u057e\u058e\u0594\u059c\u05a1\u05a4\u05a9\u05b2",
    "\u05b7\u05c5\u05c8\u05ca\u05cf\u05d3\u05d6\u05dd\u05e5\u05e9\u05ed\u05f0",
    "\u05f6\u05f9\u05fb\u0604\u0609\u060d\u0611\u0614\u061f\u0624\u0628\u062f",
    "\u0638\u063c\u063e\u0642\u064b\u0650\u0652\u065b\u0666\u066d\u0670\u0677",
    "\u0680\u0685\u0688\u0694\u06c3"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", 
                     "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'" ];

var symbolicNames = [ null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", 
                      "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", "PIPE2", 
                      "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", "LT", "LT_EQ", 
                      "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "K_ABORT", 
                      "K_ACTION", "K_ADD", "K_AFTER", "K_ALL", "K_ALTER", 
                      "K_ANALYZE", "K_AND", "K_AS", "K_ASC", "K_ATTACH", 
                      "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", "K_BETWEEN", 
                      "K_BY", "K_CASCADE", "K_CASE", "K_CAST", "K_CHECK", 
                      "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT", 
                      "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
                      "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
                      "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", 
                      "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP", "K_EACH", 
                      "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE", 
                      "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", 
                      "K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", 
                      "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX", 
                      "K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT", 
                      "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
                      "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
                      "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", 
                      "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", "K_ORDER", 
                      "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", "K_QUERY", 
                      "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP", 
                      "K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", 
                      "K_RESTRICT", "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", 
                      "K_SELECT", "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", 
                      "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION", 
                      "K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", 
                      "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", 
                      "K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                      "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                      "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ];

var ruleNames =  [ "parse", "error", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                   "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
                   "compound_select_stmt", "create_index_stmt", "create_table_stmt", 
                   "create_trigger_stmt", "create_view_stmt", "create_virtual_table_stmt", 
                   "delete_stmt", "delete_stmt_limited", "detach_stmt", 
                   "drop_index_stmt", "drop_table_stmt", "drop_trigger_stmt", 
                   "drop_view_stmt", "factored_select_stmt", "insert_stmt", 
                   "pragma_stmt", "reindex_stmt", "release_stmt", "rollback_stmt", 
                   "savepoint_stmt", "simple_select_stmt", "select_stmt", 
                   "select_or_values", "update_stmt", "update_stmt_limited", 
                   "vacuum_stmt", "column_def", "type_name", "column_constraint", 
                   "conflict_clause", "expr", "foreign_key_clause", "raise_function", 
                   "indexed_column", "table_constraint", "with_clause", 
                   "qualified_table_name", "ordering_term", "pragma_value", 
                   "common_table_expression", "result_column", "table_or_subquery", 
                   "join_clause", "join_operator", "join_constraint", "select_core", 
                   "compound_operator", "cte_table_name", "signed_number", 
                   "literal_value", "unary_operator", "error_message", "module_argument", 
                   "column_alias", "keyword", "name", "function_name", "database_name", 
                   "table_name", "table_or_index_name", "new_table_name", 
                   "column_name", "collation_name", "foreign_table", "index_name", 
                   "trigger_name", "view_name", "module_name", "pragma_name", 
                   "savepoint_name", "table_alias", "transaction_name", 
                   "any_name" ];

function SQLiteParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SQLiteParser.prototype = Object.create(antlr4.Parser.prototype);
SQLiteParser.prototype.constructor = SQLiteParser;

Object.defineProperty(SQLiteParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SQLiteParser.EOF = antlr4.Token.EOF;
SQLiteParser.SCOL = 1;
SQLiteParser.DOT = 2;
SQLiteParser.OPEN_PAR = 3;
SQLiteParser.CLOSE_PAR = 4;
SQLiteParser.COMMA = 5;
SQLiteParser.ASSIGN = 6;
SQLiteParser.STAR = 7;
SQLiteParser.PLUS = 8;
SQLiteParser.MINUS = 9;
SQLiteParser.TILDE = 10;
SQLiteParser.PIPE2 = 11;
SQLiteParser.DIV = 12;
SQLiteParser.MOD = 13;
SQLiteParser.LT2 = 14;
SQLiteParser.GT2 = 15;
SQLiteParser.AMP = 16;
SQLiteParser.PIPE = 17;
SQLiteParser.LT = 18;
SQLiteParser.LT_EQ = 19;
SQLiteParser.GT = 20;
SQLiteParser.GT_EQ = 21;
SQLiteParser.EQ = 22;
SQLiteParser.NOT_EQ1 = 23;
SQLiteParser.NOT_EQ2 = 24;
SQLiteParser.K_ABORT = 25;
SQLiteParser.K_ACTION = 26;
SQLiteParser.K_ADD = 27;
SQLiteParser.K_AFTER = 28;
SQLiteParser.K_ALL = 29;
SQLiteParser.K_ALTER = 30;
SQLiteParser.K_ANALYZE = 31;
SQLiteParser.K_AND = 32;
SQLiteParser.K_AS = 33;
SQLiteParser.K_ASC = 34;
SQLiteParser.K_ATTACH = 35;
SQLiteParser.K_AUTOINCREMENT = 36;
SQLiteParser.K_BEFORE = 37;
SQLiteParser.K_BEGIN = 38;
SQLiteParser.K_BETWEEN = 39;
SQLiteParser.K_BY = 40;
SQLiteParser.K_CASCADE = 41;
SQLiteParser.K_CASE = 42;
SQLiteParser.K_CAST = 43;
SQLiteParser.K_CHECK = 44;
SQLiteParser.K_COLLATE = 45;
SQLiteParser.K_COLUMN = 46;
SQLiteParser.K_COMMIT = 47;
SQLiteParser.K_CONFLICT = 48;
SQLiteParser.K_CONSTRAINT = 49;
SQLiteParser.K_CREATE = 50;
SQLiteParser.K_CROSS = 51;
SQLiteParser.K_CURRENT_DATE = 52;
SQLiteParser.K_CURRENT_TIME = 53;
SQLiteParser.K_CURRENT_TIMESTAMP = 54;
SQLiteParser.K_DATABASE = 55;
SQLiteParser.K_DEFAULT = 56;
SQLiteParser.K_DEFERRABLE = 57;
SQLiteParser.K_DEFERRED = 58;
SQLiteParser.K_DELETE = 59;
SQLiteParser.K_DESC = 60;
SQLiteParser.K_DETACH = 61;
SQLiteParser.K_DISTINCT = 62;
SQLiteParser.K_DROP = 63;
SQLiteParser.K_EACH = 64;
SQLiteParser.K_ELSE = 65;
SQLiteParser.K_END = 66;
SQLiteParser.K_ESCAPE = 67;
SQLiteParser.K_EXCEPT = 68;
SQLiteParser.K_EXCLUSIVE = 69;
SQLiteParser.K_EXISTS = 70;
SQLiteParser.K_EXPLAIN = 71;
SQLiteParser.K_FAIL = 72;
SQLiteParser.K_FOR = 73;
SQLiteParser.K_FOREIGN = 74;
SQLiteParser.K_FROM = 75;
SQLiteParser.K_FULL = 76;
SQLiteParser.K_GLOB = 77;
SQLiteParser.K_GROUP = 78;
SQLiteParser.K_HAVING = 79;
SQLiteParser.K_IF = 80;
SQLiteParser.K_IGNORE = 81;
SQLiteParser.K_IMMEDIATE = 82;
SQLiteParser.K_IN = 83;
SQLiteParser.K_INDEX = 84;
SQLiteParser.K_INDEXED = 85;
SQLiteParser.K_INITIALLY = 86;
SQLiteParser.K_INNER = 87;
SQLiteParser.K_INSERT = 88;
SQLiteParser.K_INSTEAD = 89;
SQLiteParser.K_INTERSECT = 90;
SQLiteParser.K_INTO = 91;
SQLiteParser.K_IS = 92;
SQLiteParser.K_ISNULL = 93;
SQLiteParser.K_JOIN = 94;
SQLiteParser.K_KEY = 95;
SQLiteParser.K_LEFT = 96;
SQLiteParser.K_LIKE = 97;
SQLiteParser.K_LIMIT = 98;
SQLiteParser.K_MATCH = 99;
SQLiteParser.K_NATURAL = 100;
SQLiteParser.K_NO = 101;
SQLiteParser.K_NOT = 102;
SQLiteParser.K_NOTNULL = 103;
SQLiteParser.K_NULL = 104;
SQLiteParser.K_OF = 105;
SQLiteParser.K_OFFSET = 106;
SQLiteParser.K_ON = 107;
SQLiteParser.K_OR = 108;
SQLiteParser.K_ORDER = 109;
SQLiteParser.K_OUTER = 110;
SQLiteParser.K_PLAN = 111;
SQLiteParser.K_PRAGMA = 112;
SQLiteParser.K_PRIMARY = 113;
SQLiteParser.K_QUERY = 114;
SQLiteParser.K_RAISE = 115;
SQLiteParser.K_RECURSIVE = 116;
SQLiteParser.K_REFERENCES = 117;
SQLiteParser.K_REGEXP = 118;
SQLiteParser.K_REINDEX = 119;
SQLiteParser.K_RELEASE = 120;
SQLiteParser.K_RENAME = 121;
SQLiteParser.K_REPLACE = 122;
SQLiteParser.K_RESTRICT = 123;
SQLiteParser.K_RIGHT = 124;
SQLiteParser.K_ROLLBACK = 125;
SQLiteParser.K_ROW = 126;
SQLiteParser.K_SAVEPOINT = 127;
SQLiteParser.K_SELECT = 128;
SQLiteParser.K_SET = 129;
SQLiteParser.K_TABLE = 130;
SQLiteParser.K_TEMP = 131;
SQLiteParser.K_TEMPORARY = 132;
SQLiteParser.K_THEN = 133;
SQLiteParser.K_TO = 134;
SQLiteParser.K_TRANSACTION = 135;
SQLiteParser.K_TRIGGER = 136;
SQLiteParser.K_UNION = 137;
SQLiteParser.K_UNIQUE = 138;
SQLiteParser.K_UPDATE = 139;
SQLiteParser.K_USING = 140;
SQLiteParser.K_VACUUM = 141;
SQLiteParser.K_VALUES = 142;
SQLiteParser.K_VIEW = 143;
SQLiteParser.K_VIRTUAL = 144;
SQLiteParser.K_WHEN = 145;
SQLiteParser.K_WHERE = 146;
SQLiteParser.K_WITH = 147;
SQLiteParser.K_WITHOUT = 148;
SQLiteParser.IDENTIFIER = 149;
SQLiteParser.NUMERIC_LITERAL = 150;
SQLiteParser.BIND_PARAMETER = 151;
SQLiteParser.STRING_LITERAL = 152;
SQLiteParser.BLOB_LITERAL = 153;
SQLiteParser.SINGLE_LINE_COMMENT = 154;
SQLiteParser.MULTILINE_COMMENT = 155;
SQLiteParser.SPACES = 156;
SQLiteParser.UNEXPECTED_CHAR = 157;

SQLiteParser.RULE_parse = 0;
SQLiteParser.RULE_error = 1;
SQLiteParser.RULE_sql_stmt_list = 2;
SQLiteParser.RULE_sql_stmt = 3;
SQLiteParser.RULE_alter_table_stmt = 4;
SQLiteParser.RULE_analyze_stmt = 5;
SQLiteParser.RULE_attach_stmt = 6;
SQLiteParser.RULE_begin_stmt = 7;
SQLiteParser.RULE_commit_stmt = 8;
SQLiteParser.RULE_compound_select_stmt = 9;
SQLiteParser.RULE_create_index_stmt = 10;
SQLiteParser.RULE_create_table_stmt = 11;
SQLiteParser.RULE_create_trigger_stmt = 12;
SQLiteParser.RULE_create_view_stmt = 13;
SQLiteParser.RULE_create_virtual_table_stmt = 14;
SQLiteParser.RULE_delete_stmt = 15;
SQLiteParser.RULE_delete_stmt_limited = 16;
SQLiteParser.RULE_detach_stmt = 17;
SQLiteParser.RULE_drop_index_stmt = 18;
SQLiteParser.RULE_drop_table_stmt = 19;
SQLiteParser.RULE_drop_trigger_stmt = 20;
SQLiteParser.RULE_drop_view_stmt = 21;
SQLiteParser.RULE_factored_select_stmt = 22;
SQLiteParser.RULE_insert_stmt = 23;
SQLiteParser.RULE_pragma_stmt = 24;
SQLiteParser.RULE_reindex_stmt = 25;
SQLiteParser.RULE_release_stmt = 26;
SQLiteParser.RULE_rollback_stmt = 27;
SQLiteParser.RULE_savepoint_stmt = 28;
SQLiteParser.RULE_simple_select_stmt = 29;
SQLiteParser.RULE_select_stmt = 30;
SQLiteParser.RULE_select_or_values = 31;
SQLiteParser.RULE_update_stmt = 32;
SQLiteParser.RULE_update_stmt_limited = 33;
SQLiteParser.RULE_vacuum_stmt = 34;
SQLiteParser.RULE_column_def = 35;
SQLiteParser.RULE_type_name = 36;
SQLiteParser.RULE_column_constraint = 37;
SQLiteParser.RULE_conflict_clause = 38;
SQLiteParser.RULE_expr = 39;
SQLiteParser.RULE_foreign_key_clause = 40;
SQLiteParser.RULE_raise_function = 41;
SQLiteParser.RULE_indexed_column = 42;
SQLiteParser.RULE_table_constraint = 43;
SQLiteParser.RULE_with_clause = 44;
SQLiteParser.RULE_qualified_table_name = 45;
SQLiteParser.RULE_ordering_term = 46;
SQLiteParser.RULE_pragma_value = 47;
SQLiteParser.RULE_common_table_expression = 48;
SQLiteParser.RULE_result_column = 49;
SQLiteParser.RULE_table_or_subquery = 50;
SQLiteParser.RULE_join_clause = 51;
SQLiteParser.RULE_join_operator = 52;
SQLiteParser.RULE_join_constraint = 53;
SQLiteParser.RULE_select_core = 54;
SQLiteParser.RULE_compound_operator = 55;
SQLiteParser.RULE_cte_table_name = 56;
SQLiteParser.RULE_signed_number = 57;
SQLiteParser.RULE_literal_value = 58;
SQLiteParser.RULE_unary_operator = 59;
SQLiteParser.RULE_error_message = 60;
SQLiteParser.RULE_module_argument = 61;
SQLiteParser.RULE_column_alias = 62;
SQLiteParser.RULE_keyword = 63;
SQLiteParser.RULE_name = 64;
SQLiteParser.RULE_function_name = 65;
SQLiteParser.RULE_database_name = 66;
SQLiteParser.RULE_table_name = 67;
SQLiteParser.RULE_table_or_index_name = 68;
SQLiteParser.RULE_new_table_name = 69;
SQLiteParser.RULE_column_name = 70;
SQLiteParser.RULE_collation_name = 71;
SQLiteParser.RULE_foreign_table = 72;
SQLiteParser.RULE_index_name = 73;
SQLiteParser.RULE_trigger_name = 74;
SQLiteParser.RULE_view_name = 75;
SQLiteParser.RULE_module_name = 76;
SQLiteParser.RULE_pragma_name = 77;
SQLiteParser.RULE_savepoint_name = 78;
SQLiteParser.RULE_table_alias = 79;
SQLiteParser.RULE_transaction_name = 80;
SQLiteParser.RULE_any_name = 81;

function ParseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_parse;
    return this;
}

ParseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParseContext.prototype.constructor = ParseContext;

ParseContext.prototype.EOF = function() {
    return this.getToken(SQLiteParser.EOF, 0);
};

ParseContext.prototype.sql_stmt_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_stmt_listContext);
    } else {
        return this.getTypedRuleContext(Sql_stmt_listContext,i);
    }
};

ParseContext.prototype.error = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ErrorContext);
    } else {
        return this.getTypedRuleContext(ErrorContext,i);
    }
};

ParseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterParse(this);
	}
};

ParseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitParse(this);
	}
};

ParseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitParse(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.ParseContext = ParseContext;

SQLiteParser.prototype.parse = function() {

    var localctx = new ParseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SQLiteParser.RULE_parse);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 168;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.SCOL) | (1 << SQLiteParser.K_ALTER) | (1 << SQLiteParser.K_ANALYZE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (SQLiteParser.K_ATTACH - 35)) | (1 << (SQLiteParser.K_BEGIN - 35)) | (1 << (SQLiteParser.K_COMMIT - 35)) | (1 << (SQLiteParser.K_CREATE - 35)) | (1 << (SQLiteParser.K_DELETE - 35)) | (1 << (SQLiteParser.K_DETACH - 35)) | (1 << (SQLiteParser.K_DROP - 35)) | (1 << (SQLiteParser.K_END - 35)))) !== 0) || _la===SQLiteParser.K_EXPLAIN || _la===SQLiteParser.K_INSERT || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (SQLiteParser.K_PRAGMA - 112)) | (1 << (SQLiteParser.K_REINDEX - 112)) | (1 << (SQLiteParser.K_RELEASE - 112)) | (1 << (SQLiteParser.K_REPLACE - 112)) | (1 << (SQLiteParser.K_ROLLBACK - 112)) | (1 << (SQLiteParser.K_SAVEPOINT - 112)) | (1 << (SQLiteParser.K_SELECT - 112)) | (1 << (SQLiteParser.K_UPDATE - 112)) | (1 << (SQLiteParser.K_VACUUM - 112)) | (1 << (SQLiteParser.K_VALUES - 112)))) !== 0) || _la===SQLiteParser.K_WITH || _la===SQLiteParser.UNEXPECTED_CHAR) {
            this.state = 166;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SQLiteParser.SCOL:
            case SQLiteParser.K_ALTER:
            case SQLiteParser.K_ANALYZE:
            case SQLiteParser.K_ATTACH:
            case SQLiteParser.K_BEGIN:
            case SQLiteParser.K_COMMIT:
            case SQLiteParser.K_CREATE:
            case SQLiteParser.K_DELETE:
            case SQLiteParser.K_DETACH:
            case SQLiteParser.K_DROP:
            case SQLiteParser.K_END:
            case SQLiteParser.K_EXPLAIN:
            case SQLiteParser.K_INSERT:
            case SQLiteParser.K_PRAGMA:
            case SQLiteParser.K_REINDEX:
            case SQLiteParser.K_RELEASE:
            case SQLiteParser.K_REPLACE:
            case SQLiteParser.K_ROLLBACK:
            case SQLiteParser.K_SAVEPOINT:
            case SQLiteParser.K_SELECT:
            case SQLiteParser.K_UPDATE:
            case SQLiteParser.K_VACUUM:
            case SQLiteParser.K_VALUES:
            case SQLiteParser.K_WITH:
                this.state = 164;
                this.sql_stmt_list();
                break;
            case SQLiteParser.UNEXPECTED_CHAR:
                this.state = 165;
                this.error();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 170;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 171;
        this.match(SQLiteParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ErrorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_error;
    this._UNEXPECTED_CHAR = null; // Token
    return this;
}

ErrorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ErrorContext.prototype.constructor = ErrorContext;

ErrorContext.prototype.UNEXPECTED_CHAR = function() {
    return this.getToken(SQLiteParser.UNEXPECTED_CHAR, 0);
};

ErrorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterError(this);
	}
};

ErrorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitError(this);
	}
};

ErrorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitError(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.ErrorContext = ErrorContext;

SQLiteParser.prototype.error = function() {

    var localctx = new ErrorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SQLiteParser.RULE_error);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 173;
        localctx._UNEXPECTED_CHAR = this.match(SQLiteParser.UNEXPECTED_CHAR);
         
             throw new RuntimeException("UNEXPECTED_CHAR=" + (localctx._UNEXPECTED_CHAR===null ? null : localctx._UNEXPECTED_CHAR.text)); 
           
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_stmt_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_sql_stmt_list;
    return this;
}

Sql_stmt_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_stmt_listContext.prototype.constructor = Sql_stmt_listContext;

Sql_stmt_listContext.prototype.sql_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sql_stmtContext);
    } else {
        return this.getTypedRuleContext(Sql_stmtContext,i);
    }
};

Sql_stmt_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterSql_stmt_list(this);
	}
};

Sql_stmt_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitSql_stmt_list(this);
	}
};

Sql_stmt_listContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitSql_stmt_list(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Sql_stmt_listContext = Sql_stmt_listContext;

SQLiteParser.prototype.sql_stmt_list = function() {

    var localctx = new Sql_stmt_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SQLiteParser.RULE_sql_stmt_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 179;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLiteParser.SCOL) {
            this.state = 176;
            this.match(SQLiteParser.SCOL);
            this.state = 181;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 182;
        this.sql_stmt();
        this.state = 191;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 184; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 183;
                    this.match(SQLiteParser.SCOL);
                    this.state = 186; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===SQLiteParser.SCOL);
                this.state = 188;
                this.sql_stmt(); 
            }
            this.state = 193;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
        }

        this.state = 197;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 194;
                this.match(SQLiteParser.SCOL); 
            }
            this.state = 199;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Sql_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_sql_stmt;
    return this;
}

Sql_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sql_stmtContext.prototype.constructor = Sql_stmtContext;

Sql_stmtContext.prototype.alter_table_stmt = function() {
    return this.getTypedRuleContext(Alter_table_stmtContext,0);
};

Sql_stmtContext.prototype.analyze_stmt = function() {
    return this.getTypedRuleContext(Analyze_stmtContext,0);
};

Sql_stmtContext.prototype.attach_stmt = function() {
    return this.getTypedRuleContext(Attach_stmtContext,0);
};

Sql_stmtContext.prototype.begin_stmt = function() {
    return this.getTypedRuleContext(Begin_stmtContext,0);
};

Sql_stmtContext.prototype.commit_stmt = function() {
    return this.getTypedRuleContext(Commit_stmtContext,0);
};

Sql_stmtContext.prototype.compound_select_stmt = function() {
    return this.getTypedRuleContext(Compound_select_stmtContext,0);
};

Sql_stmtContext.prototype.create_index_stmt = function() {
    return this.getTypedRuleContext(Create_index_stmtContext,0);
};

Sql_stmtContext.prototype.create_table_stmt = function() {
    return this.getTypedRuleContext(Create_table_stmtContext,0);
};

Sql_stmtContext.prototype.create_trigger_stmt = function() {
    return this.getTypedRuleContext(Create_trigger_stmtContext,0);
};

Sql_stmtContext.prototype.create_view_stmt = function() {
    return this.getTypedRuleContext(Create_view_stmtContext,0);
};

Sql_stmtContext.prototype.create_virtual_table_stmt = function() {
    return this.getTypedRuleContext(Create_virtual_table_stmtContext,0);
};

Sql_stmtContext.prototype.delete_stmt = function() {
    return this.getTypedRuleContext(Delete_stmtContext,0);
};

Sql_stmtContext.prototype.delete_stmt_limited = function() {
    return this.getTypedRuleContext(Delete_stmt_limitedContext,0);
};

Sql_stmtContext.prototype.detach_stmt = function() {
    return this.getTypedRuleContext(Detach_stmtContext,0);
};

Sql_stmtContext.prototype.drop_index_stmt = function() {
    return this.getTypedRuleContext(Drop_index_stmtContext,0);
};

Sql_stmtContext.prototype.drop_table_stmt = function() {
    return this.getTypedRuleContext(Drop_table_stmtContext,0);
};

Sql_stmtContext.prototype.drop_trigger_stmt = function() {
    return this.getTypedRuleContext(Drop_trigger_stmtContext,0);
};

Sql_stmtContext.prototype.drop_view_stmt = function() {
    return this.getTypedRuleContext(Drop_view_stmtContext,0);
};

Sql_stmtContext.prototype.factored_select_stmt = function() {
    return this.getTypedRuleContext(Factored_select_stmtContext,0);
};

Sql_stmtContext.prototype.insert_stmt = function() {
    return this.getTypedRuleContext(Insert_stmtContext,0);
};

Sql_stmtContext.prototype.pragma_stmt = function() {
    return this.getTypedRuleContext(Pragma_stmtContext,0);
};

Sql_stmtContext.prototype.reindex_stmt = function() {
    return this.getTypedRuleContext(Reindex_stmtContext,0);
};

Sql_stmtContext.prototype.release_stmt = function() {
    return this.getTypedRuleContext(Release_stmtContext,0);
};

Sql_stmtContext.prototype.rollback_stmt = function() {
    return this.getTypedRuleContext(Rollback_stmtContext,0);
};

Sql_stmtContext.prototype.savepoint_stmt = function() {
    return this.getTypedRuleContext(Savepoint_stmtContext,0);
};

Sql_stmtContext.prototype.simple_select_stmt = function() {
    return this.getTypedRuleContext(Simple_select_stmtContext,0);
};

Sql_stmtContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Sql_stmtContext.prototype.update_stmt = function() {
    return this.getTypedRuleContext(Update_stmtContext,0);
};

Sql_stmtContext.prototype.update_stmt_limited = function() {
    return this.getTypedRuleContext(Update_stmt_limitedContext,0);
};

Sql_stmtContext.prototype.vacuum_stmt = function() {
    return this.getTypedRuleContext(Vacuum_stmtContext,0);
};

Sql_stmtContext.prototype.K_EXPLAIN = function() {
    return this.getToken(SQLiteParser.K_EXPLAIN, 0);
};

Sql_stmtContext.prototype.K_QUERY = function() {
    return this.getToken(SQLiteParser.K_QUERY, 0);
};

Sql_stmtContext.prototype.K_PLAN = function() {
    return this.getToken(SQLiteParser.K_PLAN, 0);
};

Sql_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterSql_stmt(this);
	}
};

Sql_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitSql_stmt(this);
	}
};

Sql_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitSql_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Sql_stmtContext = Sql_stmtContext;

SQLiteParser.prototype.sql_stmt = function() {

    var localctx = new Sql_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SQLiteParser.RULE_sql_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 205;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_EXPLAIN) {
            this.state = 200;
            this.match(SQLiteParser.K_EXPLAIN);
            this.state = 203;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_QUERY) {
                this.state = 201;
                this.match(SQLiteParser.K_QUERY);
                this.state = 202;
                this.match(SQLiteParser.K_PLAN);
            }

        }

        this.state = 237;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.state = 207;
            this.alter_table_stmt();
            break;

        case 2:
            this.state = 208;
            this.analyze_stmt();
            break;

        case 3:
            this.state = 209;
            this.attach_stmt();
            break;

        case 4:
            this.state = 210;
            this.begin_stmt();
            break;

        case 5:
            this.state = 211;
            this.commit_stmt();
            break;

        case 6:
            this.state = 212;
            this.compound_select_stmt();
            break;

        case 7:
            this.state = 213;
            this.create_index_stmt();
            break;

        case 8:
            this.state = 214;
            this.create_table_stmt();
            break;

        case 9:
            this.state = 215;
            this.create_trigger_stmt();
            break;

        case 10:
            this.state = 216;
            this.create_view_stmt();
            break;

        case 11:
            this.state = 217;
            this.create_virtual_table_stmt();
            break;

        case 12:
            this.state = 218;
            this.delete_stmt();
            break;

        case 13:
            this.state = 219;
            this.delete_stmt_limited();
            break;

        case 14:
            this.state = 220;
            this.detach_stmt();
            break;

        case 15:
            this.state = 221;
            this.drop_index_stmt();
            break;

        case 16:
            this.state = 222;
            this.drop_table_stmt();
            break;

        case 17:
            this.state = 223;
            this.drop_trigger_stmt();
            break;

        case 18:
            this.state = 224;
            this.drop_view_stmt();
            break;

        case 19:
            this.state = 225;
            this.factored_select_stmt();
            break;

        case 20:
            this.state = 226;
            this.insert_stmt();
            break;

        case 21:
            this.state = 227;
            this.pragma_stmt();
            break;

        case 22:
            this.state = 228;
            this.reindex_stmt();
            break;

        case 23:
            this.state = 229;
            this.release_stmt();
            break;

        case 24:
            this.state = 230;
            this.rollback_stmt();
            break;

        case 25:
            this.state = 231;
            this.savepoint_stmt();
            break;

        case 26:
            this.state = 232;
            this.simple_select_stmt();
            break;

        case 27:
            this.state = 233;
            this.select_stmt();
            break;

        case 28:
            this.state = 234;
            this.update_stmt();
            break;

        case 29:
            this.state = 235;
            this.update_stmt_limited();
            break;

        case 30:
            this.state = 236;
            this.vacuum_stmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alter_table_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_alter_table_stmt;
    return this;
}

Alter_table_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alter_table_stmtContext.prototype.constructor = Alter_table_stmtContext;

Alter_table_stmtContext.prototype.K_ALTER = function() {
    return this.getToken(SQLiteParser.K_ALTER, 0);
};

Alter_table_stmtContext.prototype.K_TABLE = function() {
    return this.getToken(SQLiteParser.K_TABLE, 0);
};

Alter_table_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Alter_table_stmtContext.prototype.K_RENAME = function() {
    return this.getToken(SQLiteParser.K_RENAME, 0);
};

Alter_table_stmtContext.prototype.K_TO = function() {
    return this.getToken(SQLiteParser.K_TO, 0);
};

Alter_table_stmtContext.prototype.new_table_name = function() {
    return this.getTypedRuleContext(New_table_nameContext,0);
};

Alter_table_stmtContext.prototype.K_ADD = function() {
    return this.getToken(SQLiteParser.K_ADD, 0);
};

Alter_table_stmtContext.prototype.column_def = function() {
    return this.getTypedRuleContext(Column_defContext,0);
};

Alter_table_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Alter_table_stmtContext.prototype.K_COLUMN = function() {
    return this.getToken(SQLiteParser.K_COLUMN, 0);
};

Alter_table_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterAlter_table_stmt(this);
	}
};

Alter_table_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitAlter_table_stmt(this);
	}
};

Alter_table_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitAlter_table_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Alter_table_stmtContext = Alter_table_stmtContext;

SQLiteParser.prototype.alter_table_stmt = function() {

    var localctx = new Alter_table_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SQLiteParser.RULE_alter_table_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 239;
        this.match(SQLiteParser.K_ALTER);
        this.state = 240;
        this.match(SQLiteParser.K_TABLE);
        this.state = 244;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        if(la_===1) {
            this.state = 241;
            this.database_name();
            this.state = 242;
            this.match(SQLiteParser.DOT);

        }
        this.state = 246;
        this.table_name();
        this.state = 255;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLiteParser.K_RENAME:
            this.state = 247;
            this.match(SQLiteParser.K_RENAME);
            this.state = 248;
            this.match(SQLiteParser.K_TO);
            this.state = 249;
            this.new_table_name();
            break;
        case SQLiteParser.K_ADD:
            this.state = 250;
            this.match(SQLiteParser.K_ADD);
            this.state = 252;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
            if(la_===1) {
                this.state = 251;
                this.match(SQLiteParser.K_COLUMN);

            }
            this.state = 254;
            this.column_def();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Analyze_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_analyze_stmt;
    return this;
}

Analyze_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Analyze_stmtContext.prototype.constructor = Analyze_stmtContext;

Analyze_stmtContext.prototype.K_ANALYZE = function() {
    return this.getToken(SQLiteParser.K_ANALYZE, 0);
};

Analyze_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Analyze_stmtContext.prototype.table_or_index_name = function() {
    return this.getTypedRuleContext(Table_or_index_nameContext,0);
};

Analyze_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterAnalyze_stmt(this);
	}
};

Analyze_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitAnalyze_stmt(this);
	}
};

Analyze_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitAnalyze_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Analyze_stmtContext = Analyze_stmtContext;

SQLiteParser.prototype.analyze_stmt = function() {

    var localctx = new Analyze_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SQLiteParser.RULE_analyze_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 257;
        this.match(SQLiteParser.K_ANALYZE);
        this.state = 264;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        if(la_===1) {
            this.state = 258;
            this.database_name();

        } else if(la_===2) {
            this.state = 259;
            this.table_or_index_name();

        } else if(la_===3) {
            this.state = 260;
            this.database_name();
            this.state = 261;
            this.match(SQLiteParser.DOT);
            this.state = 262;
            this.table_or_index_name();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Attach_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_attach_stmt;
    return this;
}

Attach_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Attach_stmtContext.prototype.constructor = Attach_stmtContext;

Attach_stmtContext.prototype.K_ATTACH = function() {
    return this.getToken(SQLiteParser.K_ATTACH, 0);
};

Attach_stmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Attach_stmtContext.prototype.K_AS = function() {
    return this.getToken(SQLiteParser.K_AS, 0);
};

Attach_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Attach_stmtContext.prototype.K_DATABASE = function() {
    return this.getToken(SQLiteParser.K_DATABASE, 0);
};

Attach_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterAttach_stmt(this);
	}
};

Attach_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitAttach_stmt(this);
	}
};

Attach_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitAttach_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Attach_stmtContext = Attach_stmtContext;

SQLiteParser.prototype.attach_stmt = function() {

    var localctx = new Attach_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SQLiteParser.RULE_attach_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 266;
        this.match(SQLiteParser.K_ATTACH);
        this.state = 268;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        if(la_===1) {
            this.state = 267;
            this.match(SQLiteParser.K_DATABASE);

        }
        this.state = 270;
        this.expr(0);
        this.state = 271;
        this.match(SQLiteParser.K_AS);
        this.state = 272;
        this.database_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Begin_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_begin_stmt;
    return this;
}

Begin_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Begin_stmtContext.prototype.constructor = Begin_stmtContext;

Begin_stmtContext.prototype.K_BEGIN = function() {
    return this.getToken(SQLiteParser.K_BEGIN, 0);
};

Begin_stmtContext.prototype.K_TRANSACTION = function() {
    return this.getToken(SQLiteParser.K_TRANSACTION, 0);
};

Begin_stmtContext.prototype.K_DEFERRED = function() {
    return this.getToken(SQLiteParser.K_DEFERRED, 0);
};

Begin_stmtContext.prototype.K_IMMEDIATE = function() {
    return this.getToken(SQLiteParser.K_IMMEDIATE, 0);
};

Begin_stmtContext.prototype.K_EXCLUSIVE = function() {
    return this.getToken(SQLiteParser.K_EXCLUSIVE, 0);
};

Begin_stmtContext.prototype.transaction_name = function() {
    return this.getTypedRuleContext(Transaction_nameContext,0);
};

Begin_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterBegin_stmt(this);
	}
};

Begin_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitBegin_stmt(this);
	}
};

Begin_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitBegin_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Begin_stmtContext = Begin_stmtContext;

SQLiteParser.prototype.begin_stmt = function() {

    var localctx = new Begin_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SQLiteParser.RULE_begin_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 274;
        this.match(SQLiteParser.K_BEGIN);
        this.state = 276;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SQLiteParser.K_DEFERRED - 58)) | (1 << (SQLiteParser.K_EXCLUSIVE - 58)) | (1 << (SQLiteParser.K_IMMEDIATE - 58)))) !== 0)) {
            this.state = 275;
            _la = this._input.LA(1);
            if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (SQLiteParser.K_DEFERRED - 58)) | (1 << (SQLiteParser.K_EXCLUSIVE - 58)) | (1 << (SQLiteParser.K_IMMEDIATE - 58)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_TRANSACTION) {
            this.state = 278;
            this.match(SQLiteParser.K_TRANSACTION);
            this.state = 280;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 279;
                this.transaction_name();

            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Commit_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_commit_stmt;
    return this;
}

Commit_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Commit_stmtContext.prototype.constructor = Commit_stmtContext;

Commit_stmtContext.prototype.K_COMMIT = function() {
    return this.getToken(SQLiteParser.K_COMMIT, 0);
};

Commit_stmtContext.prototype.K_END = function() {
    return this.getToken(SQLiteParser.K_END, 0);
};

Commit_stmtContext.prototype.K_TRANSACTION = function() {
    return this.getToken(SQLiteParser.K_TRANSACTION, 0);
};

Commit_stmtContext.prototype.transaction_name = function() {
    return this.getTypedRuleContext(Transaction_nameContext,0);
};

Commit_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterCommit_stmt(this);
	}
};

Commit_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitCommit_stmt(this);
	}
};

Commit_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitCommit_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Commit_stmtContext = Commit_stmtContext;

SQLiteParser.prototype.commit_stmt = function() {

    var localctx = new Commit_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SQLiteParser.RULE_commit_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        _la = this._input.LA(1);
        if(!(_la===SQLiteParser.K_COMMIT || _la===SQLiteParser.K_END)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_TRANSACTION) {
            this.state = 285;
            this.match(SQLiteParser.K_TRANSACTION);
            this.state = 287;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
            if(la_===1) {
                this.state = 286;
                this.transaction_name();

            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_select_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_compound_select_stmt;
    return this;
}

Compound_select_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_select_stmtContext.prototype.constructor = Compound_select_stmtContext;

Compound_select_stmtContext.prototype.select_core = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_coreContext);
    } else {
        return this.getTypedRuleContext(Select_coreContext,i);
    }
};

Compound_select_stmtContext.prototype.K_WITH = function() {
    return this.getToken(SQLiteParser.K_WITH, 0);
};

Compound_select_stmtContext.prototype.common_table_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Common_table_expressionContext);
    } else {
        return this.getTypedRuleContext(Common_table_expressionContext,i);
    }
};

Compound_select_stmtContext.prototype.K_ORDER = function() {
    return this.getToken(SQLiteParser.K_ORDER, 0);
};

Compound_select_stmtContext.prototype.K_BY = function() {
    return this.getToken(SQLiteParser.K_BY, 0);
};

Compound_select_stmtContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Compound_select_stmtContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLiteParser.K_LIMIT, 0);
};

Compound_select_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Compound_select_stmtContext.prototype.K_UNION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_UNION);
    } else {
        return this.getToken(SQLiteParser.K_UNION, i);
    }
};


Compound_select_stmtContext.prototype.K_INTERSECT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_INTERSECT);
    } else {
        return this.getToken(SQLiteParser.K_INTERSECT, i);
    }
};


Compound_select_stmtContext.prototype.K_EXCEPT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_EXCEPT);
    } else {
        return this.getToken(SQLiteParser.K_EXCEPT, i);
    }
};


Compound_select_stmtContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLiteParser.K_RECURSIVE, 0);
};

Compound_select_stmtContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLiteParser.K_OFFSET, 0);
};

Compound_select_stmtContext.prototype.K_ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_ALL);
    } else {
        return this.getToken(SQLiteParser.K_ALL, i);
    }
};


Compound_select_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterCompound_select_stmt(this);
	}
};

Compound_select_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitCompound_select_stmt(this);
	}
};

Compound_select_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitCompound_select_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Compound_select_stmtContext = Compound_select_stmtContext;

SQLiteParser.prototype.compound_select_stmt = function() {

    var localctx = new Compound_select_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SQLiteParser.RULE_compound_select_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 303;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WITH) {
            this.state = 291;
            this.match(SQLiteParser.K_WITH);
            this.state = 293;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
            if(la_===1) {
                this.state = 292;
                this.match(SQLiteParser.K_RECURSIVE);

            }
            this.state = 295;
            this.common_table_expression();
            this.state = 300;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 296;
                this.match(SQLiteParser.COMMA);
                this.state = 297;
                this.common_table_expression();
                this.state = 302;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 305;
        this.select_core();
        this.state = 315; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 312;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SQLiteParser.K_UNION:
                this.state = 306;
                this.match(SQLiteParser.K_UNION);
                this.state = 308;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLiteParser.K_ALL) {
                    this.state = 307;
                    this.match(SQLiteParser.K_ALL);
                }

                break;
            case SQLiteParser.K_INTERSECT:
                this.state = 310;
                this.match(SQLiteParser.K_INTERSECT);
                break;
            case SQLiteParser.K_EXCEPT:
                this.state = 311;
                this.match(SQLiteParser.K_EXCEPT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 314;
            this.select_core();
            this.state = 317; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SQLiteParser.K_EXCEPT || _la===SQLiteParser.K_INTERSECT || _la===SQLiteParser.K_UNION);
        this.state = 329;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_ORDER) {
            this.state = 319;
            this.match(SQLiteParser.K_ORDER);
            this.state = 320;
            this.match(SQLiteParser.K_BY);
            this.state = 321;
            this.ordering_term();
            this.state = 326;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 322;
                this.match(SQLiteParser.COMMA);
                this.state = 323;
                this.ordering_term();
                this.state = 328;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 337;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_LIMIT) {
            this.state = 331;
            this.match(SQLiteParser.K_LIMIT);
            this.state = 332;
            this.expr(0);
            this.state = 335;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET) {
                this.state = 333;
                _la = this._input.LA(1);
                if(!(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 334;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_index_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_create_index_stmt;
    return this;
}

Create_index_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_index_stmtContext.prototype.constructor = Create_index_stmtContext;

Create_index_stmtContext.prototype.K_CREATE = function() {
    return this.getToken(SQLiteParser.K_CREATE, 0);
};

Create_index_stmtContext.prototype.K_INDEX = function() {
    return this.getToken(SQLiteParser.K_INDEX, 0);
};

Create_index_stmtContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Create_index_stmtContext.prototype.K_ON = function() {
    return this.getToken(SQLiteParser.K_ON, 0);
};

Create_index_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_index_stmtContext.prototype.indexed_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Indexed_columnContext);
    } else {
        return this.getTypedRuleContext(Indexed_columnContext,i);
    }
};

Create_index_stmtContext.prototype.K_UNIQUE = function() {
    return this.getToken(SQLiteParser.K_UNIQUE, 0);
};

Create_index_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLiteParser.K_IF, 0);
};

Create_index_stmtContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

Create_index_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLiteParser.K_EXISTS, 0);
};

Create_index_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Create_index_stmtContext.prototype.K_WHERE = function() {
    return this.getToken(SQLiteParser.K_WHERE, 0);
};

Create_index_stmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Create_index_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterCreate_index_stmt(this);
	}
};

Create_index_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitCreate_index_stmt(this);
	}
};

Create_index_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitCreate_index_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Create_index_stmtContext = Create_index_stmtContext;

SQLiteParser.prototype.create_index_stmt = function() {

    var localctx = new Create_index_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SQLiteParser.RULE_create_index_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 339;
        this.match(SQLiteParser.K_CREATE);
        this.state = 341;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_UNIQUE) {
            this.state = 340;
            this.match(SQLiteParser.K_UNIQUE);
        }

        this.state = 343;
        this.match(SQLiteParser.K_INDEX);
        this.state = 347;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        if(la_===1) {
            this.state = 344;
            this.match(SQLiteParser.K_IF);
            this.state = 345;
            this.match(SQLiteParser.K_NOT);
            this.state = 346;
            this.match(SQLiteParser.K_EXISTS);

        }
        this.state = 352;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        if(la_===1) {
            this.state = 349;
            this.database_name();
            this.state = 350;
            this.match(SQLiteParser.DOT);

        }
        this.state = 354;
        this.index_name();
        this.state = 355;
        this.match(SQLiteParser.K_ON);
        this.state = 356;
        this.table_name();
        this.state = 357;
        this.match(SQLiteParser.OPEN_PAR);
        this.state = 358;
        this.indexed_column();
        this.state = 363;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLiteParser.COMMA) {
            this.state = 359;
            this.match(SQLiteParser.COMMA);
            this.state = 360;
            this.indexed_column();
            this.state = 365;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 366;
        this.match(SQLiteParser.CLOSE_PAR);
        this.state = 369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WHERE) {
            this.state = 367;
            this.match(SQLiteParser.K_WHERE);
            this.state = 368;
            this.expr(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_table_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_create_table_stmt;
    return this;
}

Create_table_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_table_stmtContext.prototype.constructor = Create_table_stmtContext;

Create_table_stmtContext.prototype.K_CREATE = function() {
    return this.getToken(SQLiteParser.K_CREATE, 0);
};

Create_table_stmtContext.prototype.K_TABLE = function() {
    return this.getToken(SQLiteParser.K_TABLE, 0);
};

Create_table_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_table_stmtContext.prototype.column_def = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_defContext);
    } else {
        return this.getTypedRuleContext(Column_defContext,i);
    }
};

Create_table_stmtContext.prototype.K_AS = function() {
    return this.getToken(SQLiteParser.K_AS, 0);
};

Create_table_stmtContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Create_table_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLiteParser.K_IF, 0);
};

Create_table_stmtContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

Create_table_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLiteParser.K_EXISTS, 0);
};

Create_table_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Create_table_stmtContext.prototype.K_TEMP = function() {
    return this.getToken(SQLiteParser.K_TEMP, 0);
};

Create_table_stmtContext.prototype.K_TEMPORARY = function() {
    return this.getToken(SQLiteParser.K_TEMPORARY, 0);
};

Create_table_stmtContext.prototype.table_constraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_constraintContext);
    } else {
        return this.getTypedRuleContext(Table_constraintContext,i);
    }
};

Create_table_stmtContext.prototype.K_WITHOUT = function() {
    return this.getToken(SQLiteParser.K_WITHOUT, 0);
};

Create_table_stmtContext.prototype.IDENTIFIER = function() {
    return this.getToken(SQLiteParser.IDENTIFIER, 0);
};

Create_table_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterCreate_table_stmt(this);
	}
};

Create_table_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitCreate_table_stmt(this);
	}
};

Create_table_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitCreate_table_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Create_table_stmtContext = Create_table_stmtContext;

SQLiteParser.prototype.create_table_stmt = function() {

    var localctx = new Create_table_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SQLiteParser.RULE_create_table_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 371;
        this.match(SQLiteParser.K_CREATE);
        this.state = 373;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_TEMP || _la===SQLiteParser.K_TEMPORARY) {
            this.state = 372;
            _la = this._input.LA(1);
            if(!(_la===SQLiteParser.K_TEMP || _la===SQLiteParser.K_TEMPORARY)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 375;
        this.match(SQLiteParser.K_TABLE);
        this.state = 379;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 376;
            this.match(SQLiteParser.K_IF);
            this.state = 377;
            this.match(SQLiteParser.K_NOT);
            this.state = 378;
            this.match(SQLiteParser.K_EXISTS);

        }
        this.state = 384;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 381;
            this.database_name();
            this.state = 382;
            this.match(SQLiteParser.DOT);

        }
        this.state = 386;
        this.table_name();
        this.state = 410;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLiteParser.OPEN_PAR:
            this.state = 387;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 388;
            this.column_def();
            this.state = 393;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 389;
                    this.match(SQLiteParser.COMMA);
                    this.state = 390;
                    this.column_def(); 
                }
                this.state = 395;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
            }

            this.state = 400;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 396;
                this.match(SQLiteParser.COMMA);
                this.state = 397;
                this.table_constraint();
                this.state = 402;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 403;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 406;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_WITHOUT) {
                this.state = 404;
                this.match(SQLiteParser.K_WITHOUT);
                this.state = 405;
                this.match(SQLiteParser.IDENTIFIER);
            }

            break;
        case SQLiteParser.K_AS:
            this.state = 408;
            this.match(SQLiteParser.K_AS);
            this.state = 409;
            this.select_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_trigger_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_create_trigger_stmt;
    return this;
}

Create_trigger_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_trigger_stmtContext.prototype.constructor = Create_trigger_stmtContext;

Create_trigger_stmtContext.prototype.K_CREATE = function() {
    return this.getToken(SQLiteParser.K_CREATE, 0);
};

Create_trigger_stmtContext.prototype.K_TRIGGER = function() {
    return this.getToken(SQLiteParser.K_TRIGGER, 0);
};

Create_trigger_stmtContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Create_trigger_stmtContext.prototype.K_ON = function() {
    return this.getToken(SQLiteParser.K_ON, 0);
};

Create_trigger_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_trigger_stmtContext.prototype.K_BEGIN = function() {
    return this.getToken(SQLiteParser.K_BEGIN, 0);
};

Create_trigger_stmtContext.prototype.K_END = function() {
    return this.getToken(SQLiteParser.K_END, 0);
};

Create_trigger_stmtContext.prototype.K_DELETE = function() {
    return this.getToken(SQLiteParser.K_DELETE, 0);
};

Create_trigger_stmtContext.prototype.K_INSERT = function() {
    return this.getToken(SQLiteParser.K_INSERT, 0);
};

Create_trigger_stmtContext.prototype.K_UPDATE = function() {
    return this.getToken(SQLiteParser.K_UPDATE, 0);
};

Create_trigger_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLiteParser.K_IF, 0);
};

Create_trigger_stmtContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

Create_trigger_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLiteParser.K_EXISTS, 0);
};

Create_trigger_stmtContext.prototype.database_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Database_nameContext);
    } else {
        return this.getTypedRuleContext(Database_nameContext,i);
    }
};

Create_trigger_stmtContext.prototype.K_BEFORE = function() {
    return this.getToken(SQLiteParser.K_BEFORE, 0);
};

Create_trigger_stmtContext.prototype.K_AFTER = function() {
    return this.getToken(SQLiteParser.K_AFTER, 0);
};

Create_trigger_stmtContext.prototype.K_INSTEAD = function() {
    return this.getToken(SQLiteParser.K_INSTEAD, 0);
};

Create_trigger_stmtContext.prototype.K_OF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_OF);
    } else {
        return this.getToken(SQLiteParser.K_OF, i);
    }
};


Create_trigger_stmtContext.prototype.K_FOR = function() {
    return this.getToken(SQLiteParser.K_FOR, 0);
};

Create_trigger_stmtContext.prototype.K_EACH = function() {
    return this.getToken(SQLiteParser.K_EACH, 0);
};

Create_trigger_stmtContext.prototype.K_ROW = function() {
    return this.getToken(SQLiteParser.K_ROW, 0);
};

Create_trigger_stmtContext.prototype.K_WHEN = function() {
    return this.getToken(SQLiteParser.K_WHEN, 0);
};

Create_trigger_stmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Create_trigger_stmtContext.prototype.K_TEMP = function() {
    return this.getToken(SQLiteParser.K_TEMP, 0);
};

Create_trigger_stmtContext.prototype.K_TEMPORARY = function() {
    return this.getToken(SQLiteParser.K_TEMPORARY, 0);
};

Create_trigger_stmtContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Create_trigger_stmtContext.prototype.update_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Update_stmtContext);
    } else {
        return this.getTypedRuleContext(Update_stmtContext,i);
    }
};

Create_trigger_stmtContext.prototype.insert_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Insert_stmtContext);
    } else {
        return this.getTypedRuleContext(Insert_stmtContext,i);
    }
};

Create_trigger_stmtContext.prototype.delete_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Delete_stmtContext);
    } else {
        return this.getTypedRuleContext(Delete_stmtContext,i);
    }
};

Create_trigger_stmtContext.prototype.select_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_stmtContext);
    } else {
        return this.getTypedRuleContext(Select_stmtContext,i);
    }
};

Create_trigger_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterCreate_trigger_stmt(this);
	}
};

Create_trigger_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitCreate_trigger_stmt(this);
	}
};

Create_trigger_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitCreate_trigger_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Create_trigger_stmtContext = Create_trigger_stmtContext;

SQLiteParser.prototype.create_trigger_stmt = function() {

    var localctx = new Create_trigger_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SQLiteParser.RULE_create_trigger_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 412;
        this.match(SQLiteParser.K_CREATE);
        this.state = 414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_TEMP || _la===SQLiteParser.K_TEMPORARY) {
            this.state = 413;
            _la = this._input.LA(1);
            if(!(_la===SQLiteParser.K_TEMP || _la===SQLiteParser.K_TEMPORARY)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 416;
        this.match(SQLiteParser.K_TRIGGER);
        this.state = 420;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        if(la_===1) {
            this.state = 417;
            this.match(SQLiteParser.K_IF);
            this.state = 418;
            this.match(SQLiteParser.K_NOT);
            this.state = 419;
            this.match(SQLiteParser.K_EXISTS);

        }
        this.state = 425;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        if(la_===1) {
            this.state = 422;
            this.database_name();
            this.state = 423;
            this.match(SQLiteParser.DOT);

        }
        this.state = 427;
        this.trigger_name();
        this.state = 432;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case SQLiteParser.K_BEFORE:
        	this.state = 428;
        	this.match(SQLiteParser.K_BEFORE);
        	break;
        case SQLiteParser.K_AFTER:
        	this.state = 429;
        	this.match(SQLiteParser.K_AFTER);
        	break;
        case SQLiteParser.K_INSTEAD:
        	this.state = 430;
        	this.match(SQLiteParser.K_INSTEAD);
        	this.state = 431;
        	this.match(SQLiteParser.K_OF);
        	break;
        case SQLiteParser.K_DELETE:
        case SQLiteParser.K_INSERT:
        case SQLiteParser.K_UPDATE:
        	break;
        default:
        	break;
        }
        this.state = 448;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLiteParser.K_DELETE:
            this.state = 434;
            this.match(SQLiteParser.K_DELETE);
            break;
        case SQLiteParser.K_INSERT:
            this.state = 435;
            this.match(SQLiteParser.K_INSERT);
            break;
        case SQLiteParser.K_UPDATE:
            this.state = 436;
            this.match(SQLiteParser.K_UPDATE);
            this.state = 446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_OF) {
                this.state = 437;
                this.match(SQLiteParser.K_OF);
                this.state = 438;
                this.column_name();
                this.state = 443;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLiteParser.COMMA) {
                    this.state = 439;
                    this.match(SQLiteParser.COMMA);
                    this.state = 440;
                    this.column_name();
                    this.state = 445;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 450;
        this.match(SQLiteParser.K_ON);
        this.state = 454;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        if(la_===1) {
            this.state = 451;
            this.database_name();
            this.state = 452;
            this.match(SQLiteParser.DOT);

        }
        this.state = 456;
        this.table_name();
        this.state = 460;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_FOR) {
            this.state = 457;
            this.match(SQLiteParser.K_FOR);
            this.state = 458;
            this.match(SQLiteParser.K_EACH);
            this.state = 459;
            this.match(SQLiteParser.K_ROW);
        }

        this.state = 464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WHEN) {
            this.state = 462;
            this.match(SQLiteParser.K_WHEN);
            this.state = 463;
            this.expr(0);
        }

        this.state = 466;
        this.match(SQLiteParser.K_BEGIN);
        this.state = 475; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 471;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
            switch(la_) {
            case 1:
                this.state = 467;
                this.update_stmt();
                break;

            case 2:
                this.state = 468;
                this.insert_stmt();
                break;

            case 3:
                this.state = 469;
                this.delete_stmt();
                break;

            case 4:
                this.state = 470;
                this.select_stmt();
                break;

            }
            this.state = 473;
            this.match(SQLiteParser.SCOL);
            this.state = 477; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SQLiteParser.K_DELETE || _la===SQLiteParser.K_INSERT || ((((_la - 122)) & ~0x1f) == 0 && ((1 << (_la - 122)) & ((1 << (SQLiteParser.K_REPLACE - 122)) | (1 << (SQLiteParser.K_SELECT - 122)) | (1 << (SQLiteParser.K_UPDATE - 122)) | (1 << (SQLiteParser.K_VALUES - 122)) | (1 << (SQLiteParser.K_WITH - 122)))) !== 0));
        this.state = 479;
        this.match(SQLiteParser.K_END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_view_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_create_view_stmt;
    return this;
}

Create_view_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_view_stmtContext.prototype.constructor = Create_view_stmtContext;

Create_view_stmtContext.prototype.K_CREATE = function() {
    return this.getToken(SQLiteParser.K_CREATE, 0);
};

Create_view_stmtContext.prototype.K_VIEW = function() {
    return this.getToken(SQLiteParser.K_VIEW, 0);
};

Create_view_stmtContext.prototype.view_name = function() {
    return this.getTypedRuleContext(View_nameContext,0);
};

Create_view_stmtContext.prototype.K_AS = function() {
    return this.getToken(SQLiteParser.K_AS, 0);
};

Create_view_stmtContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Create_view_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLiteParser.K_IF, 0);
};

Create_view_stmtContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

Create_view_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLiteParser.K_EXISTS, 0);
};

Create_view_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Create_view_stmtContext.prototype.K_TEMP = function() {
    return this.getToken(SQLiteParser.K_TEMP, 0);
};

Create_view_stmtContext.prototype.K_TEMPORARY = function() {
    return this.getToken(SQLiteParser.K_TEMPORARY, 0);
};

Create_view_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterCreate_view_stmt(this);
	}
};

Create_view_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitCreate_view_stmt(this);
	}
};

Create_view_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitCreate_view_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Create_view_stmtContext = Create_view_stmtContext;

SQLiteParser.prototype.create_view_stmt = function() {

    var localctx = new Create_view_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SQLiteParser.RULE_create_view_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 481;
        this.match(SQLiteParser.K_CREATE);
        this.state = 483;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_TEMP || _la===SQLiteParser.K_TEMPORARY) {
            this.state = 482;
            _la = this._input.LA(1);
            if(!(_la===SQLiteParser.K_TEMP || _la===SQLiteParser.K_TEMPORARY)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 485;
        this.match(SQLiteParser.K_VIEW);
        this.state = 489;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        if(la_===1) {
            this.state = 486;
            this.match(SQLiteParser.K_IF);
            this.state = 487;
            this.match(SQLiteParser.K_NOT);
            this.state = 488;
            this.match(SQLiteParser.K_EXISTS);

        }
        this.state = 494;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 491;
            this.database_name();
            this.state = 492;
            this.match(SQLiteParser.DOT);

        }
        this.state = 496;
        this.view_name();
        this.state = 497;
        this.match(SQLiteParser.K_AS);
        this.state = 498;
        this.select_stmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Create_virtual_table_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_create_virtual_table_stmt;
    return this;
}

Create_virtual_table_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Create_virtual_table_stmtContext.prototype.constructor = Create_virtual_table_stmtContext;

Create_virtual_table_stmtContext.prototype.K_CREATE = function() {
    return this.getToken(SQLiteParser.K_CREATE, 0);
};

Create_virtual_table_stmtContext.prototype.K_VIRTUAL = function() {
    return this.getToken(SQLiteParser.K_VIRTUAL, 0);
};

Create_virtual_table_stmtContext.prototype.K_TABLE = function() {
    return this.getToken(SQLiteParser.K_TABLE, 0);
};

Create_virtual_table_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Create_virtual_table_stmtContext.prototype.K_USING = function() {
    return this.getToken(SQLiteParser.K_USING, 0);
};

Create_virtual_table_stmtContext.prototype.module_name = function() {
    return this.getTypedRuleContext(Module_nameContext,0);
};

Create_virtual_table_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLiteParser.K_IF, 0);
};

Create_virtual_table_stmtContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

Create_virtual_table_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLiteParser.K_EXISTS, 0);
};

Create_virtual_table_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Create_virtual_table_stmtContext.prototype.module_argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Module_argumentContext);
    } else {
        return this.getTypedRuleContext(Module_argumentContext,i);
    }
};

Create_virtual_table_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterCreate_virtual_table_stmt(this);
	}
};

Create_virtual_table_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitCreate_virtual_table_stmt(this);
	}
};

Create_virtual_table_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitCreate_virtual_table_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Create_virtual_table_stmtContext = Create_virtual_table_stmtContext;

SQLiteParser.prototype.create_virtual_table_stmt = function() {

    var localctx = new Create_virtual_table_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SQLiteParser.RULE_create_virtual_table_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this.match(SQLiteParser.K_CREATE);
        this.state = 501;
        this.match(SQLiteParser.K_VIRTUAL);
        this.state = 502;
        this.match(SQLiteParser.K_TABLE);
        this.state = 506;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        if(la_===1) {
            this.state = 503;
            this.match(SQLiteParser.K_IF);
            this.state = 504;
            this.match(SQLiteParser.K_NOT);
            this.state = 505;
            this.match(SQLiteParser.K_EXISTS);

        }
        this.state = 511;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        if(la_===1) {
            this.state = 508;
            this.database_name();
            this.state = 509;
            this.match(SQLiteParser.DOT);

        }
        this.state = 513;
        this.table_name();
        this.state = 514;
        this.match(SQLiteParser.K_USING);
        this.state = 515;
        this.module_name();
        this.state = 527;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.OPEN_PAR) {
            this.state = 516;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 517;
            this.module_argument();
            this.state = 522;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 518;
                this.match(SQLiteParser.COMMA);
                this.state = 519;
                this.module_argument();
                this.state = 524;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 525;
            this.match(SQLiteParser.CLOSE_PAR);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delete_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_delete_stmt;
    return this;
}

Delete_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delete_stmtContext.prototype.constructor = Delete_stmtContext;

Delete_stmtContext.prototype.K_DELETE = function() {
    return this.getToken(SQLiteParser.K_DELETE, 0);
};

Delete_stmtContext.prototype.K_FROM = function() {
    return this.getToken(SQLiteParser.K_FROM, 0);
};

Delete_stmtContext.prototype.qualified_table_name = function() {
    return this.getTypedRuleContext(Qualified_table_nameContext,0);
};

Delete_stmtContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Delete_stmtContext.prototype.K_WHERE = function() {
    return this.getToken(SQLiteParser.K_WHERE, 0);
};

Delete_stmtContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Delete_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterDelete_stmt(this);
	}
};

Delete_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitDelete_stmt(this);
	}
};

Delete_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitDelete_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Delete_stmtContext = Delete_stmtContext;

SQLiteParser.prototype.delete_stmt = function() {

    var localctx = new Delete_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SQLiteParser.RULE_delete_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 530;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WITH) {
            this.state = 529;
            this.with_clause();
        }

        this.state = 532;
        this.match(SQLiteParser.K_DELETE);
        this.state = 533;
        this.match(SQLiteParser.K_FROM);
        this.state = 534;
        this.qualified_table_name();
        this.state = 537;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WHERE) {
            this.state = 535;
            this.match(SQLiteParser.K_WHERE);
            this.state = 536;
            this.expr(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Delete_stmt_limitedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_delete_stmt_limited;
    return this;
}

Delete_stmt_limitedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Delete_stmt_limitedContext.prototype.constructor = Delete_stmt_limitedContext;

Delete_stmt_limitedContext.prototype.K_DELETE = function() {
    return this.getToken(SQLiteParser.K_DELETE, 0);
};

Delete_stmt_limitedContext.prototype.K_FROM = function() {
    return this.getToken(SQLiteParser.K_FROM, 0);
};

Delete_stmt_limitedContext.prototype.qualified_table_name = function() {
    return this.getTypedRuleContext(Qualified_table_nameContext,0);
};

Delete_stmt_limitedContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Delete_stmt_limitedContext.prototype.K_WHERE = function() {
    return this.getToken(SQLiteParser.K_WHERE, 0);
};

Delete_stmt_limitedContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Delete_stmt_limitedContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLiteParser.K_LIMIT, 0);
};

Delete_stmt_limitedContext.prototype.K_ORDER = function() {
    return this.getToken(SQLiteParser.K_ORDER, 0);
};

Delete_stmt_limitedContext.prototype.K_BY = function() {
    return this.getToken(SQLiteParser.K_BY, 0);
};

Delete_stmt_limitedContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Delete_stmt_limitedContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLiteParser.K_OFFSET, 0);
};

Delete_stmt_limitedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterDelete_stmt_limited(this);
	}
};

Delete_stmt_limitedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitDelete_stmt_limited(this);
	}
};

Delete_stmt_limitedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitDelete_stmt_limited(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Delete_stmt_limitedContext = Delete_stmt_limitedContext;

SQLiteParser.prototype.delete_stmt_limited = function() {

    var localctx = new Delete_stmt_limitedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SQLiteParser.RULE_delete_stmt_limited);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 540;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WITH) {
            this.state = 539;
            this.with_clause();
        }

        this.state = 542;
        this.match(SQLiteParser.K_DELETE);
        this.state = 543;
        this.match(SQLiteParser.K_FROM);
        this.state = 544;
        this.qualified_table_name();
        this.state = 547;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WHERE) {
            this.state = 545;
            this.match(SQLiteParser.K_WHERE);
            this.state = 546;
            this.expr(0);
        }

        this.state = 567;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_LIMIT || _la===SQLiteParser.K_ORDER) {
            this.state = 559;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_ORDER) {
                this.state = 549;
                this.match(SQLiteParser.K_ORDER);
                this.state = 550;
                this.match(SQLiteParser.K_BY);
                this.state = 551;
                this.ordering_term();
                this.state = 556;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLiteParser.COMMA) {
                    this.state = 552;
                    this.match(SQLiteParser.COMMA);
                    this.state = 553;
                    this.ordering_term();
                    this.state = 558;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 561;
            this.match(SQLiteParser.K_LIMIT);
            this.state = 562;
            this.expr(0);
            this.state = 565;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET) {
                this.state = 563;
                _la = this._input.LA(1);
                if(!(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 564;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Detach_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_detach_stmt;
    return this;
}

Detach_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Detach_stmtContext.prototype.constructor = Detach_stmtContext;

Detach_stmtContext.prototype.K_DETACH = function() {
    return this.getToken(SQLiteParser.K_DETACH, 0);
};

Detach_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Detach_stmtContext.prototype.K_DATABASE = function() {
    return this.getToken(SQLiteParser.K_DATABASE, 0);
};

Detach_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterDetach_stmt(this);
	}
};

Detach_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitDetach_stmt(this);
	}
};

Detach_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitDetach_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Detach_stmtContext = Detach_stmtContext;

SQLiteParser.prototype.detach_stmt = function() {

    var localctx = new Detach_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SQLiteParser.RULE_detach_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.match(SQLiteParser.K_DETACH);
        this.state = 571;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        if(la_===1) {
            this.state = 570;
            this.match(SQLiteParser.K_DATABASE);

        }
        this.state = 573;
        this.database_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_index_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_drop_index_stmt;
    return this;
}

Drop_index_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_index_stmtContext.prototype.constructor = Drop_index_stmtContext;

Drop_index_stmtContext.prototype.K_DROP = function() {
    return this.getToken(SQLiteParser.K_DROP, 0);
};

Drop_index_stmtContext.prototype.K_INDEX = function() {
    return this.getToken(SQLiteParser.K_INDEX, 0);
};

Drop_index_stmtContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Drop_index_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLiteParser.K_IF, 0);
};

Drop_index_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLiteParser.K_EXISTS, 0);
};

Drop_index_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Drop_index_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterDrop_index_stmt(this);
	}
};

Drop_index_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitDrop_index_stmt(this);
	}
};

Drop_index_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitDrop_index_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Drop_index_stmtContext = Drop_index_stmtContext;

SQLiteParser.prototype.drop_index_stmt = function() {

    var localctx = new Drop_index_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SQLiteParser.RULE_drop_index_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this.match(SQLiteParser.K_DROP);
        this.state = 576;
        this.match(SQLiteParser.K_INDEX);
        this.state = 579;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 577;
            this.match(SQLiteParser.K_IF);
            this.state = 578;
            this.match(SQLiteParser.K_EXISTS);

        }
        this.state = 584;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 581;
            this.database_name();
            this.state = 582;
            this.match(SQLiteParser.DOT);

        }
        this.state = 586;
        this.index_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_table_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_drop_table_stmt;
    return this;
}

Drop_table_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_table_stmtContext.prototype.constructor = Drop_table_stmtContext;

Drop_table_stmtContext.prototype.K_DROP = function() {
    return this.getToken(SQLiteParser.K_DROP, 0);
};

Drop_table_stmtContext.prototype.K_TABLE = function() {
    return this.getToken(SQLiteParser.K_TABLE, 0);
};

Drop_table_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Drop_table_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLiteParser.K_IF, 0);
};

Drop_table_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLiteParser.K_EXISTS, 0);
};

Drop_table_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Drop_table_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterDrop_table_stmt(this);
	}
};

Drop_table_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitDrop_table_stmt(this);
	}
};

Drop_table_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitDrop_table_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Drop_table_stmtContext = Drop_table_stmtContext;

SQLiteParser.prototype.drop_table_stmt = function() {

    var localctx = new Drop_table_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SQLiteParser.RULE_drop_table_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 588;
        this.match(SQLiteParser.K_DROP);
        this.state = 589;
        this.match(SQLiteParser.K_TABLE);
        this.state = 592;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        if(la_===1) {
            this.state = 590;
            this.match(SQLiteParser.K_IF);
            this.state = 591;
            this.match(SQLiteParser.K_EXISTS);

        }
        this.state = 597;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 594;
            this.database_name();
            this.state = 595;
            this.match(SQLiteParser.DOT);

        }
        this.state = 599;
        this.table_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_trigger_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_drop_trigger_stmt;
    return this;
}

Drop_trigger_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_trigger_stmtContext.prototype.constructor = Drop_trigger_stmtContext;

Drop_trigger_stmtContext.prototype.K_DROP = function() {
    return this.getToken(SQLiteParser.K_DROP, 0);
};

Drop_trigger_stmtContext.prototype.K_TRIGGER = function() {
    return this.getToken(SQLiteParser.K_TRIGGER, 0);
};

Drop_trigger_stmtContext.prototype.trigger_name = function() {
    return this.getTypedRuleContext(Trigger_nameContext,0);
};

Drop_trigger_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLiteParser.K_IF, 0);
};

Drop_trigger_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLiteParser.K_EXISTS, 0);
};

Drop_trigger_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Drop_trigger_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterDrop_trigger_stmt(this);
	}
};

Drop_trigger_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitDrop_trigger_stmt(this);
	}
};

Drop_trigger_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitDrop_trigger_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Drop_trigger_stmtContext = Drop_trigger_stmtContext;

SQLiteParser.prototype.drop_trigger_stmt = function() {

    var localctx = new Drop_trigger_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SQLiteParser.RULE_drop_trigger_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 601;
        this.match(SQLiteParser.K_DROP);
        this.state = 602;
        this.match(SQLiteParser.K_TRIGGER);
        this.state = 605;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        if(la_===1) {
            this.state = 603;
            this.match(SQLiteParser.K_IF);
            this.state = 604;
            this.match(SQLiteParser.K_EXISTS);

        }
        this.state = 610;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        if(la_===1) {
            this.state = 607;
            this.database_name();
            this.state = 608;
            this.match(SQLiteParser.DOT);

        }
        this.state = 612;
        this.trigger_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Drop_view_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_drop_view_stmt;
    return this;
}

Drop_view_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Drop_view_stmtContext.prototype.constructor = Drop_view_stmtContext;

Drop_view_stmtContext.prototype.K_DROP = function() {
    return this.getToken(SQLiteParser.K_DROP, 0);
};

Drop_view_stmtContext.prototype.K_VIEW = function() {
    return this.getToken(SQLiteParser.K_VIEW, 0);
};

Drop_view_stmtContext.prototype.view_name = function() {
    return this.getTypedRuleContext(View_nameContext,0);
};

Drop_view_stmtContext.prototype.K_IF = function() {
    return this.getToken(SQLiteParser.K_IF, 0);
};

Drop_view_stmtContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLiteParser.K_EXISTS, 0);
};

Drop_view_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Drop_view_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterDrop_view_stmt(this);
	}
};

Drop_view_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitDrop_view_stmt(this);
	}
};

Drop_view_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitDrop_view_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Drop_view_stmtContext = Drop_view_stmtContext;

SQLiteParser.prototype.drop_view_stmt = function() {

    var localctx = new Drop_view_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SQLiteParser.RULE_drop_view_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 614;
        this.match(SQLiteParser.K_DROP);
        this.state = 615;
        this.match(SQLiteParser.K_VIEW);
        this.state = 618;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
        if(la_===1) {
            this.state = 616;
            this.match(SQLiteParser.K_IF);
            this.state = 617;
            this.match(SQLiteParser.K_EXISTS);

        }
        this.state = 623;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        if(la_===1) {
            this.state = 620;
            this.database_name();
            this.state = 621;
            this.match(SQLiteParser.DOT);

        }
        this.state = 625;
        this.view_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Factored_select_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_factored_select_stmt;
    return this;
}

Factored_select_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Factored_select_stmtContext.prototype.constructor = Factored_select_stmtContext;

Factored_select_stmtContext.prototype.select_core = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_coreContext);
    } else {
        return this.getTypedRuleContext(Select_coreContext,i);
    }
};

Factored_select_stmtContext.prototype.K_WITH = function() {
    return this.getToken(SQLiteParser.K_WITH, 0);
};

Factored_select_stmtContext.prototype.common_table_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Common_table_expressionContext);
    } else {
        return this.getTypedRuleContext(Common_table_expressionContext,i);
    }
};

Factored_select_stmtContext.prototype.compound_operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compound_operatorContext);
    } else {
        return this.getTypedRuleContext(Compound_operatorContext,i);
    }
};

Factored_select_stmtContext.prototype.K_ORDER = function() {
    return this.getToken(SQLiteParser.K_ORDER, 0);
};

Factored_select_stmtContext.prototype.K_BY = function() {
    return this.getToken(SQLiteParser.K_BY, 0);
};

Factored_select_stmtContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Factored_select_stmtContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLiteParser.K_LIMIT, 0);
};

Factored_select_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Factored_select_stmtContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLiteParser.K_RECURSIVE, 0);
};

Factored_select_stmtContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLiteParser.K_OFFSET, 0);
};

Factored_select_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterFactored_select_stmt(this);
	}
};

Factored_select_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitFactored_select_stmt(this);
	}
};

Factored_select_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitFactored_select_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Factored_select_stmtContext = Factored_select_stmtContext;

SQLiteParser.prototype.factored_select_stmt = function() {

    var localctx = new Factored_select_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SQLiteParser.RULE_factored_select_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WITH) {
            this.state = 627;
            this.match(SQLiteParser.K_WITH);
            this.state = 629;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
            if(la_===1) {
                this.state = 628;
                this.match(SQLiteParser.K_RECURSIVE);

            }
            this.state = 631;
            this.common_table_expression();
            this.state = 636;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 632;
                this.match(SQLiteParser.COMMA);
                this.state = 633;
                this.common_table_expression();
                this.state = 638;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 641;
        this.select_core();
        this.state = 647;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLiteParser.K_EXCEPT || _la===SQLiteParser.K_INTERSECT || _la===SQLiteParser.K_UNION) {
            this.state = 642;
            this.compound_operator();
            this.state = 643;
            this.select_core();
            this.state = 649;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 660;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_ORDER) {
            this.state = 650;
            this.match(SQLiteParser.K_ORDER);
            this.state = 651;
            this.match(SQLiteParser.K_BY);
            this.state = 652;
            this.ordering_term();
            this.state = 657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 653;
                this.match(SQLiteParser.COMMA);
                this.state = 654;
                this.ordering_term();
                this.state = 659;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 668;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_LIMIT) {
            this.state = 662;
            this.match(SQLiteParser.K_LIMIT);
            this.state = 663;
            this.expr(0);
            this.state = 666;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET) {
                this.state = 664;
                _la = this._input.LA(1);
                if(!(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 665;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Insert_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_insert_stmt;
    return this;
}

Insert_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Insert_stmtContext.prototype.constructor = Insert_stmtContext;

Insert_stmtContext.prototype.K_INTO = function() {
    return this.getToken(SQLiteParser.K_INTO, 0);
};

Insert_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Insert_stmtContext.prototype.K_INSERT = function() {
    return this.getToken(SQLiteParser.K_INSERT, 0);
};

Insert_stmtContext.prototype.K_REPLACE = function() {
    return this.getToken(SQLiteParser.K_REPLACE, 0);
};

Insert_stmtContext.prototype.K_OR = function() {
    return this.getToken(SQLiteParser.K_OR, 0);
};

Insert_stmtContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLiteParser.K_ROLLBACK, 0);
};

Insert_stmtContext.prototype.K_ABORT = function() {
    return this.getToken(SQLiteParser.K_ABORT, 0);
};

Insert_stmtContext.prototype.K_FAIL = function() {
    return this.getToken(SQLiteParser.K_FAIL, 0);
};

Insert_stmtContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLiteParser.K_IGNORE, 0);
};

Insert_stmtContext.prototype.K_VALUES = function() {
    return this.getToken(SQLiteParser.K_VALUES, 0);
};

Insert_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Insert_stmtContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Insert_stmtContext.prototype.K_DEFAULT = function() {
    return this.getToken(SQLiteParser.K_DEFAULT, 0);
};

Insert_stmtContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Insert_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Insert_stmtContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Insert_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterInsert_stmt(this);
	}
};

Insert_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitInsert_stmt(this);
	}
};

Insert_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitInsert_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Insert_stmtContext = Insert_stmtContext;

SQLiteParser.prototype.insert_stmt = function() {

    var localctx = new Insert_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SQLiteParser.RULE_insert_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WITH) {
            this.state = 670;
            this.with_clause();
        }

        this.state = 690;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        switch(la_) {
        case 1:
            this.state = 673;
            this.match(SQLiteParser.K_INSERT);
            break;

        case 2:
            this.state = 674;
            this.match(SQLiteParser.K_REPLACE);
            break;

        case 3:
            this.state = 675;
            this.match(SQLiteParser.K_INSERT);
            this.state = 676;
            this.match(SQLiteParser.K_OR);
            this.state = 677;
            this.match(SQLiteParser.K_REPLACE);
            break;

        case 4:
            this.state = 678;
            this.match(SQLiteParser.K_INSERT);
            this.state = 679;
            this.match(SQLiteParser.K_OR);
            this.state = 680;
            this.match(SQLiteParser.K_ROLLBACK);
            break;

        case 5:
            this.state = 681;
            this.match(SQLiteParser.K_INSERT);
            this.state = 682;
            this.match(SQLiteParser.K_OR);
            this.state = 683;
            this.match(SQLiteParser.K_ABORT);
            break;

        case 6:
            this.state = 684;
            this.match(SQLiteParser.K_INSERT);
            this.state = 685;
            this.match(SQLiteParser.K_OR);
            this.state = 686;
            this.match(SQLiteParser.K_FAIL);
            break;

        case 7:
            this.state = 687;
            this.match(SQLiteParser.K_INSERT);
            this.state = 688;
            this.match(SQLiteParser.K_OR);
            this.state = 689;
            this.match(SQLiteParser.K_IGNORE);
            break;

        }
        this.state = 692;
        this.match(SQLiteParser.K_INTO);
        this.state = 696;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        if(la_===1) {
            this.state = 693;
            this.database_name();
            this.state = 694;
            this.match(SQLiteParser.DOT);

        }
        this.state = 698;
        this.table_name();
        this.state = 710;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.OPEN_PAR) {
            this.state = 699;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 700;
            this.column_name();
            this.state = 705;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 701;
                this.match(SQLiteParser.COMMA);
                this.state = 702;
                this.column_name();
                this.state = 707;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 708;
            this.match(SQLiteParser.CLOSE_PAR);
        }

        this.state = 743;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
        switch(la_) {
        case 1:
            this.state = 712;
            this.match(SQLiteParser.K_VALUES);
            this.state = 713;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 714;
            this.expr(0);
            this.state = 719;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 715;
                this.match(SQLiteParser.COMMA);
                this.state = 716;
                this.expr(0);
                this.state = 721;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 722;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 737;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 723;
                this.match(SQLiteParser.COMMA);
                this.state = 724;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 725;
                this.expr(0);
                this.state = 730;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLiteParser.COMMA) {
                    this.state = 726;
                    this.match(SQLiteParser.COMMA);
                    this.state = 727;
                    this.expr(0);
                    this.state = 732;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 733;
                this.match(SQLiteParser.CLOSE_PAR);
                this.state = 739;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.state = 740;
            this.select_stmt();
            break;

        case 3:
            this.state = 741;
            this.match(SQLiteParser.K_DEFAULT);
            this.state = 742;
            this.match(SQLiteParser.K_VALUES);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_pragma_stmt;
    return this;
}

Pragma_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_stmtContext.prototype.constructor = Pragma_stmtContext;

Pragma_stmtContext.prototype.K_PRAGMA = function() {
    return this.getToken(SQLiteParser.K_PRAGMA, 0);
};

Pragma_stmtContext.prototype.pragma_name = function() {
    return this.getTypedRuleContext(Pragma_nameContext,0);
};

Pragma_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Pragma_stmtContext.prototype.pragma_value = function() {
    return this.getTypedRuleContext(Pragma_valueContext,0);
};

Pragma_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterPragma_stmt(this);
	}
};

Pragma_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitPragma_stmt(this);
	}
};

Pragma_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitPragma_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Pragma_stmtContext = Pragma_stmtContext;

SQLiteParser.prototype.pragma_stmt = function() {

    var localctx = new Pragma_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SQLiteParser.RULE_pragma_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 745;
        this.match(SQLiteParser.K_PRAGMA);
        this.state = 749;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        if(la_===1) {
            this.state = 746;
            this.database_name();
            this.state = 747;
            this.match(SQLiteParser.DOT);

        }
        this.state = 751;
        this.pragma_name();
        this.state = 758;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case SQLiteParser.ASSIGN:
        	this.state = 752;
        	this.match(SQLiteParser.ASSIGN);
        	this.state = 753;
        	this.pragma_value();
        	break;
        case SQLiteParser.OPEN_PAR:
        	this.state = 754;
        	this.match(SQLiteParser.OPEN_PAR);
        	this.state = 755;
        	this.pragma_value();
        	this.state = 756;
        	this.match(SQLiteParser.CLOSE_PAR);
        	break;
        case SQLiteParser.EOF:
        case SQLiteParser.SCOL:
        case SQLiteParser.K_ALTER:
        case SQLiteParser.K_ANALYZE:
        case SQLiteParser.K_ATTACH:
        case SQLiteParser.K_BEGIN:
        case SQLiteParser.K_COMMIT:
        case SQLiteParser.K_CREATE:
        case SQLiteParser.K_DELETE:
        case SQLiteParser.K_DETACH:
        case SQLiteParser.K_DROP:
        case SQLiteParser.K_END:
        case SQLiteParser.K_EXPLAIN:
        case SQLiteParser.K_INSERT:
        case SQLiteParser.K_PRAGMA:
        case SQLiteParser.K_REINDEX:
        case SQLiteParser.K_RELEASE:
        case SQLiteParser.K_REPLACE:
        case SQLiteParser.K_ROLLBACK:
        case SQLiteParser.K_SAVEPOINT:
        case SQLiteParser.K_SELECT:
        case SQLiteParser.K_UPDATE:
        case SQLiteParser.K_VACUUM:
        case SQLiteParser.K_VALUES:
        case SQLiteParser.K_WITH:
        case SQLiteParser.UNEXPECTED_CHAR:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Reindex_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_reindex_stmt;
    return this;
}

Reindex_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reindex_stmtContext.prototype.constructor = Reindex_stmtContext;

Reindex_stmtContext.prototype.K_REINDEX = function() {
    return this.getToken(SQLiteParser.K_REINDEX, 0);
};

Reindex_stmtContext.prototype.collation_name = function() {
    return this.getTypedRuleContext(Collation_nameContext,0);
};

Reindex_stmtContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Reindex_stmtContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Reindex_stmtContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Reindex_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterReindex_stmt(this);
	}
};

Reindex_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitReindex_stmt(this);
	}
};

Reindex_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitReindex_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Reindex_stmtContext = Reindex_stmtContext;

SQLiteParser.prototype.reindex_stmt = function() {

    var localctx = new Reindex_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SQLiteParser.RULE_reindex_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 760;
        this.match(SQLiteParser.K_REINDEX);
        this.state = 771;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        if(la_===1) {
            this.state = 761;
            this.collation_name();

        } else if(la_===2) {
            this.state = 765;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
            if(la_===1) {
                this.state = 762;
                this.database_name();
                this.state = 763;
                this.match(SQLiteParser.DOT);

            }
            this.state = 769;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
            switch(la_) {
            case 1:
                this.state = 767;
                this.table_name();
                break;

            case 2:
                this.state = 768;
                this.index_name();
                break;

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Release_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_release_stmt;
    return this;
}

Release_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Release_stmtContext.prototype.constructor = Release_stmtContext;

Release_stmtContext.prototype.K_RELEASE = function() {
    return this.getToken(SQLiteParser.K_RELEASE, 0);
};

Release_stmtContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Release_stmtContext.prototype.K_SAVEPOINT = function() {
    return this.getToken(SQLiteParser.K_SAVEPOINT, 0);
};

Release_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterRelease_stmt(this);
	}
};

Release_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitRelease_stmt(this);
	}
};

Release_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitRelease_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Release_stmtContext = Release_stmtContext;

SQLiteParser.prototype.release_stmt = function() {

    var localctx = new Release_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SQLiteParser.RULE_release_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 773;
        this.match(SQLiteParser.K_RELEASE);
        this.state = 775;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        if(la_===1) {
            this.state = 774;
            this.match(SQLiteParser.K_SAVEPOINT);

        }
        this.state = 777;
        this.savepoint_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rollback_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_rollback_stmt;
    return this;
}

Rollback_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rollback_stmtContext.prototype.constructor = Rollback_stmtContext;

Rollback_stmtContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLiteParser.K_ROLLBACK, 0);
};

Rollback_stmtContext.prototype.K_TRANSACTION = function() {
    return this.getToken(SQLiteParser.K_TRANSACTION, 0);
};

Rollback_stmtContext.prototype.K_TO = function() {
    return this.getToken(SQLiteParser.K_TO, 0);
};

Rollback_stmtContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Rollback_stmtContext.prototype.transaction_name = function() {
    return this.getTypedRuleContext(Transaction_nameContext,0);
};

Rollback_stmtContext.prototype.K_SAVEPOINT = function() {
    return this.getToken(SQLiteParser.K_SAVEPOINT, 0);
};

Rollback_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterRollback_stmt(this);
	}
};

Rollback_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitRollback_stmt(this);
	}
};

Rollback_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitRollback_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Rollback_stmtContext = Rollback_stmtContext;

SQLiteParser.prototype.rollback_stmt = function() {

    var localctx = new Rollback_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SQLiteParser.RULE_rollback_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 779;
        this.match(SQLiteParser.K_ROLLBACK);
        this.state = 784;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_TRANSACTION) {
            this.state = 780;
            this.match(SQLiteParser.K_TRANSACTION);
            this.state = 782;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
            if(la_===1) {
                this.state = 781;
                this.transaction_name();

            }
        }

        this.state = 791;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_TO) {
            this.state = 786;
            this.match(SQLiteParser.K_TO);
            this.state = 788;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
            if(la_===1) {
                this.state = 787;
                this.match(SQLiteParser.K_SAVEPOINT);

            }
            this.state = 790;
            this.savepoint_name();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Savepoint_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_savepoint_stmt;
    return this;
}

Savepoint_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Savepoint_stmtContext.prototype.constructor = Savepoint_stmtContext;

Savepoint_stmtContext.prototype.K_SAVEPOINT = function() {
    return this.getToken(SQLiteParser.K_SAVEPOINT, 0);
};

Savepoint_stmtContext.prototype.savepoint_name = function() {
    return this.getTypedRuleContext(Savepoint_nameContext,0);
};

Savepoint_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterSavepoint_stmt(this);
	}
};

Savepoint_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitSavepoint_stmt(this);
	}
};

Savepoint_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitSavepoint_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Savepoint_stmtContext = Savepoint_stmtContext;

SQLiteParser.prototype.savepoint_stmt = function() {

    var localctx = new Savepoint_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SQLiteParser.RULE_savepoint_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 793;
        this.match(SQLiteParser.K_SAVEPOINT);
        this.state = 794;
        this.savepoint_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_select_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_simple_select_stmt;
    return this;
}

Simple_select_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_select_stmtContext.prototype.constructor = Simple_select_stmtContext;

Simple_select_stmtContext.prototype.select_core = function() {
    return this.getTypedRuleContext(Select_coreContext,0);
};

Simple_select_stmtContext.prototype.K_WITH = function() {
    return this.getToken(SQLiteParser.K_WITH, 0);
};

Simple_select_stmtContext.prototype.common_table_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Common_table_expressionContext);
    } else {
        return this.getTypedRuleContext(Common_table_expressionContext,i);
    }
};

Simple_select_stmtContext.prototype.K_ORDER = function() {
    return this.getToken(SQLiteParser.K_ORDER, 0);
};

Simple_select_stmtContext.prototype.K_BY = function() {
    return this.getToken(SQLiteParser.K_BY, 0);
};

Simple_select_stmtContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Simple_select_stmtContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLiteParser.K_LIMIT, 0);
};

Simple_select_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Simple_select_stmtContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLiteParser.K_RECURSIVE, 0);
};

Simple_select_stmtContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLiteParser.K_OFFSET, 0);
};

Simple_select_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterSimple_select_stmt(this);
	}
};

Simple_select_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitSimple_select_stmt(this);
	}
};

Simple_select_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitSimple_select_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Simple_select_stmtContext = Simple_select_stmtContext;

SQLiteParser.prototype.simple_select_stmt = function() {

    var localctx = new Simple_select_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SQLiteParser.RULE_simple_select_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 808;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WITH) {
            this.state = 796;
            this.match(SQLiteParser.K_WITH);
            this.state = 798;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
            if(la_===1) {
                this.state = 797;
                this.match(SQLiteParser.K_RECURSIVE);

            }
            this.state = 800;
            this.common_table_expression();
            this.state = 805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 801;
                this.match(SQLiteParser.COMMA);
                this.state = 802;
                this.common_table_expression();
                this.state = 807;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 810;
        this.select_core();
        this.state = 821;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_ORDER) {
            this.state = 811;
            this.match(SQLiteParser.K_ORDER);
            this.state = 812;
            this.match(SQLiteParser.K_BY);
            this.state = 813;
            this.ordering_term();
            this.state = 818;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 814;
                this.match(SQLiteParser.COMMA);
                this.state = 815;
                this.ordering_term();
                this.state = 820;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 829;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_LIMIT) {
            this.state = 823;
            this.match(SQLiteParser.K_LIMIT);
            this.state = 824;
            this.expr(0);
            this.state = 827;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET) {
                this.state = 825;
                _la = this._input.LA(1);
                if(!(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 826;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_select_stmt;
    return this;
}

Select_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_stmtContext.prototype.constructor = Select_stmtContext;

Select_stmtContext.prototype.select_or_values = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_or_valuesContext);
    } else {
        return this.getTypedRuleContext(Select_or_valuesContext,i);
    }
};

Select_stmtContext.prototype.K_WITH = function() {
    return this.getToken(SQLiteParser.K_WITH, 0);
};

Select_stmtContext.prototype.common_table_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Common_table_expressionContext);
    } else {
        return this.getTypedRuleContext(Common_table_expressionContext,i);
    }
};

Select_stmtContext.prototype.compound_operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compound_operatorContext);
    } else {
        return this.getTypedRuleContext(Compound_operatorContext,i);
    }
};

Select_stmtContext.prototype.K_ORDER = function() {
    return this.getToken(SQLiteParser.K_ORDER, 0);
};

Select_stmtContext.prototype.K_BY = function() {
    return this.getToken(SQLiteParser.K_BY, 0);
};

Select_stmtContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Select_stmtContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLiteParser.K_LIMIT, 0);
};

Select_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Select_stmtContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLiteParser.K_RECURSIVE, 0);
};

Select_stmtContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLiteParser.K_OFFSET, 0);
};

Select_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterSelect_stmt(this);
	}
};

Select_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitSelect_stmt(this);
	}
};

Select_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitSelect_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Select_stmtContext = Select_stmtContext;

SQLiteParser.prototype.select_stmt = function() {

    var localctx = new Select_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SQLiteParser.RULE_select_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 843;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WITH) {
            this.state = 831;
            this.match(SQLiteParser.K_WITH);
            this.state = 833;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
            if(la_===1) {
                this.state = 832;
                this.match(SQLiteParser.K_RECURSIVE);

            }
            this.state = 835;
            this.common_table_expression();
            this.state = 840;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 836;
                this.match(SQLiteParser.COMMA);
                this.state = 837;
                this.common_table_expression();
                this.state = 842;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 845;
        this.select_or_values();
        this.state = 851;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLiteParser.K_EXCEPT || _la===SQLiteParser.K_INTERSECT || _la===SQLiteParser.K_UNION) {
            this.state = 846;
            this.compound_operator();
            this.state = 847;
            this.select_or_values();
            this.state = 853;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 864;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_ORDER) {
            this.state = 854;
            this.match(SQLiteParser.K_ORDER);
            this.state = 855;
            this.match(SQLiteParser.K_BY);
            this.state = 856;
            this.ordering_term();
            this.state = 861;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 857;
                this.match(SQLiteParser.COMMA);
                this.state = 858;
                this.ordering_term();
                this.state = 863;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 872;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_LIMIT) {
            this.state = 866;
            this.match(SQLiteParser.K_LIMIT);
            this.state = 867;
            this.expr(0);
            this.state = 870;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET) {
                this.state = 868;
                _la = this._input.LA(1);
                if(!(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 869;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_or_valuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_select_or_values;
    return this;
}

Select_or_valuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_or_valuesContext.prototype.constructor = Select_or_valuesContext;

Select_or_valuesContext.prototype.K_SELECT = function() {
    return this.getToken(SQLiteParser.K_SELECT, 0);
};

Select_or_valuesContext.prototype.result_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Result_columnContext);
    } else {
        return this.getTypedRuleContext(Result_columnContext,i);
    }
};

Select_or_valuesContext.prototype.K_FROM = function() {
    return this.getToken(SQLiteParser.K_FROM, 0);
};

Select_or_valuesContext.prototype.K_WHERE = function() {
    return this.getToken(SQLiteParser.K_WHERE, 0);
};

Select_or_valuesContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Select_or_valuesContext.prototype.K_GROUP = function() {
    return this.getToken(SQLiteParser.K_GROUP, 0);
};

Select_or_valuesContext.prototype.K_BY = function() {
    return this.getToken(SQLiteParser.K_BY, 0);
};

Select_or_valuesContext.prototype.K_DISTINCT = function() {
    return this.getToken(SQLiteParser.K_DISTINCT, 0);
};

Select_or_valuesContext.prototype.K_ALL = function() {
    return this.getToken(SQLiteParser.K_ALL, 0);
};

Select_or_valuesContext.prototype.table_or_subquery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_or_subqueryContext);
    } else {
        return this.getTypedRuleContext(Table_or_subqueryContext,i);
    }
};

Select_or_valuesContext.prototype.join_clause = function() {
    return this.getTypedRuleContext(Join_clauseContext,0);
};

Select_or_valuesContext.prototype.K_HAVING = function() {
    return this.getToken(SQLiteParser.K_HAVING, 0);
};

Select_or_valuesContext.prototype.K_VALUES = function() {
    return this.getToken(SQLiteParser.K_VALUES, 0);
};

Select_or_valuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterSelect_or_values(this);
	}
};

Select_or_valuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitSelect_or_values(this);
	}
};

Select_or_valuesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitSelect_or_values(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Select_or_valuesContext = Select_or_valuesContext;

SQLiteParser.prototype.select_or_values = function() {

    var localctx = new Select_or_valuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SQLiteParser.RULE_select_or_values);
    var _la = 0; // Token type
    try {
        this.state = 948;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLiteParser.K_SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 874;
            this.match(SQLiteParser.K_SELECT);
            this.state = 876;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
            if(la_===1) {
                this.state = 875;
                _la = this._input.LA(1);
                if(!(_la===SQLiteParser.K_ALL || _la===SQLiteParser.K_DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 878;
            this.result_column();
            this.state = 883;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 879;
                this.match(SQLiteParser.COMMA);
                this.state = 880;
                this.result_column();
                this.state = 885;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 898;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_FROM) {
                this.state = 886;
                this.match(SQLiteParser.K_FROM);
                this.state = 896;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 887;
                    this.table_or_subquery();
                    this.state = 892;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===SQLiteParser.COMMA) {
                        this.state = 888;
                        this.match(SQLiteParser.COMMA);
                        this.state = 889;
                        this.table_or_subquery();
                        this.state = 894;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;

                case 2:
                    this.state = 895;
                    this.join_clause();
                    break;

                }
            }

            this.state = 902;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_WHERE) {
                this.state = 900;
                this.match(SQLiteParser.K_WHERE);
                this.state = 901;
                this.expr(0);
            }

            this.state = 918;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_GROUP) {
                this.state = 904;
                this.match(SQLiteParser.K_GROUP);
                this.state = 905;
                this.match(SQLiteParser.K_BY);
                this.state = 906;
                this.expr(0);
                this.state = 911;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLiteParser.COMMA) {
                    this.state = 907;
                    this.match(SQLiteParser.COMMA);
                    this.state = 908;
                    this.expr(0);
                    this.state = 913;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 916;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLiteParser.K_HAVING) {
                    this.state = 914;
                    this.match(SQLiteParser.K_HAVING);
                    this.state = 915;
                    this.expr(0);
                }

            }

            break;
        case SQLiteParser.K_VALUES:
            this.enterOuterAlt(localctx, 2);
            this.state = 920;
            this.match(SQLiteParser.K_VALUES);
            this.state = 921;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 922;
            this.expr(0);
            this.state = 927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 923;
                this.match(SQLiteParser.COMMA);
                this.state = 924;
                this.expr(0);
                this.state = 929;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 930;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 945;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 931;
                this.match(SQLiteParser.COMMA);
                this.state = 932;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 933;
                this.expr(0);
                this.state = 938;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLiteParser.COMMA) {
                    this.state = 934;
                    this.match(SQLiteParser.COMMA);
                    this.state = 935;
                    this.expr(0);
                    this.state = 940;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 941;
                this.match(SQLiteParser.CLOSE_PAR);
                this.state = 947;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_update_stmt;
    return this;
}

Update_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_stmtContext.prototype.constructor = Update_stmtContext;

Update_stmtContext.prototype.K_UPDATE = function() {
    return this.getToken(SQLiteParser.K_UPDATE, 0);
};

Update_stmtContext.prototype.qualified_table_name = function() {
    return this.getTypedRuleContext(Qualified_table_nameContext,0);
};

Update_stmtContext.prototype.K_SET = function() {
    return this.getToken(SQLiteParser.K_SET, 0);
};

Update_stmtContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Update_stmtContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Update_stmtContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Update_stmtContext.prototype.K_OR = function() {
    return this.getToken(SQLiteParser.K_OR, 0);
};

Update_stmtContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLiteParser.K_ROLLBACK, 0);
};

Update_stmtContext.prototype.K_ABORT = function() {
    return this.getToken(SQLiteParser.K_ABORT, 0);
};

Update_stmtContext.prototype.K_REPLACE = function() {
    return this.getToken(SQLiteParser.K_REPLACE, 0);
};

Update_stmtContext.prototype.K_FAIL = function() {
    return this.getToken(SQLiteParser.K_FAIL, 0);
};

Update_stmtContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLiteParser.K_IGNORE, 0);
};

Update_stmtContext.prototype.K_WHERE = function() {
    return this.getToken(SQLiteParser.K_WHERE, 0);
};

Update_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterUpdate_stmt(this);
	}
};

Update_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitUpdate_stmt(this);
	}
};

Update_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitUpdate_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Update_stmtContext = Update_stmtContext;

SQLiteParser.prototype.update_stmt = function() {

    var localctx = new Update_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SQLiteParser.RULE_update_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 951;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WITH) {
            this.state = 950;
            this.with_clause();
        }

        this.state = 953;
        this.match(SQLiteParser.K_UPDATE);
        this.state = 964;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
        if(la_===1) {
            this.state = 954;
            this.match(SQLiteParser.K_OR);
            this.state = 955;
            this.match(SQLiteParser.K_ROLLBACK);

        } else if(la_===2) {
            this.state = 956;
            this.match(SQLiteParser.K_OR);
            this.state = 957;
            this.match(SQLiteParser.K_ABORT);

        } else if(la_===3) {
            this.state = 958;
            this.match(SQLiteParser.K_OR);
            this.state = 959;
            this.match(SQLiteParser.K_REPLACE);

        } else if(la_===4) {
            this.state = 960;
            this.match(SQLiteParser.K_OR);
            this.state = 961;
            this.match(SQLiteParser.K_FAIL);

        } else if(la_===5) {
            this.state = 962;
            this.match(SQLiteParser.K_OR);
            this.state = 963;
            this.match(SQLiteParser.K_IGNORE);

        }
        this.state = 966;
        this.qualified_table_name();
        this.state = 967;
        this.match(SQLiteParser.K_SET);
        this.state = 968;
        this.column_name();
        this.state = 969;
        this.match(SQLiteParser.ASSIGN);
        this.state = 970;
        this.expr(0);
        this.state = 978;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLiteParser.COMMA) {
            this.state = 971;
            this.match(SQLiteParser.COMMA);
            this.state = 972;
            this.column_name();
            this.state = 973;
            this.match(SQLiteParser.ASSIGN);
            this.state = 974;
            this.expr(0);
            this.state = 980;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 983;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WHERE) {
            this.state = 981;
            this.match(SQLiteParser.K_WHERE);
            this.state = 982;
            this.expr(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_stmt_limitedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_update_stmt_limited;
    return this;
}

Update_stmt_limitedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_stmt_limitedContext.prototype.constructor = Update_stmt_limitedContext;

Update_stmt_limitedContext.prototype.K_UPDATE = function() {
    return this.getToken(SQLiteParser.K_UPDATE, 0);
};

Update_stmt_limitedContext.prototype.qualified_table_name = function() {
    return this.getTypedRuleContext(Qualified_table_nameContext,0);
};

Update_stmt_limitedContext.prototype.K_SET = function() {
    return this.getToken(SQLiteParser.K_SET, 0);
};

Update_stmt_limitedContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Update_stmt_limitedContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Update_stmt_limitedContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Update_stmt_limitedContext.prototype.K_OR = function() {
    return this.getToken(SQLiteParser.K_OR, 0);
};

Update_stmt_limitedContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLiteParser.K_ROLLBACK, 0);
};

Update_stmt_limitedContext.prototype.K_ABORT = function() {
    return this.getToken(SQLiteParser.K_ABORT, 0);
};

Update_stmt_limitedContext.prototype.K_REPLACE = function() {
    return this.getToken(SQLiteParser.K_REPLACE, 0);
};

Update_stmt_limitedContext.prototype.K_FAIL = function() {
    return this.getToken(SQLiteParser.K_FAIL, 0);
};

Update_stmt_limitedContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLiteParser.K_IGNORE, 0);
};

Update_stmt_limitedContext.prototype.K_WHERE = function() {
    return this.getToken(SQLiteParser.K_WHERE, 0);
};

Update_stmt_limitedContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLiteParser.K_LIMIT, 0);
};

Update_stmt_limitedContext.prototype.K_ORDER = function() {
    return this.getToken(SQLiteParser.K_ORDER, 0);
};

Update_stmt_limitedContext.prototype.K_BY = function() {
    return this.getToken(SQLiteParser.K_BY, 0);
};

Update_stmt_limitedContext.prototype.ordering_term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Ordering_termContext);
    } else {
        return this.getTypedRuleContext(Ordering_termContext,i);
    }
};

Update_stmt_limitedContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLiteParser.K_OFFSET, 0);
};

Update_stmt_limitedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterUpdate_stmt_limited(this);
	}
};

Update_stmt_limitedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitUpdate_stmt_limited(this);
	}
};

Update_stmt_limitedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitUpdate_stmt_limited(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Update_stmt_limitedContext = Update_stmt_limitedContext;

SQLiteParser.prototype.update_stmt_limited = function() {

    var localctx = new Update_stmt_limitedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SQLiteParser.RULE_update_stmt_limited);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WITH) {
            this.state = 985;
            this.with_clause();
        }

        this.state = 988;
        this.match(SQLiteParser.K_UPDATE);
        this.state = 999;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
        if(la_===1) {
            this.state = 989;
            this.match(SQLiteParser.K_OR);
            this.state = 990;
            this.match(SQLiteParser.K_ROLLBACK);

        } else if(la_===2) {
            this.state = 991;
            this.match(SQLiteParser.K_OR);
            this.state = 992;
            this.match(SQLiteParser.K_ABORT);

        } else if(la_===3) {
            this.state = 993;
            this.match(SQLiteParser.K_OR);
            this.state = 994;
            this.match(SQLiteParser.K_REPLACE);

        } else if(la_===4) {
            this.state = 995;
            this.match(SQLiteParser.K_OR);
            this.state = 996;
            this.match(SQLiteParser.K_FAIL);

        } else if(la_===5) {
            this.state = 997;
            this.match(SQLiteParser.K_OR);
            this.state = 998;
            this.match(SQLiteParser.K_IGNORE);

        }
        this.state = 1001;
        this.qualified_table_name();
        this.state = 1002;
        this.match(SQLiteParser.K_SET);
        this.state = 1003;
        this.column_name();
        this.state = 1004;
        this.match(SQLiteParser.ASSIGN);
        this.state = 1005;
        this.expr(0);
        this.state = 1013;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLiteParser.COMMA) {
            this.state = 1006;
            this.match(SQLiteParser.COMMA);
            this.state = 1007;
            this.column_name();
            this.state = 1008;
            this.match(SQLiteParser.ASSIGN);
            this.state = 1009;
            this.expr(0);
            this.state = 1015;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1018;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_WHERE) {
            this.state = 1016;
            this.match(SQLiteParser.K_WHERE);
            this.state = 1017;
            this.expr(0);
        }

        this.state = 1038;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_LIMIT || _la===SQLiteParser.K_ORDER) {
            this.state = 1030;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_ORDER) {
                this.state = 1020;
                this.match(SQLiteParser.K_ORDER);
                this.state = 1021;
                this.match(SQLiteParser.K_BY);
                this.state = 1022;
                this.ordering_term();
                this.state = 1027;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLiteParser.COMMA) {
                    this.state = 1023;
                    this.match(SQLiteParser.COMMA);
                    this.state = 1024;
                    this.ordering_term();
                    this.state = 1029;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 1032;
            this.match(SQLiteParser.K_LIMIT);
            this.state = 1033;
            this.expr(0);
            this.state = 1036;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET) {
                this.state = 1034;
                _la = this._input.LA(1);
                if(!(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_OFFSET)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1035;
                this.expr(0);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Vacuum_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_vacuum_stmt;
    return this;
}

Vacuum_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Vacuum_stmtContext.prototype.constructor = Vacuum_stmtContext;

Vacuum_stmtContext.prototype.K_VACUUM = function() {
    return this.getToken(SQLiteParser.K_VACUUM, 0);
};

Vacuum_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterVacuum_stmt(this);
	}
};

Vacuum_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitVacuum_stmt(this);
	}
};

Vacuum_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitVacuum_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Vacuum_stmtContext = Vacuum_stmtContext;

SQLiteParser.prototype.vacuum_stmt = function() {

    var localctx = new Vacuum_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SQLiteParser.RULE_vacuum_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1040;
        this.match(SQLiteParser.K_VACUUM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_defContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_column_def;
    return this;
}

Column_defContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_defContext.prototype.constructor = Column_defContext;

Column_defContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Column_defContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

Column_defContext.prototype.column_constraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_constraintContext);
    } else {
        return this.getTypedRuleContext(Column_constraintContext,i);
    }
};

Column_defContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterColumn_def(this);
	}
};

Column_defContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitColumn_def(this);
	}
};

Column_defContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitColumn_def(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Column_defContext = Column_defContext;

SQLiteParser.prototype.column_def = function() {

    var localctx = new Column_defContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SQLiteParser.RULE_column_def);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1042;
        this.column_name();
        this.state = 1044;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
        if(la_===1) {
            this.state = 1043;
            this.type_name();

        }
        this.state = 1049;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (SQLiteParser.K_CHECK - 44)) | (1 << (SQLiteParser.K_COLLATE - 44)) | (1 << (SQLiteParser.K_CONSTRAINT - 44)) | (1 << (SQLiteParser.K_DEFAULT - 44)))) !== 0) || ((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (SQLiteParser.K_NOT - 102)) | (1 << (SQLiteParser.K_NULL - 102)) | (1 << (SQLiteParser.K_PRIMARY - 102)) | (1 << (SQLiteParser.K_REFERENCES - 102)))) !== 0) || _la===SQLiteParser.K_UNIQUE) {
            this.state = 1046;
            this.column_constraint();
            this.state = 1051;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Type_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_type_name;
    return this;
}

Type_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Type_nameContext.prototype.constructor = Type_nameContext;

Type_nameContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Type_nameContext.prototype.signed_number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Signed_numberContext);
    } else {
        return this.getTypedRuleContext(Signed_numberContext,i);
    }
};

Type_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterType_name(this);
	}
};

Type_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitType_name(this);
	}
};

Type_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitType_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Type_nameContext = Type_nameContext;

SQLiteParser.prototype.type_name = function() {

    var localctx = new Type_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SQLiteParser.RULE_type_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1053; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1052;
        		this.name();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1055; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,146, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1067;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
        if(la_===1) {
            this.state = 1057;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1058;
            this.signed_number();
            this.state = 1059;
            this.match(SQLiteParser.CLOSE_PAR);

        } else if(la_===2) {
            this.state = 1061;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1062;
            this.signed_number();
            this.state = 1063;
            this.match(SQLiteParser.COMMA);
            this.state = 1064;
            this.signed_number();
            this.state = 1065;
            this.match(SQLiteParser.CLOSE_PAR);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_column_constraint;
    return this;
}

Column_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_constraintContext.prototype.constructor = Column_constraintContext;

Column_constraintContext.prototype.K_PRIMARY = function() {
    return this.getToken(SQLiteParser.K_PRIMARY, 0);
};

Column_constraintContext.prototype.K_KEY = function() {
    return this.getToken(SQLiteParser.K_KEY, 0);
};

Column_constraintContext.prototype.conflict_clause = function() {
    return this.getTypedRuleContext(Conflict_clauseContext,0);
};

Column_constraintContext.prototype.K_NULL = function() {
    return this.getToken(SQLiteParser.K_NULL, 0);
};

Column_constraintContext.prototype.K_UNIQUE = function() {
    return this.getToken(SQLiteParser.K_UNIQUE, 0);
};

Column_constraintContext.prototype.K_CHECK = function() {
    return this.getToken(SQLiteParser.K_CHECK, 0);
};

Column_constraintContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Column_constraintContext.prototype.K_DEFAULT = function() {
    return this.getToken(SQLiteParser.K_DEFAULT, 0);
};

Column_constraintContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLiteParser.K_COLLATE, 0);
};

Column_constraintContext.prototype.collation_name = function() {
    return this.getTypedRuleContext(Collation_nameContext,0);
};

Column_constraintContext.prototype.foreign_key_clause = function() {
    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
};

Column_constraintContext.prototype.K_CONSTRAINT = function() {
    return this.getToken(SQLiteParser.K_CONSTRAINT, 0);
};

Column_constraintContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Column_constraintContext.prototype.signed_number = function() {
    return this.getTypedRuleContext(Signed_numberContext,0);
};

Column_constraintContext.prototype.literal_value = function() {
    return this.getTypedRuleContext(Literal_valueContext,0);
};

Column_constraintContext.prototype.K_AUTOINCREMENT = function() {
    return this.getToken(SQLiteParser.K_AUTOINCREMENT, 0);
};

Column_constraintContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

Column_constraintContext.prototype.K_ASC = function() {
    return this.getToken(SQLiteParser.K_ASC, 0);
};

Column_constraintContext.prototype.K_DESC = function() {
    return this.getToken(SQLiteParser.K_DESC, 0);
};

Column_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterColumn_constraint(this);
	}
};

Column_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitColumn_constraint(this);
	}
};

Column_constraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitColumn_constraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Column_constraintContext = Column_constraintContext;

SQLiteParser.prototype.column_constraint = function() {

    var localctx = new Column_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SQLiteParser.RULE_column_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1071;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_CONSTRAINT) {
            this.state = 1069;
            this.match(SQLiteParser.K_CONSTRAINT);
            this.state = 1070;
            this.name();
        }

        this.state = 1106;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLiteParser.K_PRIMARY:
            this.state = 1073;
            this.match(SQLiteParser.K_PRIMARY);
            this.state = 1074;
            this.match(SQLiteParser.K_KEY);
            this.state = 1076;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_ASC || _la===SQLiteParser.K_DESC) {
                this.state = 1075;
                _la = this._input.LA(1);
                if(!(_la===SQLiteParser.K_ASC || _la===SQLiteParser.K_DESC)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1078;
            this.conflict_clause();
            this.state = 1080;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_AUTOINCREMENT) {
                this.state = 1079;
                this.match(SQLiteParser.K_AUTOINCREMENT);
            }

            break;
        case SQLiteParser.K_NOT:
        case SQLiteParser.K_NULL:
            this.state = 1083;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_NOT) {
                this.state = 1082;
                this.match(SQLiteParser.K_NOT);
            }

            this.state = 1085;
            this.match(SQLiteParser.K_NULL);
            this.state = 1086;
            this.conflict_clause();
            break;
        case SQLiteParser.K_UNIQUE:
            this.state = 1087;
            this.match(SQLiteParser.K_UNIQUE);
            this.state = 1088;
            this.conflict_clause();
            break;
        case SQLiteParser.K_CHECK:
            this.state = 1089;
            this.match(SQLiteParser.K_CHECK);
            this.state = 1090;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1091;
            this.expr(0);
            this.state = 1092;
            this.match(SQLiteParser.CLOSE_PAR);
            break;
        case SQLiteParser.K_DEFAULT:
            this.state = 1094;
            this.match(SQLiteParser.K_DEFAULT);
            this.state = 1101;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1095;
                this.signed_number();
                break;

            case 2:
                this.state = 1096;
                this.literal_value();
                break;

            case 3:
                this.state = 1097;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 1098;
                this.expr(0);
                this.state = 1099;
                this.match(SQLiteParser.CLOSE_PAR);
                break;

            }
            break;
        case SQLiteParser.K_COLLATE:
            this.state = 1103;
            this.match(SQLiteParser.K_COLLATE);
            this.state = 1104;
            this.collation_name();
            break;
        case SQLiteParser.K_REFERENCES:
            this.state = 1105;
            this.foreign_key_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Conflict_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_conflict_clause;
    return this;
}

Conflict_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Conflict_clauseContext.prototype.constructor = Conflict_clauseContext;

Conflict_clauseContext.prototype.K_ON = function() {
    return this.getToken(SQLiteParser.K_ON, 0);
};

Conflict_clauseContext.prototype.K_CONFLICT = function() {
    return this.getToken(SQLiteParser.K_CONFLICT, 0);
};

Conflict_clauseContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLiteParser.K_ROLLBACK, 0);
};

Conflict_clauseContext.prototype.K_ABORT = function() {
    return this.getToken(SQLiteParser.K_ABORT, 0);
};

Conflict_clauseContext.prototype.K_FAIL = function() {
    return this.getToken(SQLiteParser.K_FAIL, 0);
};

Conflict_clauseContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLiteParser.K_IGNORE, 0);
};

Conflict_clauseContext.prototype.K_REPLACE = function() {
    return this.getToken(SQLiteParser.K_REPLACE, 0);
};

Conflict_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterConflict_clause(this);
	}
};

Conflict_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitConflict_clause(this);
	}
};

Conflict_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitConflict_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Conflict_clauseContext = Conflict_clauseContext;

SQLiteParser.prototype.conflict_clause = function() {

    var localctx = new Conflict_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SQLiteParser.RULE_conflict_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1111;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_ON) {
            this.state = 1108;
            this.match(SQLiteParser.K_ON);
            this.state = 1109;
            this.match(SQLiteParser.K_CONFLICT);
            this.state = 1110;
            _la = this._input.LA(1);
            if(!(_la===SQLiteParser.K_ABORT || _la===SQLiteParser.K_FAIL || _la===SQLiteParser.K_IGNORE || _la===SQLiteParser.K_REPLACE || _la===SQLiteParser.K_ROLLBACK)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.literal_value = function() {
    return this.getTypedRuleContext(Literal_valueContext,0);
};

ExprContext.prototype.BIND_PARAMETER = function() {
    return this.getToken(SQLiteParser.BIND_PARAMETER, 0);
};

ExprContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

ExprContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

ExprContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

ExprContext.prototype.unary_operator = function() {
    return this.getTypedRuleContext(Unary_operatorContext,0);
};

ExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

ExprContext.prototype.K_DISTINCT = function() {
    return this.getToken(SQLiteParser.K_DISTINCT, 0);
};

ExprContext.prototype.K_CAST = function() {
    return this.getToken(SQLiteParser.K_CAST, 0);
};

ExprContext.prototype.K_AS = function() {
    return this.getToken(SQLiteParser.K_AS, 0);
};

ExprContext.prototype.type_name = function() {
    return this.getTypedRuleContext(Type_nameContext,0);
};

ExprContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

ExprContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLiteParser.K_EXISTS, 0);
};

ExprContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

ExprContext.prototype.K_CASE = function() {
    return this.getToken(SQLiteParser.K_CASE, 0);
};

ExprContext.prototype.K_END = function() {
    return this.getToken(SQLiteParser.K_END, 0);
};

ExprContext.prototype.K_WHEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_WHEN);
    } else {
        return this.getToken(SQLiteParser.K_WHEN, i);
    }
};


ExprContext.prototype.K_THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_THEN);
    } else {
        return this.getToken(SQLiteParser.K_THEN, i);
    }
};


ExprContext.prototype.K_ELSE = function() {
    return this.getToken(SQLiteParser.K_ELSE, 0);
};

ExprContext.prototype.raise_function = function() {
    return this.getTypedRuleContext(Raise_functionContext,0);
};

ExprContext.prototype.K_IS = function() {
    return this.getToken(SQLiteParser.K_IS, 0);
};

ExprContext.prototype.K_IN = function() {
    return this.getToken(SQLiteParser.K_IN, 0);
};

ExprContext.prototype.K_LIKE = function() {
    return this.getToken(SQLiteParser.K_LIKE, 0);
};

ExprContext.prototype.K_GLOB = function() {
    return this.getToken(SQLiteParser.K_GLOB, 0);
};

ExprContext.prototype.K_MATCH = function() {
    return this.getToken(SQLiteParser.K_MATCH, 0);
};

ExprContext.prototype.K_REGEXP = function() {
    return this.getToken(SQLiteParser.K_REGEXP, 0);
};

ExprContext.prototype.K_AND = function() {
    return this.getToken(SQLiteParser.K_AND, 0);
};

ExprContext.prototype.K_OR = function() {
    return this.getToken(SQLiteParser.K_OR, 0);
};

ExprContext.prototype.K_BETWEEN = function() {
    return this.getToken(SQLiteParser.K_BETWEEN, 0);
};

ExprContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLiteParser.K_COLLATE, 0);
};

ExprContext.prototype.collation_name = function() {
    return this.getTypedRuleContext(Collation_nameContext,0);
};

ExprContext.prototype.K_ESCAPE = function() {
    return this.getToken(SQLiteParser.K_ESCAPE, 0);
};

ExprContext.prototype.K_ISNULL = function() {
    return this.getToken(SQLiteParser.K_ISNULL, 0);
};

ExprContext.prototype.K_NOTNULL = function() {
    return this.getToken(SQLiteParser.K_NOTNULL, 0);
};

ExprContext.prototype.K_NULL = function() {
    return this.getToken(SQLiteParser.K_NULL, 0);
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitExpr(this);
	}
};

ExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};



SQLiteParser.prototype.expr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 78;
    this.enterRecursionRule(localctx, 78, SQLiteParser.RULE_expr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1189;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1114;
            this.literal_value();
            break;

        case 2:
            this.state = 1115;
            this.match(SQLiteParser.BIND_PARAMETER);
            break;

        case 3:
            this.state = 1124;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
            if(la_===1) {
                this.state = 1119;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
                if(la_===1) {
                    this.state = 1116;
                    this.database_name();
                    this.state = 1117;
                    this.match(SQLiteParser.DOT);

                }
                this.state = 1121;
                this.table_name();
                this.state = 1122;
                this.match(SQLiteParser.DOT);

            }
            this.state = 1126;
            this.column_name();
            break;

        case 4:
            this.state = 1127;
            this.unary_operator();
            this.state = 1128;
            this.expr(21);
            break;

        case 5:
            this.state = 1130;
            this.function_name();
            this.state = 1131;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1144;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case SQLiteParser.OPEN_PAR:
            case SQLiteParser.PLUS:
            case SQLiteParser.MINUS:
            case SQLiteParser.TILDE:
            case SQLiteParser.K_ABORT:
            case SQLiteParser.K_ACTION:
            case SQLiteParser.K_ADD:
            case SQLiteParser.K_AFTER:
            case SQLiteParser.K_ALL:
            case SQLiteParser.K_ALTER:
            case SQLiteParser.K_ANALYZE:
            case SQLiteParser.K_AND:
            case SQLiteParser.K_AS:
            case SQLiteParser.K_ASC:
            case SQLiteParser.K_ATTACH:
            case SQLiteParser.K_AUTOINCREMENT:
            case SQLiteParser.K_BEFORE:
            case SQLiteParser.K_BEGIN:
            case SQLiteParser.K_BETWEEN:
            case SQLiteParser.K_BY:
            case SQLiteParser.K_CASCADE:
            case SQLiteParser.K_CASE:
            case SQLiteParser.K_CAST:
            case SQLiteParser.K_CHECK:
            case SQLiteParser.K_COLLATE:
            case SQLiteParser.K_COLUMN:
            case SQLiteParser.K_COMMIT:
            case SQLiteParser.K_CONFLICT:
            case SQLiteParser.K_CONSTRAINT:
            case SQLiteParser.K_CREATE:
            case SQLiteParser.K_CROSS:
            case SQLiteParser.K_CURRENT_DATE:
            case SQLiteParser.K_CURRENT_TIME:
            case SQLiteParser.K_CURRENT_TIMESTAMP:
            case SQLiteParser.K_DATABASE:
            case SQLiteParser.K_DEFAULT:
            case SQLiteParser.K_DEFERRABLE:
            case SQLiteParser.K_DEFERRED:
            case SQLiteParser.K_DELETE:
            case SQLiteParser.K_DESC:
            case SQLiteParser.K_DETACH:
            case SQLiteParser.K_DISTINCT:
            case SQLiteParser.K_DROP:
            case SQLiteParser.K_EACH:
            case SQLiteParser.K_ELSE:
            case SQLiteParser.K_END:
            case SQLiteParser.K_ESCAPE:
            case SQLiteParser.K_EXCEPT:
            case SQLiteParser.K_EXCLUSIVE:
            case SQLiteParser.K_EXISTS:
            case SQLiteParser.K_EXPLAIN:
            case SQLiteParser.K_FAIL:
            case SQLiteParser.K_FOR:
            case SQLiteParser.K_FOREIGN:
            case SQLiteParser.K_FROM:
            case SQLiteParser.K_FULL:
            case SQLiteParser.K_GLOB:
            case SQLiteParser.K_GROUP:
            case SQLiteParser.K_HAVING:
            case SQLiteParser.K_IF:
            case SQLiteParser.K_IGNORE:
            case SQLiteParser.K_IMMEDIATE:
            case SQLiteParser.K_IN:
            case SQLiteParser.K_INDEX:
            case SQLiteParser.K_INDEXED:
            case SQLiteParser.K_INITIALLY:
            case SQLiteParser.K_INNER:
            case SQLiteParser.K_INSERT:
            case SQLiteParser.K_INSTEAD:
            case SQLiteParser.K_INTERSECT:
            case SQLiteParser.K_INTO:
            case SQLiteParser.K_IS:
            case SQLiteParser.K_ISNULL:
            case SQLiteParser.K_JOIN:
            case SQLiteParser.K_KEY:
            case SQLiteParser.K_LEFT:
            case SQLiteParser.K_LIKE:
            case SQLiteParser.K_LIMIT:
            case SQLiteParser.K_MATCH:
            case SQLiteParser.K_NATURAL:
            case SQLiteParser.K_NO:
            case SQLiteParser.K_NOT:
            case SQLiteParser.K_NOTNULL:
            case SQLiteParser.K_NULL:
            case SQLiteParser.K_OF:
            case SQLiteParser.K_OFFSET:
            case SQLiteParser.K_ON:
            case SQLiteParser.K_OR:
            case SQLiteParser.K_ORDER:
            case SQLiteParser.K_OUTER:
            case SQLiteParser.K_PLAN:
            case SQLiteParser.K_PRAGMA:
            case SQLiteParser.K_PRIMARY:
            case SQLiteParser.K_QUERY:
            case SQLiteParser.K_RAISE:
            case SQLiteParser.K_RECURSIVE:
            case SQLiteParser.K_REFERENCES:
            case SQLiteParser.K_REGEXP:
            case SQLiteParser.K_REINDEX:
            case SQLiteParser.K_RELEASE:
            case SQLiteParser.K_RENAME:
            case SQLiteParser.K_REPLACE:
            case SQLiteParser.K_RESTRICT:
            case SQLiteParser.K_RIGHT:
            case SQLiteParser.K_ROLLBACK:
            case SQLiteParser.K_ROW:
            case SQLiteParser.K_SAVEPOINT:
            case SQLiteParser.K_SELECT:
            case SQLiteParser.K_SET:
            case SQLiteParser.K_TABLE:
            case SQLiteParser.K_TEMP:
            case SQLiteParser.K_TEMPORARY:
            case SQLiteParser.K_THEN:
            case SQLiteParser.K_TO:
            case SQLiteParser.K_TRANSACTION:
            case SQLiteParser.K_TRIGGER:
            case SQLiteParser.K_UNION:
            case SQLiteParser.K_UNIQUE:
            case SQLiteParser.K_UPDATE:
            case SQLiteParser.K_USING:
            case SQLiteParser.K_VACUUM:
            case SQLiteParser.K_VALUES:
            case SQLiteParser.K_VIEW:
            case SQLiteParser.K_VIRTUAL:
            case SQLiteParser.K_WHEN:
            case SQLiteParser.K_WHERE:
            case SQLiteParser.K_WITH:
            case SQLiteParser.K_WITHOUT:
            case SQLiteParser.IDENTIFIER:
            case SQLiteParser.NUMERIC_LITERAL:
            case SQLiteParser.BIND_PARAMETER:
            case SQLiteParser.STRING_LITERAL:
            case SQLiteParser.BLOB_LITERAL:
            	this.state = 1133;
            	this._errHandler.sync(this);
            	var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
            	if(la_===1) {
            	    this.state = 1132;
            	    this.match(SQLiteParser.K_DISTINCT);

            	}
            	this.state = 1135;
            	this.expr(0);
            	this.state = 1140;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	while(_la===SQLiteParser.COMMA) {
            	    this.state = 1136;
            	    this.match(SQLiteParser.COMMA);
            	    this.state = 1137;
            	    this.expr(0);
            	    this.state = 1142;
            	    this._errHandler.sync(this);
            	    _la = this._input.LA(1);
            	}
            	break;
            case SQLiteParser.STAR:
            	this.state = 1143;
            	this.match(SQLiteParser.STAR);
            	break;
            case SQLiteParser.CLOSE_PAR:
            	break;
            default:
            	break;
            }
            this.state = 1146;
            this.match(SQLiteParser.CLOSE_PAR);
            break;

        case 6:
            this.state = 1148;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1149;
            this.expr(0);
            this.state = 1150;
            this.match(SQLiteParser.CLOSE_PAR);
            break;

        case 7:
            this.state = 1152;
            this.match(SQLiteParser.K_CAST);
            this.state = 1153;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1154;
            this.expr(0);
            this.state = 1155;
            this.match(SQLiteParser.K_AS);
            this.state = 1156;
            this.type_name();
            this.state = 1157;
            this.match(SQLiteParser.CLOSE_PAR);
            break;

        case 8:
            this.state = 1163;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_EXISTS || _la===SQLiteParser.K_NOT) {
                this.state = 1160;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLiteParser.K_NOT) {
                    this.state = 1159;
                    this.match(SQLiteParser.K_NOT);
                }

                this.state = 1162;
                this.match(SQLiteParser.K_EXISTS);
            }

            this.state = 1165;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1166;
            this.select_stmt();
            this.state = 1167;
            this.match(SQLiteParser.CLOSE_PAR);
            break;

        case 9:
            this.state = 1169;
            this.match(SQLiteParser.K_CASE);
            this.state = 1171;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
            if(la_===1) {
                this.state = 1170;
                this.expr(0);

            }
            this.state = 1178; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1173;
                this.match(SQLiteParser.K_WHEN);
                this.state = 1174;
                this.expr(0);
                this.state = 1175;
                this.match(SQLiteParser.K_THEN);
                this.state = 1176;
                this.expr(0);
                this.state = 1180; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===SQLiteParser.K_WHEN);
            this.state = 1184;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_ELSE) {
                this.state = 1182;
                this.match(SQLiteParser.K_ELSE);
                this.state = 1183;
                this.expr(0);
            }

            this.state = 1186;
            this.match(SQLiteParser.K_END);
            break;

        case 10:
            this.state = 1188;
            this.raise_function();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1291;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,178,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1289;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1191;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1192;
                    this.match(SQLiteParser.PIPE2);
                    this.state = 1193;
                    this.expr(21);
                    break;

                case 2:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1194;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1195;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1196;
                    this.expr(20);
                    break;

                case 3:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1197;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 1198;
                    _la = this._input.LA(1);
                    if(!(_la===SQLiteParser.PLUS || _la===SQLiteParser.MINUS)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1199;
                    this.expr(19);
                    break;

                case 4:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1200;
                    if (!( this.precpred(this._ctx, 17))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                    }
                    this.state = 1201;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1202;
                    this.expr(18);
                    break;

                case 5:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1203;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1204;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1205;
                    this.expr(17);
                    break;

                case 6:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1206;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1219;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1207;
                        this.match(SQLiteParser.ASSIGN);
                        break;

                    case 2:
                        this.state = 1208;
                        this.match(SQLiteParser.EQ);
                        break;

                    case 3:
                        this.state = 1209;
                        this.match(SQLiteParser.NOT_EQ1);
                        break;

                    case 4:
                        this.state = 1210;
                        this.match(SQLiteParser.NOT_EQ2);
                        break;

                    case 5:
                        this.state = 1211;
                        this.match(SQLiteParser.K_IS);
                        break;

                    case 6:
                        this.state = 1212;
                        this.match(SQLiteParser.K_IS);
                        this.state = 1213;
                        this.match(SQLiteParser.K_NOT);
                        break;

                    case 7:
                        this.state = 1214;
                        this.match(SQLiteParser.K_IN);
                        break;

                    case 8:
                        this.state = 1215;
                        this.match(SQLiteParser.K_LIKE);
                        break;

                    case 9:
                        this.state = 1216;
                        this.match(SQLiteParser.K_GLOB);
                        break;

                    case 10:
                        this.state = 1217;
                        this.match(SQLiteParser.K_MATCH);
                        break;

                    case 11:
                        this.state = 1218;
                        this.match(SQLiteParser.K_REGEXP);
                        break;

                    }
                    this.state = 1221;
                    this.expr(16);
                    break;

                case 7:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1222;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 1223;
                    this.match(SQLiteParser.K_AND);
                    this.state = 1224;
                    this.expr(15);
                    break;

                case 8:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1225;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1226;
                    this.match(SQLiteParser.K_OR);
                    this.state = 1227;
                    this.expr(14);
                    break;

                case 9:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1228;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1229;
                    this.match(SQLiteParser.K_IS);
                    this.state = 1231;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
                    if(la_===1) {
                        this.state = 1230;
                        this.match(SQLiteParser.K_NOT);

                    }
                    this.state = 1233;
                    this.expr(7);
                    break;

                case 10:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1234;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1236;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SQLiteParser.K_NOT) {
                        this.state = 1235;
                        this.match(SQLiteParser.K_NOT);
                    }

                    this.state = 1238;
                    this.match(SQLiteParser.K_BETWEEN);
                    this.state = 1239;
                    this.expr(0);
                    this.state = 1240;
                    this.match(SQLiteParser.K_AND);
                    this.state = 1241;
                    this.expr(6);
                    break;

                case 11:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1243;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1244;
                    this.match(SQLiteParser.K_COLLATE);
                    this.state = 1245;
                    this.collation_name();
                    break;

                case 12:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1246;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1248;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SQLiteParser.K_NOT) {
                        this.state = 1247;
                        this.match(SQLiteParser.K_NOT);
                    }

                    this.state = 1250;
                    _la = this._input.LA(1);
                    if(!(((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SQLiteParser.K_GLOB - 77)) | (1 << (SQLiteParser.K_LIKE - 77)) | (1 << (SQLiteParser.K_MATCH - 77)))) !== 0) || _la===SQLiteParser.K_REGEXP)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1251;
                    this.expr(0);
                    this.state = 1254;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
                    if(la_===1) {
                        this.state = 1252;
                        this.match(SQLiteParser.K_ESCAPE);
                        this.state = 1253;
                        this.expr(0);

                    }
                    break;

                case 13:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1256;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1261;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case SQLiteParser.K_ISNULL:
                        this.state = 1257;
                        this.match(SQLiteParser.K_ISNULL);
                        break;
                    case SQLiteParser.K_NOTNULL:
                        this.state = 1258;
                        this.match(SQLiteParser.K_NOTNULL);
                        break;
                    case SQLiteParser.K_NOT:
                        this.state = 1259;
                        this.match(SQLiteParser.K_NOT);
                        this.state = 1260;
                        this.match(SQLiteParser.K_NULL);
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                case 14:
                    localctx = new ExprContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SQLiteParser.RULE_expr);
                    this.state = 1263;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1265;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===SQLiteParser.K_NOT) {
                        this.state = 1264;
                        this.match(SQLiteParser.K_NOT);
                    }

                    this.state = 1267;
                    this.match(SQLiteParser.K_IN);
                    this.state = 1287;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1268;
                        this.match(SQLiteParser.OPEN_PAR);
                        this.state = 1278;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
                        if(la_===1) {
                            this.state = 1269;
                            this.select_stmt();

                        } else if(la_===2) {
                            this.state = 1270;
                            this.expr(0);
                            this.state = 1275;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while(_la===SQLiteParser.COMMA) {
                                this.state = 1271;
                                this.match(SQLiteParser.COMMA);
                                this.state = 1272;
                                this.expr(0);
                                this.state = 1277;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }

                        }
                        this.state = 1280;
                        this.match(SQLiteParser.CLOSE_PAR);
                        break;

                    case 2:
                        this.state = 1284;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
                        if(la_===1) {
                            this.state = 1281;
                            this.database_name();
                            this.state = 1282;
                            this.match(SQLiteParser.DOT);

                        }
                        this.state = 1286;
                        this.table_name();
                        break;

                    }
                    break;

                } 
            }
            this.state = 1293;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,178,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Foreign_key_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_foreign_key_clause;
    return this;
}

Foreign_key_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Foreign_key_clauseContext.prototype.constructor = Foreign_key_clauseContext;

Foreign_key_clauseContext.prototype.K_REFERENCES = function() {
    return this.getToken(SQLiteParser.K_REFERENCES, 0);
};

Foreign_key_clauseContext.prototype.foreign_table = function() {
    return this.getTypedRuleContext(Foreign_tableContext,0);
};

Foreign_key_clauseContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Foreign_key_clauseContext.prototype.K_DEFERRABLE = function() {
    return this.getToken(SQLiteParser.K_DEFERRABLE, 0);
};

Foreign_key_clauseContext.prototype.K_ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_ON);
    } else {
        return this.getToken(SQLiteParser.K_ON, i);
    }
};


Foreign_key_clauseContext.prototype.K_MATCH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_MATCH);
    } else {
        return this.getToken(SQLiteParser.K_MATCH, i);
    }
};


Foreign_key_clauseContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Foreign_key_clauseContext.prototype.K_DELETE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_DELETE);
    } else {
        return this.getToken(SQLiteParser.K_DELETE, i);
    }
};


Foreign_key_clauseContext.prototype.K_UPDATE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_UPDATE);
    } else {
        return this.getToken(SQLiteParser.K_UPDATE, i);
    }
};


Foreign_key_clauseContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

Foreign_key_clauseContext.prototype.K_INITIALLY = function() {
    return this.getToken(SQLiteParser.K_INITIALLY, 0);
};

Foreign_key_clauseContext.prototype.K_DEFERRED = function() {
    return this.getToken(SQLiteParser.K_DEFERRED, 0);
};

Foreign_key_clauseContext.prototype.K_IMMEDIATE = function() {
    return this.getToken(SQLiteParser.K_IMMEDIATE, 0);
};

Foreign_key_clauseContext.prototype.K_SET = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_SET);
    } else {
        return this.getToken(SQLiteParser.K_SET, i);
    }
};


Foreign_key_clauseContext.prototype.K_NULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_NULL);
    } else {
        return this.getToken(SQLiteParser.K_NULL, i);
    }
};


Foreign_key_clauseContext.prototype.K_DEFAULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_DEFAULT);
    } else {
        return this.getToken(SQLiteParser.K_DEFAULT, i);
    }
};


Foreign_key_clauseContext.prototype.K_CASCADE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_CASCADE);
    } else {
        return this.getToken(SQLiteParser.K_CASCADE, i);
    }
};


Foreign_key_clauseContext.prototype.K_RESTRICT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_RESTRICT);
    } else {
        return this.getToken(SQLiteParser.K_RESTRICT, i);
    }
};


Foreign_key_clauseContext.prototype.K_NO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_NO);
    } else {
        return this.getToken(SQLiteParser.K_NO, i);
    }
};


Foreign_key_clauseContext.prototype.K_ACTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_ACTION);
    } else {
        return this.getToken(SQLiteParser.K_ACTION, i);
    }
};


Foreign_key_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterForeign_key_clause(this);
	}
};

Foreign_key_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitForeign_key_clause(this);
	}
};

Foreign_key_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitForeign_key_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Foreign_key_clauseContext = Foreign_key_clauseContext;

SQLiteParser.prototype.foreign_key_clause = function() {

    var localctx = new Foreign_key_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SQLiteParser.RULE_foreign_key_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1294;
        this.match(SQLiteParser.K_REFERENCES);
        this.state = 1295;
        this.foreign_table();
        this.state = 1307;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.OPEN_PAR) {
            this.state = 1296;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1297;
            this.column_name();
            this.state = 1302;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 1298;
                this.match(SQLiteParser.COMMA);
                this.state = 1299;
                this.column_name();
                this.state = 1304;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1305;
            this.match(SQLiteParser.CLOSE_PAR);
        }

        this.state = 1327;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLiteParser.K_MATCH || _la===SQLiteParser.K_ON) {
            this.state = 1323;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SQLiteParser.K_ON:
                this.state = 1309;
                this.match(SQLiteParser.K_ON);
                this.state = 1310;
                _la = this._input.LA(1);
                if(!(_la===SQLiteParser.K_DELETE || _la===SQLiteParser.K_UPDATE)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1319;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1311;
                    this.match(SQLiteParser.K_SET);
                    this.state = 1312;
                    this.match(SQLiteParser.K_NULL);
                    break;

                case 2:
                    this.state = 1313;
                    this.match(SQLiteParser.K_SET);
                    this.state = 1314;
                    this.match(SQLiteParser.K_DEFAULT);
                    break;

                case 3:
                    this.state = 1315;
                    this.match(SQLiteParser.K_CASCADE);
                    break;

                case 4:
                    this.state = 1316;
                    this.match(SQLiteParser.K_RESTRICT);
                    break;

                case 5:
                    this.state = 1317;
                    this.match(SQLiteParser.K_NO);
                    this.state = 1318;
                    this.match(SQLiteParser.K_ACTION);
                    break;

                }
                break;
            case SQLiteParser.K_MATCH:
                this.state = 1321;
                this.match(SQLiteParser.K_MATCH);
                this.state = 1322;
                this.name();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1329;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1340;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
        if(la_===1) {
            this.state = 1331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_NOT) {
                this.state = 1330;
                this.match(SQLiteParser.K_NOT);
            }

            this.state = 1333;
            this.match(SQLiteParser.K_DEFERRABLE);
            this.state = 1338;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
            if(la_===1) {
                this.state = 1334;
                this.match(SQLiteParser.K_INITIALLY);
                this.state = 1335;
                this.match(SQLiteParser.K_DEFERRED);

            } else if(la_===2) {
                this.state = 1336;
                this.match(SQLiteParser.K_INITIALLY);
                this.state = 1337;
                this.match(SQLiteParser.K_IMMEDIATE);

            }

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Raise_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_raise_function;
    return this;
}

Raise_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_functionContext.prototype.constructor = Raise_functionContext;

Raise_functionContext.prototype.K_RAISE = function() {
    return this.getToken(SQLiteParser.K_RAISE, 0);
};

Raise_functionContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLiteParser.K_IGNORE, 0);
};

Raise_functionContext.prototype.error_message = function() {
    return this.getTypedRuleContext(Error_messageContext,0);
};

Raise_functionContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLiteParser.K_ROLLBACK, 0);
};

Raise_functionContext.prototype.K_ABORT = function() {
    return this.getToken(SQLiteParser.K_ABORT, 0);
};

Raise_functionContext.prototype.K_FAIL = function() {
    return this.getToken(SQLiteParser.K_FAIL, 0);
};

Raise_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterRaise_function(this);
	}
};

Raise_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitRaise_function(this);
	}
};

Raise_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitRaise_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Raise_functionContext = Raise_functionContext;

SQLiteParser.prototype.raise_function = function() {

    var localctx = new Raise_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SQLiteParser.RULE_raise_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1342;
        this.match(SQLiteParser.K_RAISE);
        this.state = 1343;
        this.match(SQLiteParser.OPEN_PAR);
        this.state = 1348;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLiteParser.K_IGNORE:
            this.state = 1344;
            this.match(SQLiteParser.K_IGNORE);
            break;
        case SQLiteParser.K_ABORT:
        case SQLiteParser.K_FAIL:
        case SQLiteParser.K_ROLLBACK:
            this.state = 1345;
            _la = this._input.LA(1);
            if(!(_la===SQLiteParser.K_ABORT || _la===SQLiteParser.K_FAIL || _la===SQLiteParser.K_ROLLBACK)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1346;
            this.match(SQLiteParser.COMMA);
            this.state = 1347;
            this.error_message();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1350;
        this.match(SQLiteParser.CLOSE_PAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Indexed_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_indexed_column;
    return this;
}

Indexed_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Indexed_columnContext.prototype.constructor = Indexed_columnContext;

Indexed_columnContext.prototype.column_name = function() {
    return this.getTypedRuleContext(Column_nameContext,0);
};

Indexed_columnContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLiteParser.K_COLLATE, 0);
};

Indexed_columnContext.prototype.collation_name = function() {
    return this.getTypedRuleContext(Collation_nameContext,0);
};

Indexed_columnContext.prototype.K_ASC = function() {
    return this.getToken(SQLiteParser.K_ASC, 0);
};

Indexed_columnContext.prototype.K_DESC = function() {
    return this.getToken(SQLiteParser.K_DESC, 0);
};

Indexed_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterIndexed_column(this);
	}
};

Indexed_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitIndexed_column(this);
	}
};

Indexed_columnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitIndexed_column(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Indexed_columnContext = Indexed_columnContext;

SQLiteParser.prototype.indexed_column = function() {

    var localctx = new Indexed_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SQLiteParser.RULE_indexed_column);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1352;
        this.column_name();
        this.state = 1355;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_COLLATE) {
            this.state = 1353;
            this.match(SQLiteParser.K_COLLATE);
            this.state = 1354;
            this.collation_name();
        }

        this.state = 1358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_ASC || _la===SQLiteParser.K_DESC) {
            this.state = 1357;
            _la = this._input.LA(1);
            if(!(_la===SQLiteParser.K_ASC || _la===SQLiteParser.K_DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_table_constraint;
    return this;
}

Table_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_constraintContext.prototype.constructor = Table_constraintContext;

Table_constraintContext.prototype.indexed_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Indexed_columnContext);
    } else {
        return this.getTypedRuleContext(Indexed_columnContext,i);
    }
};

Table_constraintContext.prototype.conflict_clause = function() {
    return this.getTypedRuleContext(Conflict_clauseContext,0);
};

Table_constraintContext.prototype.K_CHECK = function() {
    return this.getToken(SQLiteParser.K_CHECK, 0);
};

Table_constraintContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Table_constraintContext.prototype.K_FOREIGN = function() {
    return this.getToken(SQLiteParser.K_FOREIGN, 0);
};

Table_constraintContext.prototype.K_KEY = function() {
    return this.getToken(SQLiteParser.K_KEY, 0);
};

Table_constraintContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Table_constraintContext.prototype.foreign_key_clause = function() {
    return this.getTypedRuleContext(Foreign_key_clauseContext,0);
};

Table_constraintContext.prototype.K_CONSTRAINT = function() {
    return this.getToken(SQLiteParser.K_CONSTRAINT, 0);
};

Table_constraintContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Table_constraintContext.prototype.K_PRIMARY = function() {
    return this.getToken(SQLiteParser.K_PRIMARY, 0);
};

Table_constraintContext.prototype.K_UNIQUE = function() {
    return this.getToken(SQLiteParser.K_UNIQUE, 0);
};

Table_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterTable_constraint(this);
	}
};

Table_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitTable_constraint(this);
	}
};

Table_constraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitTable_constraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Table_constraintContext = Table_constraintContext;

SQLiteParser.prototype.table_constraint = function() {

    var localctx = new Table_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SQLiteParser.RULE_table_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_CONSTRAINT) {
            this.state = 1360;
            this.match(SQLiteParser.K_CONSTRAINT);
            this.state = 1361;
            this.name();
        }

        this.state = 1400;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLiteParser.K_PRIMARY:
        case SQLiteParser.K_UNIQUE:
            this.state = 1367;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SQLiteParser.K_PRIMARY:
                this.state = 1364;
                this.match(SQLiteParser.K_PRIMARY);
                this.state = 1365;
                this.match(SQLiteParser.K_KEY);
                break;
            case SQLiteParser.K_UNIQUE:
                this.state = 1366;
                this.match(SQLiteParser.K_UNIQUE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1369;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1370;
            this.indexed_column();
            this.state = 1375;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 1371;
                this.match(SQLiteParser.COMMA);
                this.state = 1372;
                this.indexed_column();
                this.state = 1377;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1378;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 1379;
            this.conflict_clause();
            break;
        case SQLiteParser.K_CHECK:
            this.state = 1381;
            this.match(SQLiteParser.K_CHECK);
            this.state = 1382;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1383;
            this.expr(0);
            this.state = 1384;
            this.match(SQLiteParser.CLOSE_PAR);
            break;
        case SQLiteParser.K_FOREIGN:
            this.state = 1386;
            this.match(SQLiteParser.K_FOREIGN);
            this.state = 1387;
            this.match(SQLiteParser.K_KEY);
            this.state = 1388;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1389;
            this.column_name();
            this.state = 1394;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 1390;
                this.match(SQLiteParser.COMMA);
                this.state = 1391;
                this.column_name();
                this.state = 1396;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1397;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 1398;
            this.foreign_key_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_with_clause;
    return this;
}

With_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_clauseContext.prototype.constructor = With_clauseContext;

With_clauseContext.prototype.K_WITH = function() {
    return this.getToken(SQLiteParser.K_WITH, 0);
};

With_clauseContext.prototype.cte_table_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cte_table_nameContext);
    } else {
        return this.getTypedRuleContext(Cte_table_nameContext,i);
    }
};

With_clauseContext.prototype.K_AS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SQLiteParser.K_AS);
    } else {
        return this.getToken(SQLiteParser.K_AS, i);
    }
};


With_clauseContext.prototype.select_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_stmtContext);
    } else {
        return this.getTypedRuleContext(Select_stmtContext,i);
    }
};

With_clauseContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLiteParser.K_RECURSIVE, 0);
};

With_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterWith_clause(this);
	}
};

With_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitWith_clause(this);
	}
};

With_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitWith_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.With_clauseContext = With_clauseContext;

SQLiteParser.prototype.with_clause = function() {

    var localctx = new With_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SQLiteParser.RULE_with_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1402;
        this.match(SQLiteParser.K_WITH);
        this.state = 1404;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        if(la_===1) {
            this.state = 1403;
            this.match(SQLiteParser.K_RECURSIVE);

        }
        this.state = 1406;
        this.cte_table_name();
        this.state = 1407;
        this.match(SQLiteParser.K_AS);
        this.state = 1408;
        this.match(SQLiteParser.OPEN_PAR);
        this.state = 1409;
        this.select_stmt();
        this.state = 1410;
        this.match(SQLiteParser.CLOSE_PAR);
        this.state = 1420;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLiteParser.COMMA) {
            this.state = 1411;
            this.match(SQLiteParser.COMMA);
            this.state = 1412;
            this.cte_table_name();
            this.state = 1413;
            this.match(SQLiteParser.K_AS);
            this.state = 1414;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1415;
            this.select_stmt();
            this.state = 1416;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 1422;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Qualified_table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_qualified_table_name;
    return this;
}

Qualified_table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Qualified_table_nameContext.prototype.constructor = Qualified_table_nameContext;

Qualified_table_nameContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Qualified_table_nameContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Qualified_table_nameContext.prototype.K_INDEXED = function() {
    return this.getToken(SQLiteParser.K_INDEXED, 0);
};

Qualified_table_nameContext.prototype.K_BY = function() {
    return this.getToken(SQLiteParser.K_BY, 0);
};

Qualified_table_nameContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Qualified_table_nameContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

Qualified_table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterQualified_table_name(this);
	}
};

Qualified_table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitQualified_table_name(this);
	}
};

Qualified_table_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitQualified_table_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Qualified_table_nameContext = Qualified_table_nameContext;

SQLiteParser.prototype.qualified_table_name = function() {

    var localctx = new Qualified_table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SQLiteParser.RULE_qualified_table_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1426;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
        if(la_===1) {
            this.state = 1423;
            this.database_name();
            this.state = 1424;
            this.match(SQLiteParser.DOT);

        }
        this.state = 1428;
        this.table_name();
        this.state = 1434;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case SQLiteParser.K_INDEXED:
        	this.state = 1429;
        	this.match(SQLiteParser.K_INDEXED);
        	this.state = 1430;
        	this.match(SQLiteParser.K_BY);
        	this.state = 1431;
        	this.index_name();
        	break;
        case SQLiteParser.K_NOT:
        	this.state = 1432;
        	this.match(SQLiteParser.K_NOT);
        	this.state = 1433;
        	this.match(SQLiteParser.K_INDEXED);
        	break;
        case SQLiteParser.EOF:
        case SQLiteParser.SCOL:
        case SQLiteParser.K_ALTER:
        case SQLiteParser.K_ANALYZE:
        case SQLiteParser.K_ATTACH:
        case SQLiteParser.K_BEGIN:
        case SQLiteParser.K_COMMIT:
        case SQLiteParser.K_CREATE:
        case SQLiteParser.K_DELETE:
        case SQLiteParser.K_DETACH:
        case SQLiteParser.K_DROP:
        case SQLiteParser.K_END:
        case SQLiteParser.K_EXPLAIN:
        case SQLiteParser.K_INSERT:
        case SQLiteParser.K_LIMIT:
        case SQLiteParser.K_ORDER:
        case SQLiteParser.K_PRAGMA:
        case SQLiteParser.K_REINDEX:
        case SQLiteParser.K_RELEASE:
        case SQLiteParser.K_REPLACE:
        case SQLiteParser.K_ROLLBACK:
        case SQLiteParser.K_SAVEPOINT:
        case SQLiteParser.K_SELECT:
        case SQLiteParser.K_SET:
        case SQLiteParser.K_UPDATE:
        case SQLiteParser.K_VACUUM:
        case SQLiteParser.K_VALUES:
        case SQLiteParser.K_WHERE:
        case SQLiteParser.K_WITH:
        case SQLiteParser.UNEXPECTED_CHAR:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ordering_termContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_ordering_term;
    return this;
}

Ordering_termContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ordering_termContext.prototype.constructor = Ordering_termContext;

Ordering_termContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Ordering_termContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLiteParser.K_COLLATE, 0);
};

Ordering_termContext.prototype.collation_name = function() {
    return this.getTypedRuleContext(Collation_nameContext,0);
};

Ordering_termContext.prototype.K_ASC = function() {
    return this.getToken(SQLiteParser.K_ASC, 0);
};

Ordering_termContext.prototype.K_DESC = function() {
    return this.getToken(SQLiteParser.K_DESC, 0);
};

Ordering_termContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterOrdering_term(this);
	}
};

Ordering_termContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitOrdering_term(this);
	}
};

Ordering_termContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitOrdering_term(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Ordering_termContext = Ordering_termContext;

SQLiteParser.prototype.ordering_term = function() {

    var localctx = new Ordering_termContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SQLiteParser.RULE_ordering_term);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1436;
        this.expr(0);
        this.state = 1439;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_COLLATE) {
            this.state = 1437;
            this.match(SQLiteParser.K_COLLATE);
            this.state = 1438;
            this.collation_name();
        }

        this.state = 1442;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.K_ASC || _la===SQLiteParser.K_DESC) {
            this.state = 1441;
            _la = this._input.LA(1);
            if(!(_la===SQLiteParser.K_ASC || _la===SQLiteParser.K_DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_pragma_value;
    return this;
}

Pragma_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_valueContext.prototype.constructor = Pragma_valueContext;

Pragma_valueContext.prototype.signed_number = function() {
    return this.getTypedRuleContext(Signed_numberContext,0);
};

Pragma_valueContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Pragma_valueContext.prototype.STRING_LITERAL = function() {
    return this.getToken(SQLiteParser.STRING_LITERAL, 0);
};

Pragma_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterPragma_value(this);
	}
};

Pragma_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitPragma_value(this);
	}
};

Pragma_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitPragma_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Pragma_valueContext = Pragma_valueContext;

SQLiteParser.prototype.pragma_value = function() {

    var localctx = new Pragma_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SQLiteParser.RULE_pragma_value);
    try {
        this.state = 1447;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1444;
            this.signed_number();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1445;
            this.name();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1446;
            this.match(SQLiteParser.STRING_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Common_table_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_common_table_expression;
    return this;
}

Common_table_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Common_table_expressionContext.prototype.constructor = Common_table_expressionContext;

Common_table_expressionContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Common_table_expressionContext.prototype.K_AS = function() {
    return this.getToken(SQLiteParser.K_AS, 0);
};

Common_table_expressionContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Common_table_expressionContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Common_table_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterCommon_table_expression(this);
	}
};

Common_table_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitCommon_table_expression(this);
	}
};

Common_table_expressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitCommon_table_expression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Common_table_expressionContext = Common_table_expressionContext;

SQLiteParser.prototype.common_table_expression = function() {

    var localctx = new Common_table_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SQLiteParser.RULE_common_table_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1449;
        this.table_name();
        this.state = 1461;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.OPEN_PAR) {
            this.state = 1450;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1451;
            this.column_name();
            this.state = 1456;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 1452;
                this.match(SQLiteParser.COMMA);
                this.state = 1453;
                this.column_name();
                this.state = 1458;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1459;
            this.match(SQLiteParser.CLOSE_PAR);
        }

        this.state = 1463;
        this.match(SQLiteParser.K_AS);
        this.state = 1464;
        this.match(SQLiteParser.OPEN_PAR);
        this.state = 1465;
        this.select_stmt();
        this.state = 1466;
        this.match(SQLiteParser.CLOSE_PAR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Result_columnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_result_column;
    return this;
}

Result_columnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Result_columnContext.prototype.constructor = Result_columnContext;

Result_columnContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Result_columnContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Result_columnContext.prototype.column_alias = function() {
    return this.getTypedRuleContext(Column_aliasContext,0);
};

Result_columnContext.prototype.K_AS = function() {
    return this.getToken(SQLiteParser.K_AS, 0);
};

Result_columnContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterResult_column(this);
	}
};

Result_columnContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitResult_column(this);
	}
};

Result_columnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitResult_column(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Result_columnContext = Result_columnContext;

SQLiteParser.prototype.result_column = function() {

    var localctx = new Result_columnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SQLiteParser.RULE_result_column);
    var _la = 0; // Token type
    try {
        this.state = 1480;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1468;
            this.match(SQLiteParser.STAR);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1469;
            this.table_name();
            this.state = 1470;
            this.match(SQLiteParser.DOT);
            this.state = 1471;
            this.match(SQLiteParser.STAR);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1473;
            this.expr(0);
            this.state = 1478;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_AS || _la===SQLiteParser.IDENTIFIER || _la===SQLiteParser.STRING_LITERAL) {
                this.state = 1475;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLiteParser.K_AS) {
                    this.state = 1474;
                    this.match(SQLiteParser.K_AS);
                }

                this.state = 1477;
                this.column_alias();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_or_subqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_table_or_subquery;
    return this;
}

Table_or_subqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_or_subqueryContext.prototype.constructor = Table_or_subqueryContext;

Table_or_subqueryContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Table_or_subqueryContext.prototype.database_name = function() {
    return this.getTypedRuleContext(Database_nameContext,0);
};

Table_or_subqueryContext.prototype.table_alias = function() {
    return this.getTypedRuleContext(Table_aliasContext,0);
};

Table_or_subqueryContext.prototype.K_INDEXED = function() {
    return this.getToken(SQLiteParser.K_INDEXED, 0);
};

Table_or_subqueryContext.prototype.K_BY = function() {
    return this.getToken(SQLiteParser.K_BY, 0);
};

Table_or_subqueryContext.prototype.index_name = function() {
    return this.getTypedRuleContext(Index_nameContext,0);
};

Table_or_subqueryContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

Table_or_subqueryContext.prototype.K_AS = function() {
    return this.getToken(SQLiteParser.K_AS, 0);
};

Table_or_subqueryContext.prototype.table_or_subquery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_or_subqueryContext);
    } else {
        return this.getTypedRuleContext(Table_or_subqueryContext,i);
    }
};

Table_or_subqueryContext.prototype.join_clause = function() {
    return this.getTypedRuleContext(Join_clauseContext,0);
};

Table_or_subqueryContext.prototype.select_stmt = function() {
    return this.getTypedRuleContext(Select_stmtContext,0);
};

Table_or_subqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterTable_or_subquery(this);
	}
};

Table_or_subqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitTable_or_subquery(this);
	}
};

Table_or_subqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitTable_or_subquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Table_or_subqueryContext = Table_or_subqueryContext;

SQLiteParser.prototype.table_or_subquery = function() {

    var localctx = new Table_or_subqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SQLiteParser.RULE_table_or_subquery);
    var _la = 0; // Token type
    try {
        this.state = 1529;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1485;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
            if(la_===1) {
                this.state = 1482;
                this.database_name();
                this.state = 1483;
                this.match(SQLiteParser.DOT);

            }
            this.state = 1487;
            this.table_name();
            this.state = 1492;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
            if(la_===1) {
                this.state = 1489;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
                if(la_===1) {
                    this.state = 1488;
                    this.match(SQLiteParser.K_AS);

                }
                this.state = 1491;
                this.table_alias();

            }
            this.state = 1499;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case SQLiteParser.K_INDEXED:
            	this.state = 1494;
            	this.match(SQLiteParser.K_INDEXED);
            	this.state = 1495;
            	this.match(SQLiteParser.K_BY);
            	this.state = 1496;
            	this.index_name();
            	break;
            case SQLiteParser.K_NOT:
            	this.state = 1497;
            	this.match(SQLiteParser.K_NOT);
            	this.state = 1498;
            	this.match(SQLiteParser.K_INDEXED);
            	break;
            case SQLiteParser.EOF:
            case SQLiteParser.SCOL:
            case SQLiteParser.CLOSE_PAR:
            case SQLiteParser.COMMA:
            case SQLiteParser.K_ALTER:
            case SQLiteParser.K_ANALYZE:
            case SQLiteParser.K_ATTACH:
            case SQLiteParser.K_BEGIN:
            case SQLiteParser.K_COMMIT:
            case SQLiteParser.K_CREATE:
            case SQLiteParser.K_CROSS:
            case SQLiteParser.K_DELETE:
            case SQLiteParser.K_DETACH:
            case SQLiteParser.K_DROP:
            case SQLiteParser.K_END:
            case SQLiteParser.K_EXCEPT:
            case SQLiteParser.K_EXPLAIN:
            case SQLiteParser.K_GROUP:
            case SQLiteParser.K_INNER:
            case SQLiteParser.K_INSERT:
            case SQLiteParser.K_INTERSECT:
            case SQLiteParser.K_JOIN:
            case SQLiteParser.K_LEFT:
            case SQLiteParser.K_LIMIT:
            case SQLiteParser.K_NATURAL:
            case SQLiteParser.K_ON:
            case SQLiteParser.K_ORDER:
            case SQLiteParser.K_PRAGMA:
            case SQLiteParser.K_REINDEX:
            case SQLiteParser.K_RELEASE:
            case SQLiteParser.K_REPLACE:
            case SQLiteParser.K_ROLLBACK:
            case SQLiteParser.K_SAVEPOINT:
            case SQLiteParser.K_SELECT:
            case SQLiteParser.K_UNION:
            case SQLiteParser.K_UPDATE:
            case SQLiteParser.K_USING:
            case SQLiteParser.K_VACUUM:
            case SQLiteParser.K_VALUES:
            case SQLiteParser.K_WHERE:
            case SQLiteParser.K_WITH:
            case SQLiteParser.UNEXPECTED_CHAR:
            	break;
            default:
            	break;
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1501;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1511;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1502;
                this.table_or_subquery();
                this.state = 1507;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLiteParser.COMMA) {
                    this.state = 1503;
                    this.match(SQLiteParser.COMMA);
                    this.state = 1504;
                    this.table_or_subquery();
                    this.state = 1509;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;

            case 2:
                this.state = 1510;
                this.join_clause();
                break;

            }
            this.state = 1513;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 1518;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
            if(la_===1) {
                this.state = 1515;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
                if(la_===1) {
                    this.state = 1514;
                    this.match(SQLiteParser.K_AS);

                }
                this.state = 1517;
                this.table_alias();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1520;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1521;
            this.select_stmt();
            this.state = 1522;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 1527;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
            if(la_===1) {
                this.state = 1524;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
                if(la_===1) {
                    this.state = 1523;
                    this.match(SQLiteParser.K_AS);

                }
                this.state = 1526;
                this.table_alias();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_join_clause;
    return this;
}

Join_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_clauseContext.prototype.constructor = Join_clauseContext;

Join_clauseContext.prototype.table_or_subquery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_or_subqueryContext);
    } else {
        return this.getTypedRuleContext(Table_or_subqueryContext,i);
    }
};

Join_clauseContext.prototype.join_operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_operatorContext);
    } else {
        return this.getTypedRuleContext(Join_operatorContext,i);
    }
};

Join_clauseContext.prototype.join_constraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Join_constraintContext);
    } else {
        return this.getTypedRuleContext(Join_constraintContext,i);
    }
};

Join_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterJoin_clause(this);
	}
};

Join_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitJoin_clause(this);
	}
};

Join_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitJoin_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Join_clauseContext = Join_clauseContext;

SQLiteParser.prototype.join_clause = function() {

    var localctx = new Join_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SQLiteParser.RULE_join_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1531;
        this.table_or_subquery();
        this.state = 1538;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SQLiteParser.COMMA || _la===SQLiteParser.K_CROSS || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (SQLiteParser.K_INNER - 87)) | (1 << (SQLiteParser.K_JOIN - 87)) | (1 << (SQLiteParser.K_LEFT - 87)) | (1 << (SQLiteParser.K_NATURAL - 87)))) !== 0)) {
            this.state = 1532;
            this.join_operator();
            this.state = 1533;
            this.table_or_subquery();
            this.state = 1534;
            this.join_constraint();
            this.state = 1540;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_join_operator;
    return this;
}

Join_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_operatorContext.prototype.constructor = Join_operatorContext;

Join_operatorContext.prototype.K_JOIN = function() {
    return this.getToken(SQLiteParser.K_JOIN, 0);
};

Join_operatorContext.prototype.K_NATURAL = function() {
    return this.getToken(SQLiteParser.K_NATURAL, 0);
};

Join_operatorContext.prototype.K_LEFT = function() {
    return this.getToken(SQLiteParser.K_LEFT, 0);
};

Join_operatorContext.prototype.K_INNER = function() {
    return this.getToken(SQLiteParser.K_INNER, 0);
};

Join_operatorContext.prototype.K_CROSS = function() {
    return this.getToken(SQLiteParser.K_CROSS, 0);
};

Join_operatorContext.prototype.K_OUTER = function() {
    return this.getToken(SQLiteParser.K_OUTER, 0);
};

Join_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterJoin_operator(this);
	}
};

Join_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitJoin_operator(this);
	}
};

Join_operatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitJoin_operator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Join_operatorContext = Join_operatorContext;

SQLiteParser.prototype.join_operator = function() {

    var localctx = new Join_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SQLiteParser.RULE_join_operator);
    var _la = 0; // Token type
    try {
        this.state = 1554;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLiteParser.COMMA:
            this.enterOuterAlt(localctx, 1);
            this.state = 1541;
            this.match(SQLiteParser.COMMA);
            break;
        case SQLiteParser.K_CROSS:
        case SQLiteParser.K_INNER:
        case SQLiteParser.K_JOIN:
        case SQLiteParser.K_LEFT:
        case SQLiteParser.K_NATURAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1543;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_NATURAL) {
                this.state = 1542;
                this.match(SQLiteParser.K_NATURAL);
            }

            this.state = 1551;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case SQLiteParser.K_LEFT:
            	this.state = 1545;
            	this.match(SQLiteParser.K_LEFT);
            	this.state = 1547;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===SQLiteParser.K_OUTER) {
            	    this.state = 1546;
            	    this.match(SQLiteParser.K_OUTER);
            	}

            	break;
            case SQLiteParser.K_INNER:
            	this.state = 1549;
            	this.match(SQLiteParser.K_INNER);
            	break;
            case SQLiteParser.K_CROSS:
            	this.state = 1550;
            	this.match(SQLiteParser.K_CROSS);
            	break;
            case SQLiteParser.K_JOIN:
            	break;
            default:
            	break;
            }
            this.state = 1553;
            this.match(SQLiteParser.K_JOIN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Join_constraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_join_constraint;
    return this;
}

Join_constraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Join_constraintContext.prototype.constructor = Join_constraintContext;

Join_constraintContext.prototype.K_ON = function() {
    return this.getToken(SQLiteParser.K_ON, 0);
};

Join_constraintContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Join_constraintContext.prototype.K_USING = function() {
    return this.getToken(SQLiteParser.K_USING, 0);
};

Join_constraintContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Join_constraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterJoin_constraint(this);
	}
};

Join_constraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitJoin_constraint(this);
	}
};

Join_constraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitJoin_constraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Join_constraintContext = Join_constraintContext;

SQLiteParser.prototype.join_constraint = function() {

    var localctx = new Join_constraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SQLiteParser.RULE_join_constraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1570;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case SQLiteParser.K_ON:
        	this.state = 1556;
        	this.match(SQLiteParser.K_ON);
        	this.state = 1557;
        	this.expr(0);
        	break;
        case SQLiteParser.K_USING:
        	this.state = 1558;
        	this.match(SQLiteParser.K_USING);
        	this.state = 1559;
        	this.match(SQLiteParser.OPEN_PAR);
        	this.state = 1560;
        	this.column_name();
        	this.state = 1565;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===SQLiteParser.COMMA) {
        	    this.state = 1561;
        	    this.match(SQLiteParser.COMMA);
        	    this.state = 1562;
        	    this.column_name();
        	    this.state = 1567;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	this.state = 1568;
        	this.match(SQLiteParser.CLOSE_PAR);
        	break;
        case SQLiteParser.EOF:
        case SQLiteParser.SCOL:
        case SQLiteParser.CLOSE_PAR:
        case SQLiteParser.COMMA:
        case SQLiteParser.K_ALTER:
        case SQLiteParser.K_ANALYZE:
        case SQLiteParser.K_ATTACH:
        case SQLiteParser.K_BEGIN:
        case SQLiteParser.K_COMMIT:
        case SQLiteParser.K_CREATE:
        case SQLiteParser.K_CROSS:
        case SQLiteParser.K_DELETE:
        case SQLiteParser.K_DETACH:
        case SQLiteParser.K_DROP:
        case SQLiteParser.K_END:
        case SQLiteParser.K_EXCEPT:
        case SQLiteParser.K_EXPLAIN:
        case SQLiteParser.K_GROUP:
        case SQLiteParser.K_INNER:
        case SQLiteParser.K_INSERT:
        case SQLiteParser.K_INTERSECT:
        case SQLiteParser.K_JOIN:
        case SQLiteParser.K_LEFT:
        case SQLiteParser.K_LIMIT:
        case SQLiteParser.K_NATURAL:
        case SQLiteParser.K_ORDER:
        case SQLiteParser.K_PRAGMA:
        case SQLiteParser.K_REINDEX:
        case SQLiteParser.K_RELEASE:
        case SQLiteParser.K_REPLACE:
        case SQLiteParser.K_ROLLBACK:
        case SQLiteParser.K_SAVEPOINT:
        case SQLiteParser.K_SELECT:
        case SQLiteParser.K_UNION:
        case SQLiteParser.K_UPDATE:
        case SQLiteParser.K_VACUUM:
        case SQLiteParser.K_VALUES:
        case SQLiteParser.K_WHERE:
        case SQLiteParser.K_WITH:
        case SQLiteParser.UNEXPECTED_CHAR:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_coreContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_select_core;
    return this;
}

Select_coreContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_coreContext.prototype.constructor = Select_coreContext;

Select_coreContext.prototype.K_SELECT = function() {
    return this.getToken(SQLiteParser.K_SELECT, 0);
};

Select_coreContext.prototype.result_column = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Result_columnContext);
    } else {
        return this.getTypedRuleContext(Result_columnContext,i);
    }
};

Select_coreContext.prototype.K_FROM = function() {
    return this.getToken(SQLiteParser.K_FROM, 0);
};

Select_coreContext.prototype.K_WHERE = function() {
    return this.getToken(SQLiteParser.K_WHERE, 0);
};

Select_coreContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

Select_coreContext.prototype.K_GROUP = function() {
    return this.getToken(SQLiteParser.K_GROUP, 0);
};

Select_coreContext.prototype.K_BY = function() {
    return this.getToken(SQLiteParser.K_BY, 0);
};

Select_coreContext.prototype.K_DISTINCT = function() {
    return this.getToken(SQLiteParser.K_DISTINCT, 0);
};

Select_coreContext.prototype.K_ALL = function() {
    return this.getToken(SQLiteParser.K_ALL, 0);
};

Select_coreContext.prototype.table_or_subquery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Table_or_subqueryContext);
    } else {
        return this.getTypedRuleContext(Table_or_subqueryContext,i);
    }
};

Select_coreContext.prototype.join_clause = function() {
    return this.getTypedRuleContext(Join_clauseContext,0);
};

Select_coreContext.prototype.K_HAVING = function() {
    return this.getToken(SQLiteParser.K_HAVING, 0);
};

Select_coreContext.prototype.K_VALUES = function() {
    return this.getToken(SQLiteParser.K_VALUES, 0);
};

Select_coreContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterSelect_core(this);
	}
};

Select_coreContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitSelect_core(this);
	}
};

Select_coreContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitSelect_core(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Select_coreContext = Select_coreContext;

SQLiteParser.prototype.select_core = function() {

    var localctx = new Select_coreContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SQLiteParser.RULE_select_core);
    var _la = 0; // Token type
    try {
        this.state = 1646;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLiteParser.K_SELECT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1572;
            this.match(SQLiteParser.K_SELECT);
            this.state = 1574;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
            if(la_===1) {
                this.state = 1573;
                _la = this._input.LA(1);
                if(!(_la===SQLiteParser.K_ALL || _la===SQLiteParser.K_DISTINCT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 1576;
            this.result_column();
            this.state = 1581;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 1577;
                this.match(SQLiteParser.COMMA);
                this.state = 1578;
                this.result_column();
                this.state = 1583;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_FROM) {
                this.state = 1584;
                this.match(SQLiteParser.K_FROM);
                this.state = 1594;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1585;
                    this.table_or_subquery();
                    this.state = 1590;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===SQLiteParser.COMMA) {
                        this.state = 1586;
                        this.match(SQLiteParser.COMMA);
                        this.state = 1587;
                        this.table_or_subquery();
                        this.state = 1592;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;

                case 2:
                    this.state = 1593;
                    this.join_clause();
                    break;

                }
            }

            this.state = 1600;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_WHERE) {
                this.state = 1598;
                this.match(SQLiteParser.K_WHERE);
                this.state = 1599;
                this.expr(0);
            }

            this.state = 1616;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SQLiteParser.K_GROUP) {
                this.state = 1602;
                this.match(SQLiteParser.K_GROUP);
                this.state = 1603;
                this.match(SQLiteParser.K_BY);
                this.state = 1604;
                this.expr(0);
                this.state = 1609;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLiteParser.COMMA) {
                    this.state = 1605;
                    this.match(SQLiteParser.COMMA);
                    this.state = 1606;
                    this.expr(0);
                    this.state = 1611;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1614;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SQLiteParser.K_HAVING) {
                    this.state = 1612;
                    this.match(SQLiteParser.K_HAVING);
                    this.state = 1613;
                    this.expr(0);
                }

            }

            break;
        case SQLiteParser.K_VALUES:
            this.enterOuterAlt(localctx, 2);
            this.state = 1618;
            this.match(SQLiteParser.K_VALUES);
            this.state = 1619;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1620;
            this.expr(0);
            this.state = 1625;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 1621;
                this.match(SQLiteParser.COMMA);
                this.state = 1622;
                this.expr(0);
                this.state = 1627;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1628;
            this.match(SQLiteParser.CLOSE_PAR);
            this.state = 1643;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 1629;
                this.match(SQLiteParser.COMMA);
                this.state = 1630;
                this.match(SQLiteParser.OPEN_PAR);
                this.state = 1631;
                this.expr(0);
                this.state = 1636;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SQLiteParser.COMMA) {
                    this.state = 1632;
                    this.match(SQLiteParser.COMMA);
                    this.state = 1633;
                    this.expr(0);
                    this.state = 1638;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1639;
                this.match(SQLiteParser.CLOSE_PAR);
                this.state = 1645;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_compound_operator;
    return this;
}

Compound_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_operatorContext.prototype.constructor = Compound_operatorContext;

Compound_operatorContext.prototype.K_UNION = function() {
    return this.getToken(SQLiteParser.K_UNION, 0);
};

Compound_operatorContext.prototype.K_ALL = function() {
    return this.getToken(SQLiteParser.K_ALL, 0);
};

Compound_operatorContext.prototype.K_INTERSECT = function() {
    return this.getToken(SQLiteParser.K_INTERSECT, 0);
};

Compound_operatorContext.prototype.K_EXCEPT = function() {
    return this.getToken(SQLiteParser.K_EXCEPT, 0);
};

Compound_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterCompound_operator(this);
	}
};

Compound_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitCompound_operator(this);
	}
};

Compound_operatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitCompound_operator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Compound_operatorContext = Compound_operatorContext;

SQLiteParser.prototype.compound_operator = function() {

    var localctx = new Compound_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SQLiteParser.RULE_compound_operator);
    try {
        this.state = 1653;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1648;
            this.match(SQLiteParser.K_UNION);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1649;
            this.match(SQLiteParser.K_UNION);
            this.state = 1650;
            this.match(SQLiteParser.K_ALL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1651;
            this.match(SQLiteParser.K_INTERSECT);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1652;
            this.match(SQLiteParser.K_EXCEPT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cte_table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_cte_table_name;
    return this;
}

Cte_table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cte_table_nameContext.prototype.constructor = Cte_table_nameContext;

Cte_table_nameContext.prototype.table_name = function() {
    return this.getTypedRuleContext(Table_nameContext,0);
};

Cte_table_nameContext.prototype.column_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Column_nameContext);
    } else {
        return this.getTypedRuleContext(Column_nameContext,i);
    }
};

Cte_table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterCte_table_name(this);
	}
};

Cte_table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitCte_table_name(this);
	}
};

Cte_table_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitCte_table_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Cte_table_nameContext = Cte_table_nameContext;

SQLiteParser.prototype.cte_table_name = function() {

    var localctx = new Cte_table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SQLiteParser.RULE_cte_table_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1655;
        this.table_name();
        this.state = 1667;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.OPEN_PAR) {
            this.state = 1656;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1657;
            this.column_name();
            this.state = 1662;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SQLiteParser.COMMA) {
                this.state = 1658;
                this.match(SQLiteParser.COMMA);
                this.state = 1659;
                this.column_name();
                this.state = 1664;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1665;
            this.match(SQLiteParser.CLOSE_PAR);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Signed_numberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_signed_number;
    return this;
}

Signed_numberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signed_numberContext.prototype.constructor = Signed_numberContext;

Signed_numberContext.prototype.NUMERIC_LITERAL = function() {
    return this.getToken(SQLiteParser.NUMERIC_LITERAL, 0);
};

Signed_numberContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterSigned_number(this);
	}
};

Signed_numberContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitSigned_number(this);
	}
};

Signed_numberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitSigned_number(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Signed_numberContext = Signed_numberContext;

SQLiteParser.prototype.signed_number = function() {

    var localctx = new Signed_numberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SQLiteParser.RULE_signed_number);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1670;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SQLiteParser.PLUS || _la===SQLiteParser.MINUS) {
            this.state = 1669;
            _la = this._input.LA(1);
            if(!(_la===SQLiteParser.PLUS || _la===SQLiteParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1672;
        this.match(SQLiteParser.NUMERIC_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Literal_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_literal_value;
    return this;
}

Literal_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Literal_valueContext.prototype.constructor = Literal_valueContext;

Literal_valueContext.prototype.NUMERIC_LITERAL = function() {
    return this.getToken(SQLiteParser.NUMERIC_LITERAL, 0);
};

Literal_valueContext.prototype.STRING_LITERAL = function() {
    return this.getToken(SQLiteParser.STRING_LITERAL, 0);
};

Literal_valueContext.prototype.BLOB_LITERAL = function() {
    return this.getToken(SQLiteParser.BLOB_LITERAL, 0);
};

Literal_valueContext.prototype.K_NULL = function() {
    return this.getToken(SQLiteParser.K_NULL, 0);
};

Literal_valueContext.prototype.K_CURRENT_TIME = function() {
    return this.getToken(SQLiteParser.K_CURRENT_TIME, 0);
};

Literal_valueContext.prototype.K_CURRENT_DATE = function() {
    return this.getToken(SQLiteParser.K_CURRENT_DATE, 0);
};

Literal_valueContext.prototype.K_CURRENT_TIMESTAMP = function() {
    return this.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0);
};

Literal_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterLiteral_value(this);
	}
};

Literal_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitLiteral_value(this);
	}
};

Literal_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitLiteral_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Literal_valueContext = Literal_valueContext;

SQLiteParser.prototype.literal_value = function() {

    var localctx = new Literal_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SQLiteParser.RULE_literal_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1674;
        _la = this._input.LA(1);
        if(!(((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (SQLiteParser.K_CURRENT_DATE - 52)) | (1 << (SQLiteParser.K_CURRENT_TIME - 52)) | (1 << (SQLiteParser.K_CURRENT_TIMESTAMP - 52)))) !== 0) || _la===SQLiteParser.K_NULL || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (SQLiteParser.NUMERIC_LITERAL - 150)) | (1 << (SQLiteParser.STRING_LITERAL - 150)) | (1 << (SQLiteParser.BLOB_LITERAL - 150)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Unary_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_unary_operator;
    return this;
}

Unary_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unary_operatorContext.prototype.constructor = Unary_operatorContext;

Unary_operatorContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

Unary_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterUnary_operator(this);
	}
};

Unary_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitUnary_operator(this);
	}
};

Unary_operatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitUnary_operator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Unary_operatorContext = Unary_operatorContext;

SQLiteParser.prototype.unary_operator = function() {

    var localctx = new Unary_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SQLiteParser.RULE_unary_operator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1676;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) !== 0) || _la===SQLiteParser.K_NOT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Error_messageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_error_message;
    return this;
}

Error_messageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Error_messageContext.prototype.constructor = Error_messageContext;

Error_messageContext.prototype.STRING_LITERAL = function() {
    return this.getToken(SQLiteParser.STRING_LITERAL, 0);
};

Error_messageContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterError_message(this);
	}
};

Error_messageContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitError_message(this);
	}
};

Error_messageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitError_message(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Error_messageContext = Error_messageContext;

SQLiteParser.prototype.error_message = function() {

    var localctx = new Error_messageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SQLiteParser.RULE_error_message);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1678;
        this.match(SQLiteParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Module_argumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_module_argument;
    return this;
}

Module_argumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_argumentContext.prototype.constructor = Module_argumentContext;

Module_argumentContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Module_argumentContext.prototype.column_def = function() {
    return this.getTypedRuleContext(Column_defContext,0);
};

Module_argumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterModule_argument(this);
	}
};

Module_argumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitModule_argument(this);
	}
};

Module_argumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitModule_argument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Module_argumentContext = Module_argumentContext;

SQLiteParser.prototype.module_argument = function() {

    var localctx = new Module_argumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SQLiteParser.RULE_module_argument);
    try {
        this.state = 1682;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1680;
            this.expr(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1681;
            this.column_def();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_column_alias;
    return this;
}

Column_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_aliasContext.prototype.constructor = Column_aliasContext;

Column_aliasContext.prototype.IDENTIFIER = function() {
    return this.getToken(SQLiteParser.IDENTIFIER, 0);
};

Column_aliasContext.prototype.STRING_LITERAL = function() {
    return this.getToken(SQLiteParser.STRING_LITERAL, 0);
};

Column_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterColumn_alias(this);
	}
};

Column_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitColumn_alias(this);
	}
};

Column_aliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitColumn_alias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Column_aliasContext = Column_aliasContext;

SQLiteParser.prototype.column_alias = function() {

    var localctx = new Column_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SQLiteParser.RULE_column_alias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1684;
        _la = this._input.LA(1);
        if(!(_la===SQLiteParser.IDENTIFIER || _la===SQLiteParser.STRING_LITERAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.K_ABORT = function() {
    return this.getToken(SQLiteParser.K_ABORT, 0);
};

KeywordContext.prototype.K_ACTION = function() {
    return this.getToken(SQLiteParser.K_ACTION, 0);
};

KeywordContext.prototype.K_ADD = function() {
    return this.getToken(SQLiteParser.K_ADD, 0);
};

KeywordContext.prototype.K_AFTER = function() {
    return this.getToken(SQLiteParser.K_AFTER, 0);
};

KeywordContext.prototype.K_ALL = function() {
    return this.getToken(SQLiteParser.K_ALL, 0);
};

KeywordContext.prototype.K_ALTER = function() {
    return this.getToken(SQLiteParser.K_ALTER, 0);
};

KeywordContext.prototype.K_ANALYZE = function() {
    return this.getToken(SQLiteParser.K_ANALYZE, 0);
};

KeywordContext.prototype.K_AND = function() {
    return this.getToken(SQLiteParser.K_AND, 0);
};

KeywordContext.prototype.K_AS = function() {
    return this.getToken(SQLiteParser.K_AS, 0);
};

KeywordContext.prototype.K_ASC = function() {
    return this.getToken(SQLiteParser.K_ASC, 0);
};

KeywordContext.prototype.K_ATTACH = function() {
    return this.getToken(SQLiteParser.K_ATTACH, 0);
};

KeywordContext.prototype.K_AUTOINCREMENT = function() {
    return this.getToken(SQLiteParser.K_AUTOINCREMENT, 0);
};

KeywordContext.prototype.K_BEFORE = function() {
    return this.getToken(SQLiteParser.K_BEFORE, 0);
};

KeywordContext.prototype.K_BEGIN = function() {
    return this.getToken(SQLiteParser.K_BEGIN, 0);
};

KeywordContext.prototype.K_BETWEEN = function() {
    return this.getToken(SQLiteParser.K_BETWEEN, 0);
};

KeywordContext.prototype.K_BY = function() {
    return this.getToken(SQLiteParser.K_BY, 0);
};

KeywordContext.prototype.K_CASCADE = function() {
    return this.getToken(SQLiteParser.K_CASCADE, 0);
};

KeywordContext.prototype.K_CASE = function() {
    return this.getToken(SQLiteParser.K_CASE, 0);
};

KeywordContext.prototype.K_CAST = function() {
    return this.getToken(SQLiteParser.K_CAST, 0);
};

KeywordContext.prototype.K_CHECK = function() {
    return this.getToken(SQLiteParser.K_CHECK, 0);
};

KeywordContext.prototype.K_COLLATE = function() {
    return this.getToken(SQLiteParser.K_COLLATE, 0);
};

KeywordContext.prototype.K_COLUMN = function() {
    return this.getToken(SQLiteParser.K_COLUMN, 0);
};

KeywordContext.prototype.K_COMMIT = function() {
    return this.getToken(SQLiteParser.K_COMMIT, 0);
};

KeywordContext.prototype.K_CONFLICT = function() {
    return this.getToken(SQLiteParser.K_CONFLICT, 0);
};

KeywordContext.prototype.K_CONSTRAINT = function() {
    return this.getToken(SQLiteParser.K_CONSTRAINT, 0);
};

KeywordContext.prototype.K_CREATE = function() {
    return this.getToken(SQLiteParser.K_CREATE, 0);
};

KeywordContext.prototype.K_CROSS = function() {
    return this.getToken(SQLiteParser.K_CROSS, 0);
};

KeywordContext.prototype.K_CURRENT_DATE = function() {
    return this.getToken(SQLiteParser.K_CURRENT_DATE, 0);
};

KeywordContext.prototype.K_CURRENT_TIME = function() {
    return this.getToken(SQLiteParser.K_CURRENT_TIME, 0);
};

KeywordContext.prototype.K_CURRENT_TIMESTAMP = function() {
    return this.getToken(SQLiteParser.K_CURRENT_TIMESTAMP, 0);
};

KeywordContext.prototype.K_DATABASE = function() {
    return this.getToken(SQLiteParser.K_DATABASE, 0);
};

KeywordContext.prototype.K_DEFAULT = function() {
    return this.getToken(SQLiteParser.K_DEFAULT, 0);
};

KeywordContext.prototype.K_DEFERRABLE = function() {
    return this.getToken(SQLiteParser.K_DEFERRABLE, 0);
};

KeywordContext.prototype.K_DEFERRED = function() {
    return this.getToken(SQLiteParser.K_DEFERRED, 0);
};

KeywordContext.prototype.K_DELETE = function() {
    return this.getToken(SQLiteParser.K_DELETE, 0);
};

KeywordContext.prototype.K_DESC = function() {
    return this.getToken(SQLiteParser.K_DESC, 0);
};

KeywordContext.prototype.K_DETACH = function() {
    return this.getToken(SQLiteParser.K_DETACH, 0);
};

KeywordContext.prototype.K_DISTINCT = function() {
    return this.getToken(SQLiteParser.K_DISTINCT, 0);
};

KeywordContext.prototype.K_DROP = function() {
    return this.getToken(SQLiteParser.K_DROP, 0);
};

KeywordContext.prototype.K_EACH = function() {
    return this.getToken(SQLiteParser.K_EACH, 0);
};

KeywordContext.prototype.K_ELSE = function() {
    return this.getToken(SQLiteParser.K_ELSE, 0);
};

KeywordContext.prototype.K_END = function() {
    return this.getToken(SQLiteParser.K_END, 0);
};

KeywordContext.prototype.K_ESCAPE = function() {
    return this.getToken(SQLiteParser.K_ESCAPE, 0);
};

KeywordContext.prototype.K_EXCEPT = function() {
    return this.getToken(SQLiteParser.K_EXCEPT, 0);
};

KeywordContext.prototype.K_EXCLUSIVE = function() {
    return this.getToken(SQLiteParser.K_EXCLUSIVE, 0);
};

KeywordContext.prototype.K_EXISTS = function() {
    return this.getToken(SQLiteParser.K_EXISTS, 0);
};

KeywordContext.prototype.K_EXPLAIN = function() {
    return this.getToken(SQLiteParser.K_EXPLAIN, 0);
};

KeywordContext.prototype.K_FAIL = function() {
    return this.getToken(SQLiteParser.K_FAIL, 0);
};

KeywordContext.prototype.K_FOR = function() {
    return this.getToken(SQLiteParser.K_FOR, 0);
};

KeywordContext.prototype.K_FOREIGN = function() {
    return this.getToken(SQLiteParser.K_FOREIGN, 0);
};

KeywordContext.prototype.K_FROM = function() {
    return this.getToken(SQLiteParser.K_FROM, 0);
};

KeywordContext.prototype.K_FULL = function() {
    return this.getToken(SQLiteParser.K_FULL, 0);
};

KeywordContext.prototype.K_GLOB = function() {
    return this.getToken(SQLiteParser.K_GLOB, 0);
};

KeywordContext.prototype.K_GROUP = function() {
    return this.getToken(SQLiteParser.K_GROUP, 0);
};

KeywordContext.prototype.K_HAVING = function() {
    return this.getToken(SQLiteParser.K_HAVING, 0);
};

KeywordContext.prototype.K_IF = function() {
    return this.getToken(SQLiteParser.K_IF, 0);
};

KeywordContext.prototype.K_IGNORE = function() {
    return this.getToken(SQLiteParser.K_IGNORE, 0);
};

KeywordContext.prototype.K_IMMEDIATE = function() {
    return this.getToken(SQLiteParser.K_IMMEDIATE, 0);
};

KeywordContext.prototype.K_IN = function() {
    return this.getToken(SQLiteParser.K_IN, 0);
};

KeywordContext.prototype.K_INDEX = function() {
    return this.getToken(SQLiteParser.K_INDEX, 0);
};

KeywordContext.prototype.K_INDEXED = function() {
    return this.getToken(SQLiteParser.K_INDEXED, 0);
};

KeywordContext.prototype.K_INITIALLY = function() {
    return this.getToken(SQLiteParser.K_INITIALLY, 0);
};

KeywordContext.prototype.K_INNER = function() {
    return this.getToken(SQLiteParser.K_INNER, 0);
};

KeywordContext.prototype.K_INSERT = function() {
    return this.getToken(SQLiteParser.K_INSERT, 0);
};

KeywordContext.prototype.K_INSTEAD = function() {
    return this.getToken(SQLiteParser.K_INSTEAD, 0);
};

KeywordContext.prototype.K_INTERSECT = function() {
    return this.getToken(SQLiteParser.K_INTERSECT, 0);
};

KeywordContext.prototype.K_INTO = function() {
    return this.getToken(SQLiteParser.K_INTO, 0);
};

KeywordContext.prototype.K_IS = function() {
    return this.getToken(SQLiteParser.K_IS, 0);
};

KeywordContext.prototype.K_ISNULL = function() {
    return this.getToken(SQLiteParser.K_ISNULL, 0);
};

KeywordContext.prototype.K_JOIN = function() {
    return this.getToken(SQLiteParser.K_JOIN, 0);
};

KeywordContext.prototype.K_KEY = function() {
    return this.getToken(SQLiteParser.K_KEY, 0);
};

KeywordContext.prototype.K_LEFT = function() {
    return this.getToken(SQLiteParser.K_LEFT, 0);
};

KeywordContext.prototype.K_LIKE = function() {
    return this.getToken(SQLiteParser.K_LIKE, 0);
};

KeywordContext.prototype.K_LIMIT = function() {
    return this.getToken(SQLiteParser.K_LIMIT, 0);
};

KeywordContext.prototype.K_MATCH = function() {
    return this.getToken(SQLiteParser.K_MATCH, 0);
};

KeywordContext.prototype.K_NATURAL = function() {
    return this.getToken(SQLiteParser.K_NATURAL, 0);
};

KeywordContext.prototype.K_NO = function() {
    return this.getToken(SQLiteParser.K_NO, 0);
};

KeywordContext.prototype.K_NOT = function() {
    return this.getToken(SQLiteParser.K_NOT, 0);
};

KeywordContext.prototype.K_NOTNULL = function() {
    return this.getToken(SQLiteParser.K_NOTNULL, 0);
};

KeywordContext.prototype.K_NULL = function() {
    return this.getToken(SQLiteParser.K_NULL, 0);
};

KeywordContext.prototype.K_OF = function() {
    return this.getToken(SQLiteParser.K_OF, 0);
};

KeywordContext.prototype.K_OFFSET = function() {
    return this.getToken(SQLiteParser.K_OFFSET, 0);
};

KeywordContext.prototype.K_ON = function() {
    return this.getToken(SQLiteParser.K_ON, 0);
};

KeywordContext.prototype.K_OR = function() {
    return this.getToken(SQLiteParser.K_OR, 0);
};

KeywordContext.prototype.K_ORDER = function() {
    return this.getToken(SQLiteParser.K_ORDER, 0);
};

KeywordContext.prototype.K_OUTER = function() {
    return this.getToken(SQLiteParser.K_OUTER, 0);
};

KeywordContext.prototype.K_PLAN = function() {
    return this.getToken(SQLiteParser.K_PLAN, 0);
};

KeywordContext.prototype.K_PRAGMA = function() {
    return this.getToken(SQLiteParser.K_PRAGMA, 0);
};

KeywordContext.prototype.K_PRIMARY = function() {
    return this.getToken(SQLiteParser.K_PRIMARY, 0);
};

KeywordContext.prototype.K_QUERY = function() {
    return this.getToken(SQLiteParser.K_QUERY, 0);
};

KeywordContext.prototype.K_RAISE = function() {
    return this.getToken(SQLiteParser.K_RAISE, 0);
};

KeywordContext.prototype.K_RECURSIVE = function() {
    return this.getToken(SQLiteParser.K_RECURSIVE, 0);
};

KeywordContext.prototype.K_REFERENCES = function() {
    return this.getToken(SQLiteParser.K_REFERENCES, 0);
};

KeywordContext.prototype.K_REGEXP = function() {
    return this.getToken(SQLiteParser.K_REGEXP, 0);
};

KeywordContext.prototype.K_REINDEX = function() {
    return this.getToken(SQLiteParser.K_REINDEX, 0);
};

KeywordContext.prototype.K_RELEASE = function() {
    return this.getToken(SQLiteParser.K_RELEASE, 0);
};

KeywordContext.prototype.K_RENAME = function() {
    return this.getToken(SQLiteParser.K_RENAME, 0);
};

KeywordContext.prototype.K_REPLACE = function() {
    return this.getToken(SQLiteParser.K_REPLACE, 0);
};

KeywordContext.prototype.K_RESTRICT = function() {
    return this.getToken(SQLiteParser.K_RESTRICT, 0);
};

KeywordContext.prototype.K_RIGHT = function() {
    return this.getToken(SQLiteParser.K_RIGHT, 0);
};

KeywordContext.prototype.K_ROLLBACK = function() {
    return this.getToken(SQLiteParser.K_ROLLBACK, 0);
};

KeywordContext.prototype.K_ROW = function() {
    return this.getToken(SQLiteParser.K_ROW, 0);
};

KeywordContext.prototype.K_SAVEPOINT = function() {
    return this.getToken(SQLiteParser.K_SAVEPOINT, 0);
};

KeywordContext.prototype.K_SELECT = function() {
    return this.getToken(SQLiteParser.K_SELECT, 0);
};

KeywordContext.prototype.K_SET = function() {
    return this.getToken(SQLiteParser.K_SET, 0);
};

KeywordContext.prototype.K_TABLE = function() {
    return this.getToken(SQLiteParser.K_TABLE, 0);
};

KeywordContext.prototype.K_TEMP = function() {
    return this.getToken(SQLiteParser.K_TEMP, 0);
};

KeywordContext.prototype.K_TEMPORARY = function() {
    return this.getToken(SQLiteParser.K_TEMPORARY, 0);
};

KeywordContext.prototype.K_THEN = function() {
    return this.getToken(SQLiteParser.K_THEN, 0);
};

KeywordContext.prototype.K_TO = function() {
    return this.getToken(SQLiteParser.K_TO, 0);
};

KeywordContext.prototype.K_TRANSACTION = function() {
    return this.getToken(SQLiteParser.K_TRANSACTION, 0);
};

KeywordContext.prototype.K_TRIGGER = function() {
    return this.getToken(SQLiteParser.K_TRIGGER, 0);
};

KeywordContext.prototype.K_UNION = function() {
    return this.getToken(SQLiteParser.K_UNION, 0);
};

KeywordContext.prototype.K_UNIQUE = function() {
    return this.getToken(SQLiteParser.K_UNIQUE, 0);
};

KeywordContext.prototype.K_UPDATE = function() {
    return this.getToken(SQLiteParser.K_UPDATE, 0);
};

KeywordContext.prototype.K_USING = function() {
    return this.getToken(SQLiteParser.K_USING, 0);
};

KeywordContext.prototype.K_VACUUM = function() {
    return this.getToken(SQLiteParser.K_VACUUM, 0);
};

KeywordContext.prototype.K_VALUES = function() {
    return this.getToken(SQLiteParser.K_VALUES, 0);
};

KeywordContext.prototype.K_VIEW = function() {
    return this.getToken(SQLiteParser.K_VIEW, 0);
};

KeywordContext.prototype.K_VIRTUAL = function() {
    return this.getToken(SQLiteParser.K_VIRTUAL, 0);
};

KeywordContext.prototype.K_WHEN = function() {
    return this.getToken(SQLiteParser.K_WHEN, 0);
};

KeywordContext.prototype.K_WHERE = function() {
    return this.getToken(SQLiteParser.K_WHERE, 0);
};

KeywordContext.prototype.K_WITH = function() {
    return this.getToken(SQLiteParser.K_WITH, 0);
};

KeywordContext.prototype.K_WITHOUT = function() {
    return this.getToken(SQLiteParser.K_WITHOUT, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitKeyword(this);
	}
};

KeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.KeywordContext = KeywordContext;

SQLiteParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SQLiteParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1686;
        _la = this._input.LA(1);
        if(!(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (SQLiteParser.K_ABORT - 25)) | (1 << (SQLiteParser.K_ACTION - 25)) | (1 << (SQLiteParser.K_ADD - 25)) | (1 << (SQLiteParser.K_AFTER - 25)) | (1 << (SQLiteParser.K_ALL - 25)) | (1 << (SQLiteParser.K_ALTER - 25)) | (1 << (SQLiteParser.K_ANALYZE - 25)) | (1 << (SQLiteParser.K_AND - 25)) | (1 << (SQLiteParser.K_AS - 25)) | (1 << (SQLiteParser.K_ASC - 25)) | (1 << (SQLiteParser.K_ATTACH - 25)) | (1 << (SQLiteParser.K_AUTOINCREMENT - 25)) | (1 << (SQLiteParser.K_BEFORE - 25)) | (1 << (SQLiteParser.K_BEGIN - 25)) | (1 << (SQLiteParser.K_BETWEEN - 25)) | (1 << (SQLiteParser.K_BY - 25)) | (1 << (SQLiteParser.K_CASCADE - 25)) | (1 << (SQLiteParser.K_CASE - 25)) | (1 << (SQLiteParser.K_CAST - 25)) | (1 << (SQLiteParser.K_CHECK - 25)) | (1 << (SQLiteParser.K_COLLATE - 25)) | (1 << (SQLiteParser.K_COLUMN - 25)) | (1 << (SQLiteParser.K_COMMIT - 25)) | (1 << (SQLiteParser.K_CONFLICT - 25)) | (1 << (SQLiteParser.K_CONSTRAINT - 25)) | (1 << (SQLiteParser.K_CREATE - 25)) | (1 << (SQLiteParser.K_CROSS - 25)) | (1 << (SQLiteParser.K_CURRENT_DATE - 25)) | (1 << (SQLiteParser.K_CURRENT_TIME - 25)) | (1 << (SQLiteParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (SQLiteParser.K_DATABASE - 25)) | (1 << (SQLiteParser.K_DEFAULT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (SQLiteParser.K_DEFERRABLE - 57)) | (1 << (SQLiteParser.K_DEFERRED - 57)) | (1 << (SQLiteParser.K_DELETE - 57)) | (1 << (SQLiteParser.K_DESC - 57)) | (1 << (SQLiteParser.K_DETACH - 57)) | (1 << (SQLiteParser.K_DISTINCT - 57)) | (1 << (SQLiteParser.K_DROP - 57)) | (1 << (SQLiteParser.K_EACH - 57)) | (1 << (SQLiteParser.K_ELSE - 57)) | (1 << (SQLiteParser.K_END - 57)) | (1 << (SQLiteParser.K_ESCAPE - 57)) | (1 << (SQLiteParser.K_EXCEPT - 57)) | (1 << (SQLiteParser.K_EXCLUSIVE - 57)) | (1 << (SQLiteParser.K_EXISTS - 57)) | (1 << (SQLiteParser.K_EXPLAIN - 57)) | (1 << (SQLiteParser.K_FAIL - 57)) | (1 << (SQLiteParser.K_FOR - 57)) | (1 << (SQLiteParser.K_FOREIGN - 57)) | (1 << (SQLiteParser.K_FROM - 57)) | (1 << (SQLiteParser.K_FULL - 57)) | (1 << (SQLiteParser.K_GLOB - 57)) | (1 << (SQLiteParser.K_GROUP - 57)) | (1 << (SQLiteParser.K_HAVING - 57)) | (1 << (SQLiteParser.K_IF - 57)) | (1 << (SQLiteParser.K_IGNORE - 57)) | (1 << (SQLiteParser.K_IMMEDIATE - 57)) | (1 << (SQLiteParser.K_IN - 57)) | (1 << (SQLiteParser.K_INDEX - 57)) | (1 << (SQLiteParser.K_INDEXED - 57)) | (1 << (SQLiteParser.K_INITIALLY - 57)) | (1 << (SQLiteParser.K_INNER - 57)) | (1 << (SQLiteParser.K_INSERT - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (SQLiteParser.K_INSTEAD - 89)) | (1 << (SQLiteParser.K_INTERSECT - 89)) | (1 << (SQLiteParser.K_INTO - 89)) | (1 << (SQLiteParser.K_IS - 89)) | (1 << (SQLiteParser.K_ISNULL - 89)) | (1 << (SQLiteParser.K_JOIN - 89)) | (1 << (SQLiteParser.K_KEY - 89)) | (1 << (SQLiteParser.K_LEFT - 89)) | (1 << (SQLiteParser.K_LIKE - 89)) | (1 << (SQLiteParser.K_LIMIT - 89)) | (1 << (SQLiteParser.K_MATCH - 89)) | (1 << (SQLiteParser.K_NATURAL - 89)) | (1 << (SQLiteParser.K_NO - 89)) | (1 << (SQLiteParser.K_NOT - 89)) | (1 << (SQLiteParser.K_NOTNULL - 89)) | (1 << (SQLiteParser.K_NULL - 89)) | (1 << (SQLiteParser.K_OF - 89)) | (1 << (SQLiteParser.K_OFFSET - 89)) | (1 << (SQLiteParser.K_ON - 89)) | (1 << (SQLiteParser.K_OR - 89)) | (1 << (SQLiteParser.K_ORDER - 89)) | (1 << (SQLiteParser.K_OUTER - 89)) | (1 << (SQLiteParser.K_PLAN - 89)) | (1 << (SQLiteParser.K_PRAGMA - 89)) | (1 << (SQLiteParser.K_PRIMARY - 89)) | (1 << (SQLiteParser.K_QUERY - 89)) | (1 << (SQLiteParser.K_RAISE - 89)) | (1 << (SQLiteParser.K_RECURSIVE - 89)) | (1 << (SQLiteParser.K_REFERENCES - 89)) | (1 << (SQLiteParser.K_REGEXP - 89)) | (1 << (SQLiteParser.K_REINDEX - 89)) | (1 << (SQLiteParser.K_RELEASE - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (SQLiteParser.K_RENAME - 121)) | (1 << (SQLiteParser.K_REPLACE - 121)) | (1 << (SQLiteParser.K_RESTRICT - 121)) | (1 << (SQLiteParser.K_RIGHT - 121)) | (1 << (SQLiteParser.K_ROLLBACK - 121)) | (1 << (SQLiteParser.K_ROW - 121)) | (1 << (SQLiteParser.K_SAVEPOINT - 121)) | (1 << (SQLiteParser.K_SELECT - 121)) | (1 << (SQLiteParser.K_SET - 121)) | (1 << (SQLiteParser.K_TABLE - 121)) | (1 << (SQLiteParser.K_TEMP - 121)) | (1 << (SQLiteParser.K_TEMPORARY - 121)) | (1 << (SQLiteParser.K_THEN - 121)) | (1 << (SQLiteParser.K_TO - 121)) | (1 << (SQLiteParser.K_TRANSACTION - 121)) | (1 << (SQLiteParser.K_TRIGGER - 121)) | (1 << (SQLiteParser.K_UNION - 121)) | (1 << (SQLiteParser.K_UNIQUE - 121)) | (1 << (SQLiteParser.K_UPDATE - 121)) | (1 << (SQLiteParser.K_USING - 121)) | (1 << (SQLiteParser.K_VACUUM - 121)) | (1 << (SQLiteParser.K_VALUES - 121)) | (1 << (SQLiteParser.K_VIEW - 121)) | (1 << (SQLiteParser.K_VIRTUAL - 121)) | (1 << (SQLiteParser.K_WHEN - 121)) | (1 << (SQLiteParser.K_WHERE - 121)) | (1 << (SQLiteParser.K_WITH - 121)) | (1 << (SQLiteParser.K_WITHOUT - 121)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_name;
    return this;
}

NameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameContext.prototype.constructor = NameContext;

NameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

NameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterName(this);
	}
};

NameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitName(this);
	}
};

NameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.NameContext = NameContext;

SQLiteParser.prototype.name = function() {

    var localctx = new NameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SQLiteParser.RULE_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1688;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_function_name;
    return this;
}

Function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_nameContext.prototype.constructor = Function_nameContext;

Function_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterFunction_name(this);
	}
};

Function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitFunction_name(this);
	}
};

Function_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitFunction_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Function_nameContext = Function_nameContext;

SQLiteParser.prototype.function_name = function() {

    var localctx = new Function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SQLiteParser.RULE_function_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1690;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Database_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_database_name;
    return this;
}

Database_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Database_nameContext.prototype.constructor = Database_nameContext;

Database_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Database_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterDatabase_name(this);
	}
};

Database_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitDatabase_name(this);
	}
};

Database_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitDatabase_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Database_nameContext = Database_nameContext;

SQLiteParser.prototype.database_name = function() {

    var localctx = new Database_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SQLiteParser.RULE_database_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1692;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_table_name;
    return this;
}

Table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_nameContext.prototype.constructor = Table_nameContext;

Table_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterTable_name(this);
	}
};

Table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitTable_name(this);
	}
};

Table_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitTable_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Table_nameContext = Table_nameContext;

SQLiteParser.prototype.table_name = function() {

    var localctx = new Table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SQLiteParser.RULE_table_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1694;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_or_index_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_table_or_index_name;
    return this;
}

Table_or_index_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_or_index_nameContext.prototype.constructor = Table_or_index_nameContext;

Table_or_index_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Table_or_index_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterTable_or_index_name(this);
	}
};

Table_or_index_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitTable_or_index_name(this);
	}
};

Table_or_index_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitTable_or_index_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Table_or_index_nameContext = Table_or_index_nameContext;

SQLiteParser.prototype.table_or_index_name = function() {

    var localctx = new Table_or_index_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SQLiteParser.RULE_table_or_index_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1696;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function New_table_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_new_table_name;
    return this;
}

New_table_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
New_table_nameContext.prototype.constructor = New_table_nameContext;

New_table_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

New_table_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterNew_table_name(this);
	}
};

New_table_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitNew_table_name(this);
	}
};

New_table_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitNew_table_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.New_table_nameContext = New_table_nameContext;

SQLiteParser.prototype.new_table_name = function() {

    var localctx = new New_table_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SQLiteParser.RULE_new_table_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1698;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Column_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_column_name;
    return this;
}

Column_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_nameContext.prototype.constructor = Column_nameContext;

Column_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Column_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterColumn_name(this);
	}
};

Column_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitColumn_name(this);
	}
};

Column_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitColumn_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Column_nameContext = Column_nameContext;

SQLiteParser.prototype.column_name = function() {

    var localctx = new Column_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SQLiteParser.RULE_column_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1700;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Collation_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_collation_name;
    return this;
}

Collation_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Collation_nameContext.prototype.constructor = Collation_nameContext;

Collation_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Collation_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterCollation_name(this);
	}
};

Collation_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitCollation_name(this);
	}
};

Collation_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitCollation_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Collation_nameContext = Collation_nameContext;

SQLiteParser.prototype.collation_name = function() {

    var localctx = new Collation_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SQLiteParser.RULE_collation_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1702;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Foreign_tableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_foreign_table;
    return this;
}

Foreign_tableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Foreign_tableContext.prototype.constructor = Foreign_tableContext;

Foreign_tableContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Foreign_tableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterForeign_table(this);
	}
};

Foreign_tableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitForeign_table(this);
	}
};

Foreign_tableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitForeign_table(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Foreign_tableContext = Foreign_tableContext;

SQLiteParser.prototype.foreign_table = function() {

    var localctx = new Foreign_tableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SQLiteParser.RULE_foreign_table);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1704;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Index_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_index_name;
    return this;
}

Index_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Index_nameContext.prototype.constructor = Index_nameContext;

Index_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Index_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterIndex_name(this);
	}
};

Index_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitIndex_name(this);
	}
};

Index_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitIndex_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Index_nameContext = Index_nameContext;

SQLiteParser.prototype.index_name = function() {

    var localctx = new Index_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SQLiteParser.RULE_index_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1706;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Trigger_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_trigger_name;
    return this;
}

Trigger_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Trigger_nameContext.prototype.constructor = Trigger_nameContext;

Trigger_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Trigger_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterTrigger_name(this);
	}
};

Trigger_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitTrigger_name(this);
	}
};

Trigger_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitTrigger_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Trigger_nameContext = Trigger_nameContext;

SQLiteParser.prototype.trigger_name = function() {

    var localctx = new Trigger_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SQLiteParser.RULE_trigger_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1708;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function View_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_view_name;
    return this;
}

View_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
View_nameContext.prototype.constructor = View_nameContext;

View_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

View_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterView_name(this);
	}
};

View_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitView_name(this);
	}
};

View_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitView_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.View_nameContext = View_nameContext;

SQLiteParser.prototype.view_name = function() {

    var localctx = new View_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SQLiteParser.RULE_view_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1710;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Module_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_module_name;
    return this;
}

Module_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Module_nameContext.prototype.constructor = Module_nameContext;

Module_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Module_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterModule_name(this);
	}
};

Module_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitModule_name(this);
	}
};

Module_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitModule_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Module_nameContext = Module_nameContext;

SQLiteParser.prototype.module_name = function() {

    var localctx = new Module_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SQLiteParser.RULE_module_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1712;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pragma_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_pragma_name;
    return this;
}

Pragma_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pragma_nameContext.prototype.constructor = Pragma_nameContext;

Pragma_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Pragma_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterPragma_name(this);
	}
};

Pragma_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitPragma_name(this);
	}
};

Pragma_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitPragma_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Pragma_nameContext = Pragma_nameContext;

SQLiteParser.prototype.pragma_name = function() {

    var localctx = new Pragma_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SQLiteParser.RULE_pragma_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1714;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Savepoint_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_savepoint_name;
    return this;
}

Savepoint_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Savepoint_nameContext.prototype.constructor = Savepoint_nameContext;

Savepoint_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Savepoint_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterSavepoint_name(this);
	}
};

Savepoint_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitSavepoint_name(this);
	}
};

Savepoint_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitSavepoint_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Savepoint_nameContext = Savepoint_nameContext;

SQLiteParser.prototype.savepoint_name = function() {

    var localctx = new Savepoint_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SQLiteParser.RULE_savepoint_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1716;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Table_aliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_table_alias;
    return this;
}

Table_aliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Table_aliasContext.prototype.constructor = Table_aliasContext;

Table_aliasContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Table_aliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterTable_alias(this);
	}
};

Table_aliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitTable_alias(this);
	}
};

Table_aliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitTable_alias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Table_aliasContext = Table_aliasContext;

SQLiteParser.prototype.table_alias = function() {

    var localctx = new Table_aliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SQLiteParser.RULE_table_alias);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1718;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Transaction_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_transaction_name;
    return this;
}

Transaction_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_nameContext.prototype.constructor = Transaction_nameContext;

Transaction_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Transaction_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterTransaction_name(this);
	}
};

Transaction_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitTransaction_name(this);
	}
};

Transaction_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitTransaction_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Transaction_nameContext = Transaction_nameContext;

SQLiteParser.prototype.transaction_name = function() {

    var localctx = new Transaction_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SQLiteParser.RULE_transaction_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1720;
        this.any_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Any_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SQLiteParser.RULE_any_name;
    return this;
}

Any_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Any_nameContext.prototype.constructor = Any_nameContext;

Any_nameContext.prototype.IDENTIFIER = function() {
    return this.getToken(SQLiteParser.IDENTIFIER, 0);
};

Any_nameContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

Any_nameContext.prototype.STRING_LITERAL = function() {
    return this.getToken(SQLiteParser.STRING_LITERAL, 0);
};

Any_nameContext.prototype.any_name = function() {
    return this.getTypedRuleContext(Any_nameContext,0);
};

Any_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.enterAny_name(this);
	}
};

Any_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SQLiteListener ) {
        listener.exitAny_name(this);
	}
};

Any_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof SQLiteVisitor ) {
        return visitor.visitAny_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




SQLiteParser.Any_nameContext = Any_nameContext;

SQLiteParser.prototype.any_name = function() {

    var localctx = new Any_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SQLiteParser.RULE_any_name);
    try {
        this.state = 1729;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SQLiteParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1722;
            this.match(SQLiteParser.IDENTIFIER);
            break;
        case SQLiteParser.K_ABORT:
        case SQLiteParser.K_ACTION:
        case SQLiteParser.K_ADD:
        case SQLiteParser.K_AFTER:
        case SQLiteParser.K_ALL:
        case SQLiteParser.K_ALTER:
        case SQLiteParser.K_ANALYZE:
        case SQLiteParser.K_AND:
        case SQLiteParser.K_AS:
        case SQLiteParser.K_ASC:
        case SQLiteParser.K_ATTACH:
        case SQLiteParser.K_AUTOINCREMENT:
        case SQLiteParser.K_BEFORE:
        case SQLiteParser.K_BEGIN:
        case SQLiteParser.K_BETWEEN:
        case SQLiteParser.K_BY:
        case SQLiteParser.K_CASCADE:
        case SQLiteParser.K_CASE:
        case SQLiteParser.K_CAST:
        case SQLiteParser.K_CHECK:
        case SQLiteParser.K_COLLATE:
        case SQLiteParser.K_COLUMN:
        case SQLiteParser.K_COMMIT:
        case SQLiteParser.K_CONFLICT:
        case SQLiteParser.K_CONSTRAINT:
        case SQLiteParser.K_CREATE:
        case SQLiteParser.K_CROSS:
        case SQLiteParser.K_CURRENT_DATE:
        case SQLiteParser.K_CURRENT_TIME:
        case SQLiteParser.K_CURRENT_TIMESTAMP:
        case SQLiteParser.K_DATABASE:
        case SQLiteParser.K_DEFAULT:
        case SQLiteParser.K_DEFERRABLE:
        case SQLiteParser.K_DEFERRED:
        case SQLiteParser.K_DELETE:
        case SQLiteParser.K_DESC:
        case SQLiteParser.K_DETACH:
        case SQLiteParser.K_DISTINCT:
        case SQLiteParser.K_DROP:
        case SQLiteParser.K_EACH:
        case SQLiteParser.K_ELSE:
        case SQLiteParser.K_END:
        case SQLiteParser.K_ESCAPE:
        case SQLiteParser.K_EXCEPT:
        case SQLiteParser.K_EXCLUSIVE:
        case SQLiteParser.K_EXISTS:
        case SQLiteParser.K_EXPLAIN:
        case SQLiteParser.K_FAIL:
        case SQLiteParser.K_FOR:
        case SQLiteParser.K_FOREIGN:
        case SQLiteParser.K_FROM:
        case SQLiteParser.K_FULL:
        case SQLiteParser.K_GLOB:
        case SQLiteParser.K_GROUP:
        case SQLiteParser.K_HAVING:
        case SQLiteParser.K_IF:
        case SQLiteParser.K_IGNORE:
        case SQLiteParser.K_IMMEDIATE:
        case SQLiteParser.K_IN:
        case SQLiteParser.K_INDEX:
        case SQLiteParser.K_INDEXED:
        case SQLiteParser.K_INITIALLY:
        case SQLiteParser.K_INNER:
        case SQLiteParser.K_INSERT:
        case SQLiteParser.K_INSTEAD:
        case SQLiteParser.K_INTERSECT:
        case SQLiteParser.K_INTO:
        case SQLiteParser.K_IS:
        case SQLiteParser.K_ISNULL:
        case SQLiteParser.K_JOIN:
        case SQLiteParser.K_KEY:
        case SQLiteParser.K_LEFT:
        case SQLiteParser.K_LIKE:
        case SQLiteParser.K_LIMIT:
        case SQLiteParser.K_MATCH:
        case SQLiteParser.K_NATURAL:
        case SQLiteParser.K_NO:
        case SQLiteParser.K_NOT:
        case SQLiteParser.K_NOTNULL:
        case SQLiteParser.K_NULL:
        case SQLiteParser.K_OF:
        case SQLiteParser.K_OFFSET:
        case SQLiteParser.K_ON:
        case SQLiteParser.K_OR:
        case SQLiteParser.K_ORDER:
        case SQLiteParser.K_OUTER:
        case SQLiteParser.K_PLAN:
        case SQLiteParser.K_PRAGMA:
        case SQLiteParser.K_PRIMARY:
        case SQLiteParser.K_QUERY:
        case SQLiteParser.K_RAISE:
        case SQLiteParser.K_RECURSIVE:
        case SQLiteParser.K_REFERENCES:
        case SQLiteParser.K_REGEXP:
        case SQLiteParser.K_REINDEX:
        case SQLiteParser.K_RELEASE:
        case SQLiteParser.K_RENAME:
        case SQLiteParser.K_REPLACE:
        case SQLiteParser.K_RESTRICT:
        case SQLiteParser.K_RIGHT:
        case SQLiteParser.K_ROLLBACK:
        case SQLiteParser.K_ROW:
        case SQLiteParser.K_SAVEPOINT:
        case SQLiteParser.K_SELECT:
        case SQLiteParser.K_SET:
        case SQLiteParser.K_TABLE:
        case SQLiteParser.K_TEMP:
        case SQLiteParser.K_TEMPORARY:
        case SQLiteParser.K_THEN:
        case SQLiteParser.K_TO:
        case SQLiteParser.K_TRANSACTION:
        case SQLiteParser.K_TRIGGER:
        case SQLiteParser.K_UNION:
        case SQLiteParser.K_UNIQUE:
        case SQLiteParser.K_UPDATE:
        case SQLiteParser.K_USING:
        case SQLiteParser.K_VACUUM:
        case SQLiteParser.K_VALUES:
        case SQLiteParser.K_VIEW:
        case SQLiteParser.K_VIRTUAL:
        case SQLiteParser.K_WHEN:
        case SQLiteParser.K_WHERE:
        case SQLiteParser.K_WITH:
        case SQLiteParser.K_WITHOUT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1723;
            this.keyword();
            break;
        case SQLiteParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1724;
            this.match(SQLiteParser.STRING_LITERAL);
            break;
        case SQLiteParser.OPEN_PAR:
            this.enterOuterAlt(localctx, 4);
            this.state = 1725;
            this.match(SQLiteParser.OPEN_PAR);
            this.state = 1726;
            this.any_name();
            this.state = 1727;
            this.match(SQLiteParser.CLOSE_PAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SQLiteParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 39:
			return this.expr_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SQLiteParser.prototype.expr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 20);
		case 1:
			return this.precpred(this._ctx, 19);
		case 2:
			return this.precpred(this._ctx, 18);
		case 3:
			return this.precpred(this._ctx, 17);
		case 4:
			return this.precpred(this._ctx, 16);
		case 5:
			return this.precpred(this._ctx, 15);
		case 6:
			return this.precpred(this._ctx, 14);
		case 7:
			return this.precpred(this._ctx, 13);
		case 8:
			return this.precpred(this._ctx, 6);
		case 9:
			return this.precpred(this._ctx, 5);
		case 10:
			return this.precpred(this._ctx, 9);
		case 11:
			return this.precpred(this._ctx, 8);
		case 12:
			return this.precpred(this._ctx, 7);
		case 13:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SQLiteParser = SQLiteParser;

// Generated from C:\git-seaquail.visualstudio.com\AntlrEditor\src\server\compiler\output\css3\css3.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var css3Listener = require('./css3Listener').css3Listener;
var css3Visitor = require('./css3Visitor').css3Visitor;

var grammarFileName = "css3.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003@\u045a\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u00a4",
    "\n\u0002\f\u0002\u000e\u0002\u00a7\u000b\u0002\u0007\u0002\u00a9\n\u0002",
    "\f\u0002\u000e\u0002\u00ac\u000b\u0002\u0003\u0002\u0003\u0002\u0007",
    "\u0002\u00b0\n\u0002\f\u0002\u000e\u0002\u00b3\u000b\u0002\u0007\u0002",
    "\u00b5\n\u0002\f\u0002\u000e\u0002\u00b8\u000b\u0002\u0003\u0002\u0003",
    "\u0002\u0007\u0002\u00bc\n\u0002\f\u0002\u000e\u0002\u00bf\u000b\u0002",
    "\u0007\u0002\u00c1\n\u0002\f\u0002\u000e\u0002\u00c4\u000b\u0002\u0003",
    "\u0002\u0003\u0002\u0007\u0002\u00c8\n\u0002\f\u0002\u000e\u0002\u00cb",
    "\u000b\u0002\u0007\u0002\u00cd\n\u0002\f\u0002\u000e\u0002\u00d0\u000b",
    "\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003\u00de\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004",
    "\u00fa\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u0101\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u010d\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u0112\n\u0005\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u0121\n\b\f\b\u000e\b\u0124",
    "\u000b\b\u0005\b\u0126\n\b\u0003\b\u0003\b\u0003\t\u0005\t\u012b\n\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u0134",
    "\n\t\f\t\u000e\t\u0137\u000b\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0007\t\u013e\n\t\f\t\u000e\t\u0141\u000b\t\u0005\t\u0143\n\t\u0003",
    "\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0005\u000b\u014e\n\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0005",
    "\r\u0159\n\r\u0003\r\u0003\r\u0003\r\u0005\r\u015e\n\r\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u0163\n\r\u0007\r\u0165\n\r\f\r\u000e\r\u0168\u000b",
    "\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007",
    "\u000f\u0176\n\u000f\f\u000f\u000e\u000f\u0179\u000b\u000f\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010",
    "\u0181\n\u0010\f\u0010\u000e\u0010\u0184\u000b\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u018e\n\u0011\u0003\u0012\u0003\u0012\u0005\u0012",
    "\u0192\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0007\u0012\u0199\n\u0012\f\u0012\u000e\u0012\u019c\u000b\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0006\u0012",
    "\u01a3\n\u0012\r\u0012\u000e\u0012\u01a4\u0005\u0012\u01a7\n\u0012\u0003",
    "\u0013\u0005\u0013\u01aa\n\u0013\u0003\u0013\u0003\u0013\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u01b0\n\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0016\u0005\u0016\u01b7\n\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0005\u0018\u01c1\n\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01c9\n\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u01cd\n\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0005\u0019\u01d3\n\u0019\u0003\u0019",
    "\u0003\u0019\u0005\u0019\u01d7\n\u0019\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u01e5\n\u001b",
    "\u0003\u001b\u0006\u001b\u01e8\n\u001b\r\u001b\u000e\u001b\u01e9\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005",
    "\u001d\u01f8\n\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u0202\n",
    "\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u020d\n\u001f",
    "\u0003 \u0003 \u0003 \u0003 \u0005 \u0213\n \u0003 \u0003 \u0003 \u0003",
    " \u0007 \u0219\n \f \u000e \u021c\u000b \u0003 \u0003 \u0003 \u0005",
    " \u0221\n \u0003 \u0003 \u0003 \u0005 \u0226\n \u0003!\u0003!\u0007",
    "!\u022a\n!\f!\u000e!\u022d\u000b!\u0003!\u0003!\u0003!\u0003!\u0003",
    "!\u0005!\u0234\n!\u0007!\u0236\n!\f!\u000e!\u0239\u000b!\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0005\"\u0240\n\"\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0005\"\u0247\n\"\u0003#\u0003#\u0003#\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0006$\u0251\n$\r$\u000e$\u0252\u0003%\u0003",
    "%\u0005%\u0257\n%\u0003%\u0007%\u025a\n%\f%\u000e%\u025d\u000b%\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0279\n&\u0003\'\u0003\'",
    "\u0003\'\u0003\'\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003(",
    "\u0003(\u0003)\u0003)\u0003)\u0003*\u0005*\u028b\n*\u0003*\u0003*\u0003",
    "+\u0005+\u0290\n+\u0003+\u0003+\u0003,\u0005,\u0295\n,\u0003,\u0003",
    ",\u0003-\u0005-\u029a\n-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0007.\u02bf",
    "\n.\f.\u000e.\u02c2\u000b.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0007.\u02cb\n.\f.\u000e.\u02ce\u000b.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0007.\u02d7\n.\f.\u000e.\u02da\u000b",
    ".\u0003.\u0003.\u0003.\u0005.\u02df\n.\u0003/\u0003/\u0003/\u0007/\u02e4",
    "\n/\f/\u000e/\u02e7\u000b/\u0003/\u0003/\u0003/\u0005/\u02ec\n/\u0003",
    "0\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00051\u02fb\n1\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00072\u0308\n2\f2\u000e2\u030b",
    "\u000b2\u00032\u00032\u00032\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00053\u031a\n3\u00034\u00034\u00034\u0007",
    "4\u031f\n4\f4\u000e4\u0322\u000b4\u00034\u00034\u00034\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00036\u00036\u00036\u00036\u00056\u0331",
    "\n6\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u033b",
    "\n7\u00038\u00038\u00038\u00038\u00038\u00038\u00039\u00039\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u00039\u00069\u034d\n9\r9\u000e",
    "9\u034e\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0006:\u035b\n:\r:\u000e:\u035c\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0003<\u0003<\u0003<\u0007<\u0367\n<\f<\u000e<\u036a\u000b",
    "<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0007?\u0384\n?\f?\u000e?\u0387\u000b",
    "?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0007@\u0393\n@\f@\u000e@\u0396\u000b@\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0005A\u03aa\nA\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0005B\u03b1\nB\u0003B\u0003B\u0003B\u0005B\u03b6\nB\u0007",
    "B\u03b8\nB\fB\u000eB\u03bb\u000bB\u0003B\u0003B\u0003B\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u03ca",
    "\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0005E\u03dc\nE\u0003E\u0003",
    "E\u0003E\u0007E\u03e1\nE\fE\u000eE\u03e4\u000bE\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0007F\u03ed\nF\fF\u000eF\u03f0\u000b",
    "F\u0003G\u0003G\u0003G\u0003G\u0003G\u0005G\u03f7\nG\u0003G\u0003G\u0003",
    "G\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0005H\u0403\nH\u0003",
    "H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0007",
    "I\u040f\nI\fI\u000eI\u0412\u000bI\u0003I\u0003I\u0003I\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0007J\u041d\nJ\fJ\u000eJ\u0420\u000b",
    "J\u0003K\u0003K\u0003K\u0003K\u0003K\u0007K\u0427\nK\fK\u000eK\u042a",
    "\u000bK\u0005K\u042c\nK\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u0433",
    "\nL\u0003L\u0003L\u0003L\u0003L\u0005L\u0439\nL\u0007L\u043b\nL\fL\u000e",
    "L\u043e\u000bL\u0003L\u0003L\u0003L\u0003M\u0003M\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0007N\u044d\nN\fN\u000eN\u0450",
    "\u000bN\u0003O\u0003O\u0003P\u0007P\u0455\nP\fP\u000eP\u0458\u000bP",
    "\u0003P\u0002\u0002Q\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
    "\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u0002\u000b\u0003\u0002\u0012",
    "\u0015\u0004\u0002  ..\u0003\u0002\"#\u0005\u0002\r\r\u0016\u0017/1",
    "\u0003\u0002\'(\u0004\u0002\u0004\u0004@@\u0004\u0002\u001f\u001f67",
    "\u0006\u0002\"$4467??\u0003\u0002\u0012\u0013\u0002\u04ba\u0002\u00a0",
    "\u0003\u0002\u0002\u0002\u0004\u00dd\u0003\u0002\u0002\u0002\u0006\u00f9",
    "\u0003\u0002\u0002\u0002\b\u0111\u0003\u0002\u0002\u0002\n\u0113\u0003",
    "\u0002\u0002\u0002\f\u0115\u0003\u0002\u0002\u0002\u000e\u0125\u0003",
    "\u0002\u0002\u0002\u0010\u0142\u0003\u0002\u0002\u0002\u0012\u0144\u0003",
    "\u0002\u0002\u0002\u0014\u0146\u0003\u0002\u0002\u0002\u0016\u0152\u0003",
    "\u0002\u0002\u0002\u0018\u0155\u0003\u0002\u0002\u0002\u001a\u016c\u0003",
    "\u0002\u0002\u0002\u001c\u0170\u0003\u0002\u0002\u0002\u001e\u017a\u0003",
    "\u0002\u0002\u0002 \u018d\u0003\u0002\u0002\u0002\"\u01a6\u0003\u0002",
    "\u0002\u0002$\u01a9\u0003\u0002\u0002\u0002&\u01af\u0003\u0002\u0002",
    "\u0002(\u01b3\u0003\u0002\u0002\u0002*\u01b6\u0003\u0002\u0002\u0002",
    ",\u01ba\u0003\u0002\u0002\u0002.\u01bd\u0003\u0002\u0002\u00020\u01d0",
    "\u0003\u0002\u0002\u00022\u01d8\u0003\u0002\u0002\u00024\u01e7\u0003",
    "\u0002\u0002\u00026\u01eb\u0003\u0002\u0002\u00028\u01f7\u0003\u0002",
    "\u0002\u0002:\u0201\u0003\u0002\u0002\u0002<\u020c\u0003\u0002\u0002",
    "\u0002>\u0225\u0003\u0002\u0002\u0002@\u022b\u0003\u0002\u0002\u0002",
    "B\u0246\u0003\u0002\u0002\u0002D\u0248\u0003\u0002\u0002\u0002F\u0250",
    "\u0003\u0002\u0002\u0002H\u0254\u0003\u0002\u0002\u0002J\u0278\u0003",
    "\u0002\u0002\u0002L\u027a\u0003\u0002\u0002\u0002N\u0280\u0003\u0002",
    "\u0002\u0002P\u0286\u0003\u0002\u0002\u0002R\u028a\u0003\u0002\u0002",
    "\u0002T\u028f\u0003\u0002\u0002\u0002V\u0294\u0003\u0002\u0002\u0002",
    "X\u0299\u0003\u0002\u0002\u0002Z\u02de\u0003\u0002\u0002\u0002\\\u02e0",
    "\u0003\u0002\u0002\u0002^\u02ed\u0003\u0002\u0002\u0002`\u02fa\u0003",
    "\u0002\u0002\u0002b\u02fc\u0003\u0002\u0002\u0002d\u0319\u0003\u0002",
    "\u0002\u0002f\u031b\u0003\u0002\u0002\u0002h\u0326\u0003\u0002\u0002",
    "\u0002j\u0330\u0003\u0002\u0002\u0002l\u033a\u0003\u0002\u0002\u0002",
    "n\u033c\u0003\u0002\u0002\u0002p\u0342\u0003\u0002\u0002\u0002r\u0350",
    "\u0003\u0002\u0002\u0002t\u035e\u0003\u0002\u0002\u0002v\u0363\u0003",
    "\u0002\u0002\u0002x\u036d\u0003\u0002\u0002\u0002z\u0374\u0003\u0002",
    "\u0002\u0002|\u037a\u0003\u0002\u0002\u0002~\u0388\u0003\u0002\u0002",
    "\u0002\u0080\u03a9\u0003\u0002\u0002\u0002\u0082\u03ab\u0003\u0002\u0002",
    "\u0002\u0084\u03c9\u0003\u0002\u0002\u0002\u0086\u03cb\u0003\u0002\u0002",
    "\u0002\u0088\u03e2\u0003\u0002\u0002\u0002\u008a\u03e5\u0003\u0002\u0002",
    "\u0002\u008c\u03f1\u0003\u0002\u0002\u0002\u008e\u03fb\u0003\u0002\u0002",
    "\u0002\u0090\u0407\u0003\u0002\u0002\u0002\u0092\u0416\u0003\u0002\u0002",
    "\u0002\u0094\u042b\u0003\u0002\u0002\u0002\u0096\u042d\u0003\u0002\u0002",
    "\u0002\u0098\u0442\u0003\u0002\u0002\u0002\u009a\u0444\u0003\u0002\u0002",
    "\u0002\u009c\u0451\u0003\u0002\u0002\u0002\u009e\u0456\u0003\u0002\u0002",
    "\u0002\u00a0\u00aa\u0005\u009eP\u0002\u00a1\u00a5\u0005\u0004\u0003",
    "\u0002\u00a2\u00a4\t\u0002\u0002\u0002\u00a3\u00a2\u0003\u0002\u0002",
    "\u0002\u00a4\u00a7\u0003\u0002\u0002\u0002\u00a5\u00a3\u0003\u0002\u0002",
    "\u0002\u00a5\u00a6\u0003\u0002\u0002\u0002\u00a6\u00a9\u0003\u0002\u0002",
    "\u0002\u00a7\u00a5\u0003\u0002\u0002\u0002\u00a8\u00a1\u0003\u0002\u0002",
    "\u0002\u00a9\u00ac\u0003\u0002\u0002\u0002\u00aa\u00a8\u0003\u0002\u0002",
    "\u0002\u00aa\u00ab\u0003\u0002\u0002\u0002\u00ab\u00b6\u0003\u0002\u0002",
    "\u0002\u00ac\u00aa\u0003\u0002\u0002\u0002\u00ad\u00b1\u0005\u0006\u0004",
    "\u0002\u00ae\u00b0\t\u0002\u0002\u0002\u00af\u00ae\u0003\u0002\u0002",
    "\u0002\u00b0\u00b3\u0003\u0002\u0002\u0002\u00b1\u00af\u0003\u0002\u0002",
    "\u0002\u00b1\u00b2\u0003\u0002\u0002\u0002\u00b2\u00b5\u0003\u0002\u0002",
    "\u0002\u00b3\u00b1\u0003\u0002\u0002\u0002\u00b4\u00ad\u0003\u0002\u0002",
    "\u0002\u00b5\u00b8\u0003\u0002\u0002\u0002\u00b6\u00b4\u0003\u0002\u0002",
    "\u0002\u00b6\u00b7\u0003\u0002\u0002\u0002\u00b7\u00c2\u0003\u0002\u0002",
    "\u0002\u00b8\u00b6\u0003\u0002\u0002\u0002\u00b9\u00bd\u0005\b\u0005",
    "\u0002\u00ba\u00bc\t\u0002\u0002\u0002\u00bb\u00ba\u0003\u0002\u0002",
    "\u0002\u00bc\u00bf\u0003\u0002\u0002\u0002\u00bd\u00bb\u0003\u0002\u0002",
    "\u0002\u00bd\u00be\u0003\u0002\u0002\u0002\u00be\u00c1\u0003\u0002\u0002",
    "\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002\u00c0\u00b9\u0003\u0002\u0002",
    "\u0002\u00c1\u00c4\u0003\u0002\u0002\u0002\u00c2\u00c0\u0003\u0002\u0002",
    "\u0002\u00c2\u00c3\u0003\u0002\u0002\u0002\u00c3\u00ce\u0003\u0002\u0002",
    "\u0002\u00c4\u00c2\u0003\u0002\u0002\u0002\u00c5\u00c9\u0005d3\u0002",
    "\u00c6\u00c8\t\u0002\u0002\u0002\u00c7\u00c6\u0003\u0002\u0002\u0002",
    "\u00c8\u00cb\u0003\u0002\u0002\u0002\u00c9\u00c7\u0003\u0002\u0002\u0002",
    "\u00c9\u00ca\u0003\u0002\u0002\u0002\u00ca\u00cd\u0003\u0002\u0002\u0002",
    "\u00cb\u00c9\u0003\u0002\u0002\u0002\u00cc\u00c5\u0003\u0002\u0002\u0002",
    "\u00cd\u00d0\u0003\u0002\u0002\u0002\u00ce\u00cc\u0003\u0002\u0002\u0002",
    "\u00ce\u00cf\u0003\u0002\u0002\u0002\u00cf\u0003\u0003\u0002\u0002\u0002",
    "\u00d0\u00ce\u0003\u0002\u0002\u0002\u00d1\u00d2\u0007\u001d\u0002\u0002",
    "\u00d2\u00d3\u0005\u009eP\u0002\u00d3\u00d4\u0007.\u0002\u0002\u00d4",
    "\u00d5\u0005\u009eP\u0002\u00d5\u00d6\u0007\u0003\u0002\u0002\u00d6",
    "\u00d7\u0005\u009eP\u0002\u00d7\u00de\u0003\u0002\u0002\u0002\u00d8",
    "\u00d9\u0007\u001d\u0002\u0002\u00d9\u00da\u0005\u009eP\u0002\u00da",
    "\u00db\u0007.\u0002\u0002\u00db\u00dc\u0005\u009eP\u0002\u00dc\u00de",
    "\u0003\u0002\u0002\u0002\u00dd\u00d1\u0003\u0002\u0002\u0002\u00dd\u00d8",
    "\u0003\u0002\u0002\u0002\u00de\u0005\u0003\u0002\u0002\u0002\u00df\u00e0",
    "\u0007\u0019\u0002\u0002\u00e0\u00e1\u0005\u009eP\u0002\u00e1\u00e2",
    "\t\u0003\u0002\u0002\u00e2\u00e3\u0005\u009eP\u0002\u00e3\u00e4\u0005",
    "\u000e\b\u0002\u00e4\u00e5\u0007\u0003\u0002\u0002\u00e5\u00e6\u0005",
    "\u009eP\u0002\u00e6\u00fa\u0003\u0002\u0002\u0002\u00e7\u00e8\u0007",
    "\u0019\u0002\u0002\u00e8\u00e9\u0005\u009eP\u0002\u00e9\u00ea\t\u0003",
    "\u0002\u0002\u00ea\u00eb\u0005\u009eP\u0002\u00eb\u00ec\u0007\u0003",
    "\u0002\u0002\u00ec\u00ed\u0005\u009eP\u0002\u00ed\u00fa\u0003\u0002",
    "\u0002\u0002\u00ee\u00ef\u0007\u0019\u0002\u0002\u00ef\u00f0\u0005\u009e",
    "P\u0002\u00f0\u00f1\t\u0003\u0002\u0002\u00f1\u00f2\u0005\u009eP\u0002",
    "\u00f2\u00f3\u0005\u000e\b\u0002\u00f3\u00fa\u0003\u0002\u0002\u0002",
    "\u00f4\u00f5\u0007\u0019\u0002\u0002\u00f5\u00f6\u0005\u009eP\u0002",
    "\u00f6\u00f7\t\u0003\u0002\u0002\u00f7\u00f8\u0005\u009eP\u0002\u00f8",
    "\u00fa\u0003\u0002\u0002\u0002\u00f9\u00df\u0003\u0002\u0002\u0002\u00f9",
    "\u00e7\u0003\u0002\u0002\u0002\u00f9\u00ee\u0003\u0002\u0002\u0002\u00f9",
    "\u00f4\u0003\u0002\u0002\u0002\u00fa\u0007\u0003\u0002\u0002\u0002\u00fb",
    "\u00fc\u0007\u001c\u0002\u0002\u00fc\u0100\u0005\u009eP\u0002\u00fd",
    "\u00fe\u0005\n\u0006\u0002\u00fe\u00ff\u0005\u009eP\u0002\u00ff\u0101",
    "\u0003\u0002\u0002\u0002\u0100\u00fd\u0003\u0002\u0002\u0002\u0100\u0101",
    "\u0003\u0002\u0002\u0002\u0101\u0102\u0003\u0002\u0002\u0002\u0102\u0103",
    "\t\u0003\u0002\u0002\u0103\u0104\u0005\u009eP\u0002\u0104\u0105\u0007",
    "\u0003\u0002\u0002\u0105\u0106\u0005\u009eP\u0002\u0106\u0112\u0003",
    "\u0002\u0002\u0002\u0107\u0108\u0007\u001c\u0002\u0002\u0108\u010c\u0005",
    "\u009eP\u0002\u0109\u010a\u0005\n\u0006\u0002\u010a\u010b\u0005\u009e",
    "P\u0002\u010b\u010d\u0003\u0002\u0002\u0002\u010c\u0109\u0003\u0002",
    "\u0002\u0002\u010c\u010d\u0003\u0002\u0002\u0002\u010d\u010e\u0003\u0002",
    "\u0002\u0002\u010e\u010f\t\u0003\u0002\u0002\u010f\u0110\u0005\u009e",
    "P\u0002\u0110\u0112\u0003\u0002\u0002\u0002\u0111\u00fb\u0003\u0002",
    "\u0002\u0002\u0111\u0107\u0003\u0002\u0002\u0002\u0112\t\u0003\u0002",
    "\u0002\u0002\u0113\u0114\u0005\u009cO\u0002\u0114\u000b\u0003\u0002",
    "\u0002\u0002\u0115\u0116\u0007\u001b\u0002\u0002\u0116\u0117\u0005\u009e",
    "P\u0002\u0117\u0118\u0005\u000e\b\u0002\u0118\u0119\u0005f4\u0002\u0119",
    "\u011a\u0005\u009eP\u0002\u011a\r\u0003\u0002\u0002\u0002\u011b\u0122",
    "\u0005\u0010\t\u0002\u011c\u011d\u0007*\u0002\u0002\u011d\u011e\u0005",
    "\u009eP\u0002\u011e\u011f\u0005\u0010\t\u0002\u011f\u0121\u0003\u0002",
    "\u0002\u0002\u0120\u011c\u0003\u0002\u0002\u0002\u0121\u0124\u0003\u0002",
    "\u0002\u0002\u0122\u0120\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002",
    "\u0002\u0002\u0123\u0126\u0003\u0002\u0002\u0002\u0124\u0122\u0003\u0002",
    "\u0002\u0002\u0125\u011b\u0003\u0002\u0002\u0002\u0125\u0126\u0003\u0002",
    "\u0002\u0002\u0126\u0127\u0003\u0002\u0002\u0002\u0127\u0128\u0005\u009e",
    "P\u0002\u0128\u000f\u0003\u0002\u0002\u0002\u0129\u012b\t\u0004\u0002",
    "\u0002\u012a\u0129\u0003\u0002\u0002\u0002\u012a\u012b\u0003\u0002\u0002",
    "\u0002\u012b\u012c\u0003\u0002\u0002\u0002\u012c\u012d\u0005\u009eP",
    "\u0002\u012d\u012e\u0005\u0012\n\u0002\u012e\u0135\u0005\u009eP\u0002",
    "\u012f\u0130\u0007$\u0002\u0002\u0130\u0131\u0005\u009eP\u0002\u0131",
    "\u0132\u0005\u0014\u000b\u0002\u0132\u0134\u0003\u0002\u0002\u0002\u0133",
    "\u012f\u0003\u0002\u0002\u0002\u0134\u0137\u0003\u0002\u0002\u0002\u0135",
    "\u0133\u0003\u0002\u0002\u0002\u0135\u0136\u0003\u0002\u0002\u0002\u0136",
    "\u0143\u0003\u0002\u0002\u0002\u0137\u0135\u0003\u0002\u0002\u0002\u0138",
    "\u013f\u0005\u0014\u000b\u0002\u0139\u013a\u0007$\u0002\u0002\u013a",
    "\u013b\u0005\u009eP\u0002\u013b\u013c\u0005\u0014\u000b\u0002\u013c",
    "\u013e\u0003\u0002\u0002\u0002\u013d\u0139\u0003\u0002\u0002\u0002\u013e",
    "\u0141\u0003\u0002\u0002\u0002\u013f\u013d\u0003\u0002\u0002\u0002\u013f",
    "\u0140\u0003\u0002\u0002\u0002\u0140\u0143\u0003\u0002\u0002\u0002\u0141",
    "\u013f\u0003\u0002\u0002\u0002\u0142\u012a\u0003\u0002\u0002\u0002\u0142",
    "\u0138\u0003\u0002\u0002\u0002\u0143\u0011\u0003\u0002\u0002\u0002\u0144",
    "\u0145\u0005\u009cO\u0002\u0145\u0013\u0003\u0002\u0002\u0002\u0146",
    "\u0147\u0007\u0004\u0002\u0002\u0147\u0148\u0005\u009eP\u0002\u0148",
    "\u014d\u0005\u0016\f\u0002\u0149\u014a\u0007\u0005\u0002\u0002\u014a",
    "\u014b\u0005\u009eP\u0002\u014b\u014c\u0005H%\u0002\u014c\u014e\u0003",
    "\u0002\u0002\u0002\u014d\u0149\u0003\u0002\u0002\u0002\u014d\u014e\u0003",
    "\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002\u0002\u014f\u0150\u0007",
    "\u0006\u0002\u0002\u0150\u0151\u0005\u009eP\u0002\u0151\u0015\u0003",
    "\u0002\u0002\u0002\u0152\u0153\u0005\u009cO\u0002\u0153\u0154\u0005",
    "\u009eP\u0002\u0154\u0017\u0003\u0002\u0002\u0002\u0155\u0156\u0007",
    "\u001a\u0002\u0002\u0156\u0158\u0005\u009eP\u0002\u0157\u0159\u0005",
    "\u001a\u000e\u0002\u0158\u0157\u0003\u0002\u0002\u0002\u0158\u0159\u0003",
    "\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u015b\u0007",
    "\u0007\u0002\u0002\u015b\u015d\u0005\u009eP\u0002\u015c\u015e\u0005",
    "B\"\u0002\u015d\u015c\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002",
    "\u0002\u0002\u015e\u0166\u0003\u0002\u0002\u0002\u015f\u0160\u0007\u0003",
    "\u0002\u0002\u0160\u0162\u0005\u009eP\u0002\u0161\u0163\u0005B\"\u0002",
    "\u0162\u0161\u0003\u0002\u0002\u0002\u0162\u0163\u0003\u0002\u0002\u0002",
    "\u0163\u0165\u0003\u0002\u0002\u0002\u0164\u015f\u0003\u0002\u0002\u0002",
    "\u0165\u0168\u0003\u0002\u0002\u0002\u0166\u0164\u0003\u0002\u0002\u0002",
    "\u0166\u0167\u0003\u0002\u0002\u0002\u0167\u0169\u0003\u0002\u0002\u0002",
    "\u0168\u0166\u0003\u0002\u0002\u0002\u0169\u016a\u0007\b\u0002\u0002",
    "\u016a\u016b\u0005\u009eP\u0002\u016b\u0019\u0003\u0002\u0002\u0002",
    "\u016c\u016d\u0007\u0005\u0002\u0002\u016d\u016e\u0005\u009cO\u0002",
    "\u016e\u016f\u0005\u009eP\u0002\u016f\u001b\u0003\u0002\u0002\u0002",
    "\u0170\u0177\u0005\u001e\u0010\u0002\u0171\u0172\u0007*\u0002\u0002",
    "\u0172\u0173\u0005\u009eP\u0002\u0173\u0174\u0005\u001e\u0010\u0002",
    "\u0174\u0176\u0003\u0002\u0002\u0002\u0175\u0171\u0003\u0002\u0002\u0002",
    "\u0176\u0179\u0003\u0002\u0002\u0002\u0177\u0175\u0003\u0002\u0002\u0002",
    "\u0177\u0178\u0003\u0002\u0002\u0002\u0178\u001d\u0003\u0002\u0002\u0002",
    "\u0179\u0177\u0003\u0002\u0002\u0002\u017a\u017b\u0005\"\u0012\u0002",
    "\u017b\u0182\u0005\u009eP\u0002\u017c\u017d\u0005 \u0011\u0002\u017d",
    "\u017e\u0005\"\u0012\u0002\u017e\u017f\u0005\u009eP\u0002\u017f\u0181",
    "\u0003\u0002\u0002\u0002\u0180\u017c\u0003\u0002\u0002\u0002\u0181\u0184",
    "\u0003\u0002\u0002\u0002\u0182\u0180\u0003\u0002\u0002\u0002\u0182\u0183",
    "\u0003\u0002\u0002\u0002\u0183\u001f\u0003\u0002\u0002\u0002\u0184\u0182",
    "\u0003\u0002\u0002\u0002\u0185\u0186\u0007\'\u0002\u0002\u0186\u018e",
    "\u0005\u009eP\u0002\u0187\u0188\u0007)\u0002\u0002\u0188\u018e\u0005",
    "\u009eP\u0002\u0189\u018a\u0007+\u0002\u0002\u018a\u018e\u0005\u009e",
    "P\u0002\u018b\u018c\u0007\u0013\u0002\u0002\u018c\u018e\u0005\u009e",
    "P\u0002\u018d\u0185\u0003\u0002\u0002\u0002\u018d\u0187\u0003\u0002",
    "\u0002\u0002\u018d\u0189\u0003\u0002\u0002\u0002\u018d\u018b\u0003\u0002",
    "\u0002\u0002\u018e!\u0003\u0002\u0002\u0002\u018f\u0192\u0005$\u0013",
    "\u0002\u0190\u0192\u0005*\u0016\u0002\u0191\u018f\u0003\u0002\u0002",
    "\u0002\u0191\u0190\u0003\u0002\u0002\u0002\u0192\u019a\u0003\u0002\u0002",
    "\u0002\u0193\u0199\u0007\u0018\u0002\u0002\u0194\u0199\u0005,\u0017",
    "\u0002\u0195\u0199\u0005.\u0018\u0002\u0196\u0199\u00050\u0019\u0002",
    "\u0197\u0199\u00056\u001c\u0002\u0198\u0193\u0003\u0002\u0002\u0002",
    "\u0198\u0194\u0003\u0002\u0002\u0002\u0198\u0195\u0003\u0002\u0002\u0002",
    "\u0198\u0196\u0003\u0002\u0002\u0002\u0198\u0197\u0003\u0002\u0002\u0002",
    "\u0199\u019c\u0003\u0002\u0002\u0002\u019a\u0198\u0003\u0002\u0002\u0002",
    "\u019a\u019b\u0003\u0002\u0002\u0002\u019b\u01a7\u0003\u0002\u0002\u0002",
    "\u019c\u019a\u0003\u0002\u0002\u0002\u019d\u01a3\u0007\u0018\u0002\u0002",
    "\u019e\u01a3\u0005,\u0017\u0002\u019f\u01a3\u0005.\u0018\u0002\u01a0",
    "\u01a3\u00050\u0019\u0002\u01a1\u01a3\u00056\u001c\u0002\u01a2\u019d",
    "\u0003\u0002\u0002\u0002\u01a2\u019e\u0003\u0002\u0002\u0002\u01a2\u019f",
    "\u0003\u0002\u0002\u0002\u01a2\u01a0\u0003\u0002\u0002\u0002\u01a2\u01a1",
    "\u0003\u0002\u0002\u0002\u01a3\u01a4\u0003\u0002\u0002\u0002\u01a4\u01a2",
    "\u0003\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a7",
    "\u0003\u0002\u0002\u0002\u01a6\u0191\u0003\u0002\u0002\u0002\u01a6\u01a2",
    "\u0003\u0002\u0002\u0002\u01a7#\u0003\u0002\u0002\u0002\u01a8\u01aa",
    "\u0005&\u0014\u0002\u01a9\u01a8\u0003\u0002\u0002\u0002\u01a9\u01aa",
    "\u0003\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab\u01ac",
    "\u0005(\u0015\u0002\u01ac%\u0003\u0002\u0002\u0002\u01ad\u01b0\u0005",
    "\u009cO\u0002\u01ae\u01b0\u0007\t\u0002\u0002\u01af\u01ad\u0003\u0002",
    "\u0002\u0002\u01af\u01ae\u0003\u0002\u0002\u0002\u01af\u01b0\u0003\u0002",
    "\u0002\u0002\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1\u01b2\u0007\n",
    "\u0002\u0002\u01b2\'\u0003\u0002\u0002\u0002\u01b3\u01b4\u0005\u009c",
    "O\u0002\u01b4)\u0003\u0002\u0002\u0002\u01b5\u01b7\u0005&\u0014\u0002",
    "\u01b6\u01b5\u0003\u0002\u0002\u0002\u01b6\u01b7\u0003\u0002\u0002\u0002",
    "\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8\u01b9\u0007\t\u0002\u0002",
    "\u01b9+\u0003\u0002\u0002\u0002\u01ba\u01bb\u0007\u000b\u0002\u0002",
    "\u01bb\u01bc\u0005\u009cO\u0002\u01bc-\u0003\u0002\u0002\u0002\u01bd",
    "\u01be\u0007\f\u0002\u0002\u01be\u01c0\u0005\u009eP\u0002\u01bf\u01c1",
    "\u0005&\u0014\u0002\u01c0\u01bf\u0003\u0002\u0002\u0002\u01c0\u01c1",
    "\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002\u01c2\u01c3",
    "\u0005\u009cO\u0002\u01c3\u01cc\u0005\u009eP\u0002\u01c4\u01c5\t\u0005",
    "\u0002\u0002\u01c5\u01c8\u0005\u009eP\u0002\u01c6\u01c9\u0005\u009c",
    "O\u0002\u01c7\u01c9\u0007.\u0002\u0002\u01c8\u01c6\u0003\u0002\u0002",
    "\u0002\u01c8\u01c7\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002\u0002",
    "\u0002\u01ca\u01cb\u0005\u009eP\u0002\u01cb\u01cd\u0003\u0002\u0002",
    "\u0002\u01cc\u01c4\u0003\u0002\u0002\u0002\u01cc\u01cd\u0003\u0002\u0002",
    "\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce\u01cf\u0007\u000e\u0002",
    "\u0002\u01cf/\u0003\u0002\u0002\u0002\u01d0\u01d2\u0007\u0005\u0002",
    "\u0002\u01d1\u01d3\u0007\u0005\u0002\u0002\u01d2\u01d1\u0003\u0002\u0002",
    "\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d6\u0003\u0002\u0002",
    "\u0002\u01d4\u01d7\u0005\u009cO\u0002\u01d5\u01d7\u00052\u001a\u0002",
    "\u01d6\u01d4\u0003\u0002\u0002\u0002\u01d6\u01d5\u0003\u0002\u0002\u0002",
    "\u01d71\u0003\u0002\u0002\u0002\u01d8\u01d9\u0007@\u0002\u0002\u01d9",
    "\u01da\u0005\u009eP\u0002\u01da\u01db\u00054\u001b\u0002\u01db\u01dc",
    "\u0007\u0006\u0002\u0002\u01dc3\u0003\u0002\u0002\u0002\u01dd\u01e5",
    "\u0007\'\u0002\u0002\u01de\u01e5\u0007(\u0002\u0002\u01df\u01e5\u0007",
    "%\u0002\u0002\u01e0\u01e5\u0007&\u0002\u0002\u01e1\u01e5\u0007-\u0002",
    "\u0002\u01e2\u01e5\u0007.\u0002\u0002\u01e3\u01e5\u0005\u009cO\u0002",
    "\u01e4\u01dd\u0003\u0002\u0002\u0002\u01e4\u01de\u0003\u0002\u0002\u0002",
    "\u01e4\u01df\u0003\u0002\u0002\u0002\u01e4\u01e0\u0003\u0002\u0002\u0002",
    "\u01e4\u01e1\u0003\u0002\u0002\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002",
    "\u01e4\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002",
    "\u01e6\u01e8\u0005\u009eP\u0002\u01e7\u01e4\u0003\u0002\u0002\u0002",
    "\u01e8\u01e9\u0003\u0002\u0002\u0002\u01e9\u01e7\u0003\u0002\u0002\u0002",
    "\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea5\u0003\u0002\u0002\u0002",
    "\u01eb\u01ec\u0007,\u0002\u0002\u01ec\u01ed\u0005\u009eP\u0002\u01ed",
    "\u01ee\u00058\u001d\u0002\u01ee\u01ef\u0005\u009eP\u0002\u01ef\u01f0",
    "\u0007\u0006\u0002\u0002\u01f07\u0003\u0002\u0002\u0002\u01f1\u01f8",
    "\u0005$\u0013\u0002\u01f2\u01f8\u0005*\u0016\u0002\u01f3\u01f8\u0007",
    "\u0018\u0002\u0002\u01f4\u01f8\u0005,\u0017\u0002\u01f5\u01f8\u0005",
    ".\u0018\u0002\u01f6\u01f8\u00050\u0019\u0002\u01f7\u01f1\u0003\u0002",
    "\u0002\u0002\u01f7\u01f2\u0003\u0002\u0002\u0002\u01f7\u01f3\u0003\u0002",
    "\u0002\u0002\u01f7\u01f4\u0003\u0002\u0002\u0002\u01f7\u01f5\u0003\u0002",
    "\u0002\u0002\u01f7\u01f6\u0003\u0002\u0002\u0002\u01f89\u0003\u0002",
    "\u0002\u0002\u01f9\u01fa\u0007\u000f\u0002\u0002\u01fa\u0202\u0005\u009e",
    "P\u0002\u01fb\u01fc\u0007*\u0002\u0002\u01fc\u0202\u0005\u009eP\u0002",
    "\u01fd\u01fe\u0007\u0013\u0002\u0002\u01fe\u0202\u0005\u009eP\u0002",
    "\u01ff\u0200\u0007\r\u0002\u0002\u0200\u0202\u0005\u009eP\u0002\u0201",
    "\u01f9\u0003\u0002\u0002\u0002\u0201\u01fb\u0003\u0002\u0002\u0002\u0201",
    "\u01fd\u0003\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002\u0202",
    ";\u0003\u0002\u0002\u0002\u0203\u0204\u0005\u009cO\u0002\u0204\u0205",
    "\u0005\u009eP\u0002\u0205\u020d\u0003\u0002\u0002\u0002\u0206\u0207",
    "\u0007=\u0002\u0002\u0207\u020d\u0005\u009eP\u0002\u0208\u0209\u0007",
    "\t\u0002\u0002\u0209\u020d\u0005\u009cO\u0002\u020a\u020b\u0007\u0010",
    "\u0002\u0002\u020b\u020d\u0005\u009cO\u0002\u020c\u0203\u0003\u0002",
    "\u0002\u0002\u020c\u0206\u0003\u0002\u0002\u0002\u020c\u0208\u0003\u0002",
    "\u0002\u0002\u020c\u020a\u0003\u0002\u0002\u0002\u020d=\u0003\u0002",
    "\u0002\u0002\u020e\u020f\u0005\u001c\u000f\u0002\u020f\u0210\u0007\u0007",
    "\u0002\u0002\u0210\u0212\u0005\u009eP\u0002\u0211\u0213\u0005@!\u0002",
    "\u0212\u0211\u0003\u0002\u0002\u0002\u0212\u0213\u0003\u0002\u0002\u0002",
    "\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u0215\u0007\b\u0002\u0002",
    "\u0215\u0216\u0005\u009eP\u0002\u0216\u0226\u0003\u0002\u0002\u0002",
    "\u0217\u0219\u0005Z.\u0002\u0218\u0217\u0003\u0002\u0002\u0002\u0219",
    "\u021c\u0003\u0002\u0002\u0002\u021a\u0218\u0003\u0002\u0002\u0002\u021a",
    "\u021b\u0003\u0002\u0002\u0002\u021b\u021d\u0003\u0002\u0002\u0002\u021c",
    "\u021a\u0003\u0002\u0002\u0002\u021d\u021e\u0007\u0007\u0002\u0002\u021e",
    "\u0220\u0005\u009eP\u0002\u021f\u0221\u0005@!\u0002\u0220\u021f\u0003",
    "\u0002\u0002\u0002\u0220\u0221\u0003\u0002\u0002\u0002\u0221\u0222\u0003",
    "\u0002\u0002\u0002\u0222\u0223\u0007\b\u0002\u0002\u0223\u0224\u0005",
    "\u009eP\u0002\u0224\u0226\u0003\u0002\u0002\u0002\u0225\u020e\u0003",
    "\u0002\u0002\u0002\u0225\u021a\u0003\u0002\u0002\u0002\u0226?\u0003",
    "\u0002\u0002\u0002\u0227\u0228\u0007\u0003\u0002\u0002\u0228\u022a\u0005",
    "\u009eP\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u022a\u022d\u0003",
    "\u0002\u0002\u0002\u022b\u0229\u0003\u0002\u0002\u0002\u022b\u022c\u0003",
    "\u0002\u0002\u0002\u022c\u022e\u0003\u0002\u0002\u0002\u022d\u022b\u0003",
    "\u0002\u0002\u0002\u022e\u022f\u0005B\"\u0002\u022f\u0237\u0005\u009e",
    "P\u0002\u0230\u0231\u0007\u0003\u0002\u0002\u0231\u0233\u0005\u009e",
    "P\u0002\u0232\u0234\u0005B\"\u0002\u0233\u0232\u0003\u0002\u0002\u0002",
    "\u0233\u0234\u0003\u0002\u0002\u0002\u0234\u0236\u0003\u0002\u0002\u0002",
    "\u0235\u0230\u0003\u0002\u0002\u0002\u0236\u0239\u0003\u0002\u0002\u0002",
    "\u0237\u0235\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002",
    "\u0238A\u0003\u0002\u0002\u0002\u0239\u0237\u0003\u0002\u0002\u0002",
    "\u023a\u023b\u0005<\u001f\u0002\u023b\u023c\u0007\u0005\u0002\u0002",
    "\u023c\u023d\u0005\u009eP\u0002\u023d\u023f\u0005H%\u0002\u023e\u0240",
    "\u0005D#\u0002\u023f\u023e\u0003\u0002\u0002\u0002\u023f\u0240\u0003",
    "\u0002\u0002\u0002\u0240\u0247\u0003\u0002\u0002\u0002\u0241\u0242\u0005",
    "<\u001f\u0002\u0242\u0243\u0007\u0005\u0002\u0002\u0243\u0244\u0005",
    "\u009eP\u0002\u0244\u0245\u0005F$\u0002\u0245\u0247\u0003\u0002\u0002",
    "\u0002\u0246\u023a\u0003\u0002\u0002\u0002\u0246\u0241\u0003\u0002\u0002",
    "\u0002\u0247C\u0003\u0002\u0002\u0002\u0248\u0249\u0007\u001e\u0002",
    "\u0002\u0249\u024a\u0005\u009eP\u0002\u024aE\u0003\u0002\u0002\u0002",
    "\u024b\u0251\u0005Z.\u0002\u024c\u0251\u0005b2\u0002\u024d\u024e\u0005",
    "^0\u0002\u024e\u024f\u0005\u009eP\u0002\u024f\u0251\u0003\u0002\u0002",
    "\u0002\u0250\u024b\u0003\u0002\u0002\u0002\u0250\u024c\u0003\u0002\u0002",
    "\u0002\u0250\u024d\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002",
    "\u0002\u0252\u0250\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002",
    "\u0002\u0253G\u0003\u0002\u0002\u0002\u0254\u025b\u0005J&\u0002\u0255",
    "\u0257\u0005:\u001e\u0002\u0256\u0255\u0003\u0002\u0002\u0002\u0256",
    "\u0257\u0003\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002\u0258",
    "\u025a\u0005J&\u0002\u0259\u0256\u0003\u0002\u0002\u0002\u025a\u025d",
    "\u0003\u0002\u0002\u0002\u025b\u0259\u0003\u0002\u0002\u0002\u025b\u025c",
    "\u0003\u0002\u0002\u0002\u025cI\u0003\u0002\u0002\u0002\u025d\u025b",
    "\u0003\u0002\u0002\u0002\u025e\u025f\u0005R*\u0002\u025f\u0260\u0005",
    "\u009eP\u0002\u0260\u0279\u0003\u0002\u0002\u0002\u0261\u0262\u0005",
    "T+\u0002\u0262\u0263\u0005\u009eP\u0002\u0263\u0279\u0003\u0002\u0002",
    "\u0002\u0264\u0265\u0005V,\u0002\u0265\u0266\u0005\u009eP\u0002\u0266",
    "\u0279\u0003\u0002\u0002\u0002\u0267\u0268\u0007.\u0002\u0002\u0268",
    "\u0279\u0005\u009eP\u0002\u0269\u026a\u0007!\u0002\u0002\u026a\u0279",
    "\u0005\u009eP\u0002\u026b\u026c\u0005\u009cO\u0002\u026c\u026d\u0005",
    "\u009eP\u0002\u026d\u0279\u0003\u0002\u0002\u0002\u026e\u0279\u0005",
    "x=\u0002\u026f\u0270\u0007 \u0002\u0002\u0270\u0279\u0005\u009eP\u0002",
    "\u0271\u0279\u0005P)\u0002\u0272\u0279\u0005z>\u0002\u0273\u0279\u0005",
    "L\'\u0002\u0274\u0275\u0005X-\u0002\u0275\u0276\u0005\u009eP\u0002\u0276",
    "\u0279\u0003\u0002\u0002\u0002\u0277\u0279\u0005N(\u0002\u0278\u025e",
    "\u0003\u0002\u0002\u0002\u0278\u0261\u0003\u0002\u0002\u0002\u0278\u0264",
    "\u0003\u0002\u0002\u0002\u0278\u0267\u0003\u0002\u0002\u0002\u0278\u0269",
    "\u0003\u0002\u0002\u0002\u0278\u026b\u0003\u0002\u0002\u0002\u0278\u026e",
    "\u0003\u0002\u0002\u0002\u0278\u026f\u0003\u0002\u0002\u0002\u0278\u0271",
    "\u0003\u0002\u0002\u0002\u0278\u0272\u0003\u0002\u0002\u0002\u0278\u0273",
    "\u0003\u0002\u0002\u0002\u0278\u0274\u0003\u0002\u0002\u0002\u0278\u0277",
    "\u0003\u0002\u0002\u0002\u0279K\u0003\u0002\u0002\u0002\u027a\u027b",
    "\u0007@\u0002\u0002\u027b\u027c\u0005\u009eP\u0002\u027c\u027d\u0005",
    "H%\u0002\u027d\u027e\u0007\u0006\u0002\u0002\u027e\u027f\u0005\u009e",
    "P\u0002\u027fM\u0003\u0002\u0002\u0002\u0280\u0281\u0007<\u0002\u0002",
    "\u0281\u0282\u0005\u009eP\u0002\u0282\u0283\u0005H%\u0002\u0283\u0284",
    "\u0007\u0006\u0002\u0002\u0284\u0285\u0005\u009eP\u0002\u0285O\u0003",
    "\u0002\u0002\u0002\u0286\u0287\u0007\u0018\u0002\u0002\u0287\u0288\u0005",
    "\u009eP\u0002\u0288Q\u0003\u0002\u0002\u0002\u0289\u028b\t\u0006\u0002",
    "\u0002\u028a\u0289\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002",
    "\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c\u028d\u0007-\u0002",
    "\u0002\u028dS\u0003\u0002\u0002\u0002\u028e\u0290\t\u0006\u0002\u0002",
    "\u028f\u028e\u0003\u0002\u0002\u0002\u028f\u0290\u0003\u0002\u0002\u0002",
    "\u0290\u0291\u0003\u0002\u0002\u0002\u0291\u0292\u0007\u001f\u0002\u0002",
    "\u0292U\u0003\u0002\u0002\u0002\u0293\u0295\t\u0006\u0002\u0002\u0294",
    "\u0293\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295",
    "\u0296\u0003\u0002\u0002\u0002\u0296\u0297\u0007%\u0002\u0002\u0297",
    "W\u0003\u0002\u0002\u0002\u0298\u029a\t\u0006\u0002\u0002\u0299\u0298",
    "\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002\u0002\u029a\u029b",
    "\u0003\u0002\u0002\u0002\u029b\u029c\u0007&\u0002\u0002\u029cY\u0003",
    "\u0002\u0002\u0002\u029d\u029e\u0005\u009cO\u0002\u029e\u029f\u0005",
    "\u009eP\u0002\u029f\u02df\u0003\u0002\u0002\u0002\u02a0\u02a1\u0005",
    "R*\u0002\u02a1\u02a2\u0005\u009eP\u0002\u02a2\u02df\u0003\u0002\u0002",
    "\u0002\u02a3\u02a4\u0005T+\u0002\u02a4\u02a5\u0005\u009eP\u0002\u02a5",
    "\u02df\u0003\u0002\u0002\u0002\u02a6\u02a7\u0005V,\u0002\u02a7\u02a8",
    "\u0005\u009eP\u0002\u02a8\u02df\u0003\u0002\u0002\u0002\u02a9\u02aa",
    "\u0005X-\u0002\u02aa\u02ab\u0005\u009eP\u0002\u02ab\u02df\u0003\u0002",
    "\u0002\u0002\u02ac\u02ad\u0007.\u0002\u0002\u02ad\u02df\u0005\u009e",
    "P\u0002\u02ae\u02af\u0007 \u0002\u0002\u02af\u02df\u0005\u009eP\u0002",
    "\u02b0\u02b1\u0007\u0018\u0002\u0002\u02b1\u02df\u0005\u009eP\u0002",
    "\u02b2\u02b3\u0007!\u0002\u0002\u02b3\u02df\u0005\u009eP\u0002\u02b4",
    "\u02b5\u0007\u0016\u0002\u0002\u02b5\u02df\u0005\u009eP\u0002\u02b6",
    "\u02b7\u0007\u0017\u0002\u0002\u02b7\u02df\u0005\u009eP\u0002\u02b8",
    "\u02b9\u0007\u0005\u0002\u0002\u02b9\u02df\u0005\u009eP\u0002\u02ba",
    "\u02bb\u0007@\u0002\u0002\u02bb\u02c0\u0005\u009eP\u0002\u02bc\u02bf",
    "\u0005Z.\u0002\u02bd\u02bf\u0005`1\u0002\u02be\u02bc\u0003\u0002\u0002",
    "\u0002\u02be\u02bd\u0003\u0002\u0002\u0002\u02bf\u02c2\u0003\u0002\u0002",
    "\u0002\u02c0\u02be\u0003\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002",
    "\u0002\u02c1\u02c3\u0003\u0002\u0002\u0002\u02c2\u02c0\u0003\u0002\u0002",
    "\u0002\u02c3\u02c4\u0007\u0006\u0002\u0002\u02c4\u02c5\u0005\u009eP",
    "\u0002\u02c5\u02df\u0003\u0002\u0002\u0002\u02c6\u02c7\u0007\u0004\u0002",
    "\u0002\u02c7\u02cc\u0005\u009eP\u0002\u02c8\u02cb\u0005Z.\u0002\u02c9",
    "\u02cb\u0005`1\u0002\u02ca\u02c8\u0003\u0002\u0002\u0002\u02ca\u02c9",
    "\u0003\u0002\u0002\u0002\u02cb\u02ce\u0003\u0002\u0002\u0002\u02cc\u02ca",
    "\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd\u02cf",
    "\u0003\u0002\u0002\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002\u02cf\u02d0",
    "\u0007\u0006\u0002\u0002\u02d0\u02d1\u0005\u009eP\u0002\u02d1\u02df",
    "\u0003\u0002\u0002\u0002\u02d2\u02d3\u0007\f\u0002\u0002\u02d3\u02d8",
    "\u0005\u009eP\u0002\u02d4\u02d7\u0005Z.\u0002\u02d5\u02d7\u0005`1\u0002",
    "\u02d6\u02d4\u0003\u0002\u0002\u0002\u02d6\u02d5\u0003\u0002\u0002\u0002",
    "\u02d7\u02da\u0003\u0002\u0002\u0002\u02d8\u02d6\u0003\u0002\u0002\u0002",
    "\u02d8\u02d9\u0003\u0002\u0002\u0002\u02d9\u02db\u0003\u0002\u0002\u0002",
    "\u02da\u02d8\u0003\u0002\u0002\u0002\u02db\u02dc\u0007\u000e\u0002\u0002",
    "\u02dc\u02dd\u0005\u009eP\u0002\u02dd\u02df\u0003\u0002\u0002\u0002",
    "\u02de\u029d\u0003\u0002\u0002\u0002\u02de\u02a0\u0003\u0002\u0002\u0002",
    "\u02de\u02a3\u0003\u0002\u0002\u0002\u02de\u02a6\u0003\u0002\u0002\u0002",
    "\u02de\u02a9\u0003\u0002\u0002\u0002\u02de\u02ac\u0003\u0002\u0002\u0002",
    "\u02de\u02ae\u0003\u0002\u0002\u0002\u02de\u02b0\u0003\u0002\u0002\u0002",
    "\u02de\u02b2\u0003\u0002\u0002\u0002\u02de\u02b4\u0003\u0002\u0002\u0002",
    "\u02de\u02b6\u0003\u0002\u0002\u0002\u02de\u02b8\u0003\u0002\u0002\u0002",
    "\u02de\u02ba\u0003\u0002\u0002\u0002\u02de\u02c6\u0003\u0002\u0002\u0002",
    "\u02de\u02d2\u0003\u0002\u0002\u0002\u02df[\u0003\u0002\u0002\u0002",
    "\u02e0\u02e1\u0005^0\u0002\u02e1\u02e5\u0005\u009eP\u0002\u02e2\u02e4",
    "\u0005Z.\u0002\u02e3\u02e2\u0003\u0002\u0002\u0002\u02e4\u02e7\u0003",
    "\u0002\u0002\u0002\u02e5\u02e3\u0003\u0002\u0002\u0002\u02e5\u02e6\u0003",
    "\u0002\u0002\u0002\u02e6\u02eb\u0003\u0002\u0002\u0002\u02e7\u02e5\u0003",
    "\u0002\u0002\u0002\u02e8\u02ec\u0005b2\u0002\u02e9\u02ea\u0007\u0003",
    "\u0002\u0002\u02ea\u02ec\u0005\u009eP\u0002\u02eb\u02e8\u0003\u0002",
    "\u0002\u0002\u02eb\u02e9\u0003\u0002\u0002\u0002\u02ec]\u0003\u0002",
    "\u0002\u0002\u02ed\u02ee\u0007\u0011\u0002\u0002\u02ee\u02ef\u0005\u009c",
    "O\u0002\u02ef_\u0003\u0002\u0002\u0002\u02f0\u02fb\u0005b2\u0002\u02f1",
    "\u02f2\u0005^0\u0002\u02f2\u02f3\u0005\u009eP\u0002\u02f3\u02fb\u0003",
    "\u0002\u0002\u0002\u02f4\u02f5\u0007\u0003\u0002\u0002\u02f5\u02fb\u0005",
    "\u009eP\u0002\u02f6\u02f7\u0007\u0014\u0002\u0002\u02f7\u02fb\u0005",
    "\u009eP\u0002\u02f8\u02f9\u0007\u0015\u0002\u0002\u02f9\u02fb\u0005",
    "\u009eP\u0002\u02fa\u02f0\u0003\u0002\u0002\u0002\u02fa\u02f1\u0003",
    "\u0002\u0002\u0002\u02fa\u02f4\u0003\u0002\u0002\u0002\u02fa\u02f6\u0003",
    "\u0002\u0002\u0002\u02fa\u02f8\u0003\u0002\u0002\u0002\u02fba\u0003",
    "\u0002\u0002\u0002\u02fc\u02fd\u0007\u0007\u0002\u0002\u02fd\u0309\u0005",
    "\u009eP\u0002\u02fe\u0308\u0005@!\u0002\u02ff\u0308\u0005d3\u0002\u0300",
    "\u0308\u0005Z.\u0002\u0301\u0308\u0005b2\u0002\u0302\u0303\u0005^0\u0002",
    "\u0303\u0304\u0005\u009eP\u0002\u0304\u0308\u0003\u0002\u0002\u0002",
    "\u0305\u0306\u0007\u0003\u0002\u0002\u0306\u0308\u0005\u009eP\u0002",
    "\u0307\u02fe\u0003\u0002\u0002\u0002\u0307\u02ff\u0003\u0002\u0002\u0002",
    "\u0307\u0300\u0003\u0002\u0002\u0002\u0307\u0301\u0003\u0002\u0002\u0002",
    "\u0307\u0302\u0003\u0002\u0002\u0002\u0307\u0305\u0003\u0002\u0002\u0002",
    "\u0308\u030b\u0003\u0002\u0002\u0002\u0309\u0307\u0003\u0002\u0002\u0002",
    "\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u030c\u0003\u0002\u0002\u0002",
    "\u030b\u0309\u0003\u0002\u0002\u0002\u030c\u030d\u0007\b\u0002\u0002",
    "\u030d\u030e\u0005\u009eP\u0002\u030ec\u0003\u0002\u0002\u0002\u030f",
    "\u031a\u0005> \u0002\u0310\u031a\u0005\f\u0007\u0002\u0311\u031a\u0005",
    "\u0018\r\u0002\u0312\u031a\u0005\u0082B\u0002\u0313\u031a\u0005\u0086",
    "D\u0002\u0314\u031a\u0005h5\u0002\u0315\u031a\u0005\u008cG\u0002\u0316",
    "\u031a\u0005\u008eH\u0002\u0317\u031a\u0005\u0090I\u0002\u0318\u031a",
    "\u0005\\/\u0002\u0319\u030f\u0003\u0002\u0002\u0002\u0319\u0310\u0003",
    "\u0002\u0002\u0002\u0319\u0311\u0003\u0002\u0002\u0002\u0319\u0312\u0003",
    "\u0002\u0002\u0002\u0319\u0313\u0003\u0002\u0002\u0002\u0319\u0314\u0003",
    "\u0002\u0002\u0002\u0319\u0315\u0003\u0002\u0002\u0002\u0319\u0316\u0003",
    "\u0002\u0002\u0002\u0319\u0317\u0003\u0002\u0002\u0002\u0319\u0318\u0003",
    "\u0002\u0002\u0002\u031ae\u0003\u0002\u0002\u0002\u031b\u031c\u0007",
    "\u0007\u0002\u0002\u031c\u0320\u0005\u009eP\u0002\u031d\u031f\u0005",
    "d3\u0002\u031e\u031d\u0003\u0002\u0002\u0002\u031f\u0322\u0003\u0002",
    "\u0002\u0002\u0320\u031e\u0003\u0002\u0002\u0002\u0320\u0321\u0003\u0002",
    "\u0002\u0002\u0321\u0323\u0003\u0002\u0002\u0002\u0322\u0320\u0003\u0002",
    "\u0002\u0002\u0323\u0324\u0007\b\u0002\u0002\u0324\u0325\u0005\u009e",
    "P\u0002\u0325g\u0003\u0002\u0002\u0002\u0326\u0327\u00073\u0002\u0002",
    "\u0327\u0328\u0005\u009eP\u0002\u0328\u0329\u0005j6\u0002\u0329\u032a",
    "\u0005\u009eP\u0002\u032a\u032b\u0005f4\u0002\u032bi\u0003\u0002\u0002",
    "\u0002\u032c\u0331\u0005n8\u0002\u032d\u0331\u0005p9\u0002\u032e\u0331",
    "\u0005r:\u0002\u032f\u0331\u0005l7\u0002\u0330\u032c\u0003\u0002\u0002",
    "\u0002\u0330\u032d\u0003\u0002\u0002\u0002\u0330\u032e\u0003\u0002\u0002",
    "\u0002\u0330\u032f\u0003\u0002\u0002\u0002\u0331k\u0003\u0002\u0002",
    "\u0002\u0332\u0333\u0007\u0004\u0002\u0002\u0333\u0334\u0005\u009eP",
    "\u0002\u0334\u0335\u0005j6\u0002\u0335\u0336\u0005\u009eP\u0002\u0336",
    "\u0337\u0007\u0006\u0002\u0002\u0337\u033b\u0003\u0002\u0002\u0002\u0338",
    "\u033b\u0005t;\u0002\u0339\u033b\u0005v<\u0002\u033a\u0332\u0003\u0002",
    "\u0002\u0002\u033a\u0338\u0003\u0002\u0002\u0002\u033a\u0339\u0003\u0002",
    "\u0002\u0002\u033bm\u0003\u0002\u0002\u0002\u033c\u033d\u0007#\u0002",
    "\u0002\u033d\u033e\u0005\u009eP\u0002\u033e\u033f\u0007\u0013\u0002",
    "\u0002\u033f\u0340\u0005\u009eP\u0002\u0340\u0341\u0005l7\u0002\u0341",
    "o\u0003\u0002\u0002\u0002\u0342\u034c\u0005l7\u0002\u0343\u0344\u0005",
    "\u009eP\u0002\u0344\u0345\u0007\u0013\u0002\u0002\u0345\u0346\u0005",
    "\u009eP\u0002\u0346\u0347\u0007$\u0002\u0002\u0347\u0348\u0005\u009e",
    "P\u0002\u0348\u0349\u0007\u0013\u0002\u0002\u0349\u034a\u0005\u009e",
    "P\u0002\u034a\u034b\u0005l7\u0002\u034b\u034d\u0003\u0002\u0002\u0002",
    "\u034c\u0343\u0003\u0002\u0002\u0002\u034d\u034e\u0003\u0002\u0002\u0002",
    "\u034e\u034c\u0003\u0002\u0002\u0002\u034e\u034f\u0003\u0002\u0002\u0002",
    "\u034fq\u0003\u0002\u0002\u0002\u0350\u035a\u0005l7\u0002\u0351\u0352",
    "\u0005\u009eP\u0002\u0352\u0353\u0007\u0013\u0002\u0002\u0353\u0354",
    "\u0005\u009eP\u0002\u0354\u0355\u00074\u0002\u0002\u0355\u0356\u0005",
    "\u009eP\u0002\u0356\u0357\u0007\u0013\u0002\u0002\u0357\u0358\u0005",
    "\u009eP\u0002\u0358\u0359\u0005l7\u0002\u0359\u035b\u0003\u0002\u0002",
    "\u0002\u035a\u0351\u0003\u0002\u0002\u0002\u035b\u035c\u0003\u0002\u0002",
    "\u0002\u035c\u035a\u0003\u0002\u0002\u0002\u035c\u035d\u0003\u0002\u0002",
    "\u0002\u035ds\u0003\u0002\u0002\u0002\u035e\u035f\u0007\u0004\u0002",
    "\u0002\u035f\u0360\u0005\u009eP\u0002\u0360\u0361\u0005B\"\u0002\u0361",
    "\u0362\u0007\u0006\u0002\u0002\u0362u\u0003\u0002\u0002\u0002\u0363",
    "\u0368\t\u0007\u0002\u0002\u0364\u0367\u0005Z.\u0002\u0365\u0367\u0005",
    "`1\u0002\u0366\u0364\u0003\u0002\u0002\u0002\u0366\u0365\u0003\u0002",
    "\u0002\u0002\u0367\u036a\u0003\u0002\u0002\u0002\u0368\u0366\u0003\u0002",
    "\u0002\u0002\u0368\u0369\u0003\u0002\u0002\u0002\u0369\u036b\u0003\u0002",
    "\u0002\u0002\u036a\u0368\u0003\u0002\u0002\u0002\u036b\u036c\u0007\u0006",
    "\u0002\u0002\u036cw\u0003\u0002\u0002\u0002\u036d\u036e\u0007>\u0002",
    "\u0002\u036e\u036f\u0005\u009eP\u0002\u036f\u0370\u0007=\u0002\u0002",
    "\u0370\u0371\u0005\u009eP\u0002\u0371\u0372\u0007\u0006\u0002\u0002",
    "\u0372\u0373\u0005\u009eP\u0002\u0373y\u0003\u0002\u0002\u0002\u0374",
    "\u0375\u00078\u0002\u0002\u0375\u0376\u0005\u009eP\u0002\u0376\u0377",
    "\u0005|?\u0002\u0377\u0378\u0007\u0006\u0002\u0002\u0378\u0379\u0005",
    "\u009eP\u0002\u0379{\u0003\u0002\u0002\u0002\u037a\u0385\u0005~@\u0002",
    "\u037b\u037c\u0007\u0013\u0002\u0002\u037c\u037d\u0005\u009eP\u0002",
    "\u037d\u037e\t\u0006\u0002\u0002\u037e\u037f\u0005\u009eP\u0002\u037f",
    "\u0380\u0007\u0013\u0002\u0002\u0380\u0381\u0005\u009eP\u0002\u0381",
    "\u0382\u0005~@\u0002\u0382\u0384\u0003\u0002\u0002\u0002\u0383\u037b",
    "\u0003\u0002\u0002\u0002\u0384\u0387\u0003\u0002\u0002\u0002\u0385\u0383",
    "\u0003\u0002\u0002\u0002\u0385\u0386\u0003\u0002\u0002\u0002\u0386}",
    "\u0003\u0002\u0002\u0002\u0387\u0385\u0003\u0002\u0002\u0002\u0388\u0394",
    "\u0005\u0080A\u0002\u0389\u038a\u0007\t\u0002\u0002\u038a\u038b\u0005",
    "\u009eP\u0002\u038b\u038c\u0005\u0080A\u0002\u038c\u0393\u0003\u0002",
    "\u0002\u0002\u038d\u038e\u0007\u000f\u0002\u0002\u038e\u038f\u0005\u009e",
    "P\u0002\u038f\u0390\u0005R*\u0002\u0390\u0391\u0005\u009eP\u0002\u0391",
    "\u0393\u0003\u0002\u0002\u0002\u0392\u0389\u0003\u0002\u0002\u0002\u0392",
    "\u038d\u0003\u0002\u0002\u0002\u0393\u0396\u0003\u0002\u0002\u0002\u0394",
    "\u0392\u0003\u0002\u0002\u0002\u0394\u0395\u0003\u0002\u0002\u0002\u0395",
    "\u007f\u0003\u0002\u0002\u0002\u0396\u0394\u0003\u0002\u0002\u0002\u0397",
    "\u0398\u0005R*\u0002\u0398\u0399\u0005\u009eP\u0002\u0399\u03aa\u0003",
    "\u0002\u0002\u0002\u039a\u039b\u0005V,\u0002\u039b\u039c\u0005\u009e",
    "P\u0002\u039c\u03aa\u0003\u0002\u0002\u0002\u039d\u039e\u0005X-\u0002",
    "\u039e\u039f\u0005\u009eP\u0002\u039f\u03aa\u0003\u0002\u0002\u0002",
    "\u03a0\u03a1\u0005T+\u0002\u03a1\u03a2\u0005\u009eP\u0002\u03a2\u03aa",
    "\u0003\u0002\u0002\u0002\u03a3\u03a4\u0007\u0004\u0002\u0002\u03a4\u03a5",
    "\u0005\u009eP\u0002\u03a5\u03a6\u0005|?\u0002\u03a6\u03a7\u0007\u0006",
    "\u0002\u0002\u03a7\u03a8\u0005\u009eP\u0002\u03a8\u03aa\u0003\u0002",
    "\u0002\u0002\u03a9\u0397\u0003\u0002\u0002\u0002\u03a9\u039a\u0003\u0002",
    "\u0002\u0002\u03a9\u039d\u0003\u0002\u0002\u0002\u03a9\u03a0\u0003\u0002",
    "\u0002\u0002\u03a9\u03a3\u0003\u0002\u0002\u0002\u03aa\u0081\u0003\u0002",
    "\u0002\u0002\u03ab\u03ac\u00072\u0002\u0002\u03ac\u03ad\u0005\u009e",
    "P\u0002\u03ad\u03ae\u0007\u0007\u0002\u0002\u03ae\u03b0\u0005\u009e",
    "P\u0002\u03af\u03b1\u0005\u0084C\u0002\u03b0\u03af\u0003\u0002\u0002",
    "\u0002\u03b0\u03b1\u0003\u0002\u0002\u0002\u03b1\u03b9\u0003\u0002\u0002",
    "\u0002\u03b2\u03b3\u0007\u0003\u0002\u0002\u03b3\u03b5\u0005\u009eP",
    "\u0002\u03b4\u03b6\u0005\u0084C\u0002\u03b5\u03b4\u0003\u0002\u0002",
    "\u0002\u03b5\u03b6\u0003\u0002\u0002\u0002\u03b6\u03b8\u0003\u0002\u0002",
    "\u0002\u03b7\u03b2\u0003\u0002\u0002\u0002\u03b8\u03bb\u0003\u0002\u0002",
    "\u0002\u03b9\u03b7\u0003\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002",
    "\u0002\u03ba\u03bc\u0003\u0002\u0002\u0002\u03bb\u03b9\u0003\u0002\u0002",
    "\u0002\u03bc\u03bd\u0007\b\u0002\u0002\u03bd\u03be\u0005\u009eP\u0002",
    "\u03be\u0083\u0003\u0002\u0002\u0002\u03bf\u03c0\u0005<\u001f\u0002",
    "\u03c0\u03c1\u0007\u0005\u0002\u0002\u03c1\u03c2\u0005\u009eP\u0002",
    "\u03c2\u03c3\u0005H%\u0002\u03c3\u03ca\u0003\u0002\u0002\u0002\u03c4",
    "\u03c5\u0005<\u001f\u0002\u03c5\u03c6\u0007\u0005\u0002\u0002\u03c6",
    "\u03c7\u0005\u009eP\u0002\u03c7\u03c8\u0005F$\u0002\u03c8\u03ca\u0003",
    "\u0002\u0002\u0002\u03c9\u03bf\u0003\u0002\u0002\u0002\u03c9\u03c4\u0003",
    "\u0002\u0002\u0002\u03ca\u0085\u0003\u0002\u0002\u0002\u03cb\u03cc\u0007",
    "5\u0002\u0002\u03cc\u03cd\u0005\u009eP\u0002\u03cd\u03ce\u0007\u0013",
    "\u0002\u0002\u03ce\u03cf\u0005\u009eP\u0002\u03cf\u03d0\u0005\u009c",
    "O\u0002\u03d0\u03d1\u0005\u009eP\u0002\u03d1\u03d2\u0007\u0007\u0002",
    "\u0002\u03d2\u03d3\u0005\u009eP\u0002\u03d3\u03d4\u0005\u0088E\u0002",
    "\u03d4\u03d5\u0007\b\u0002\u0002\u03d5\u03d6\u0005\u009eP\u0002\u03d6",
    "\u0087\u0003\u0002\u0002\u0002\u03d7\u03d8\u0005\u008aF\u0002\u03d8",
    "\u03d9\u0007\u0007\u0002\u0002\u03d9\u03db\u0005\u009eP\u0002\u03da",
    "\u03dc\u0005@!\u0002\u03db\u03da\u0003\u0002\u0002\u0002\u03db\u03dc",
    "\u0003\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u03de",
    "\u0007\b\u0002\u0002\u03de\u03df\u0005\u009eP\u0002\u03df\u03e1\u0003",
    "\u0002\u0002\u0002\u03e0\u03d7\u0003\u0002\u0002\u0002\u03e1\u03e4\u0003",
    "\u0002\u0002\u0002\u03e2\u03e0\u0003\u0002\u0002\u0002\u03e2\u03e3\u0003",
    "\u0002\u0002\u0002\u03e3\u0089\u0003\u0002\u0002\u0002\u03e4\u03e2\u0003",
    "\u0002\u0002\u0002\u03e5\u03e6\t\b\u0002\u0002\u03e6\u03ee\u0005\u009e",
    "P\u0002\u03e7\u03e8\u0007*\u0002\u0002\u03e8\u03e9\u0005\u009eP\u0002",
    "\u03e9\u03ea\t\b\u0002\u0002\u03ea\u03eb\u0005\u009eP\u0002\u03eb\u03ed",
    "\u0003\u0002\u0002\u0002\u03ec\u03e7\u0003\u0002\u0002\u0002\u03ed\u03f0",
    "\u0003\u0002\u0002\u0002\u03ee\u03ec\u0003\u0002\u0002\u0002\u03ee\u03ef",
    "\u0003\u0002\u0002\u0002\u03ef\u008b\u0003\u0002\u0002\u0002\u03f0\u03ee",
    "\u0003\u0002\u0002\u0002\u03f1\u03f2\u00079\u0002\u0002\u03f2\u03f3",
    "\u0005\u009eP\u0002\u03f3\u03f4\u0007\u0007\u0002\u0002\u03f4\u03f6",
    "\u0005\u009eP\u0002\u03f5\u03f7\u0005@!\u0002\u03f6\u03f5\u0003\u0002",
    "\u0002\u0002\u03f6\u03f7\u0003\u0002\u0002\u0002\u03f7\u03f8\u0003\u0002",
    "\u0002\u0002\u03f8\u03f9\u0007\b\u0002\u0002\u03f9\u03fa\u0005\u009e",
    "P\u0002\u03fa\u008d\u0003\u0002\u0002\u0002\u03fb\u03fc\u0007:\u0002",
    "\u0002\u03fc\u03fd\u0005\u009eP\u0002\u03fd\u03fe\u0005\u009cO\u0002",
    "\u03fe\u03ff\u0005\u009eP\u0002\u03ff\u0400\u0007\u0007\u0002\u0002",
    "\u0400\u0402\u0005\u009eP\u0002\u0401\u0403\u0005@!\u0002\u0402\u0401",
    "\u0003\u0002\u0002\u0002\u0402\u0403\u0003\u0002\u0002\u0002\u0403\u0404",
    "\u0003\u0002\u0002\u0002\u0404\u0405\u0007\b\u0002\u0002\u0405\u0406",
    "\u0005\u009eP\u0002\u0406\u008f\u0003\u0002\u0002\u0002\u0407\u0408",
    "\u0007;\u0002\u0002\u0408\u0409\u0005\u009eP\u0002\u0409\u040a\u0005",
    "\u0092J\u0002\u040a\u040b\u0005\u009eP\u0002\u040b\u040c\u0007\u0007",
    "\u0002\u0002\u040c\u0410\u0005\u009eP\u0002\u040d\u040f\u0005\u0096",
    "L\u0002\u040e\u040d\u0003\u0002\u0002\u0002\u040f\u0412\u0003\u0002",
    "\u0002\u0002\u0410\u040e\u0003\u0002\u0002\u0002\u0410\u0411\u0003\u0002",
    "\u0002\u0002\u0411\u0413\u0003\u0002\u0002\u0002\u0412\u0410\u0003\u0002",
    "\u0002\u0002\u0413\u0414\u0007\b\u0002\u0002\u0414\u0415\u0005\u009e",
    "P\u0002\u0415\u0091\u0003\u0002\u0002\u0002\u0416\u041e\u0005\u0094",
    "K\u0002\u0417\u0418\u0005\u009eP\u0002\u0418\u0419\u0007*\u0002\u0002",
    "\u0419\u041a\u0005\u009eP\u0002\u041a\u041b\u0005\u0094K\u0002\u041b",
    "\u041d\u0003\u0002\u0002\u0002\u041c\u0417\u0003\u0002\u0002\u0002\u041d",
    "\u0420\u0003\u0002\u0002\u0002\u041e\u041c\u0003\u0002\u0002\u0002\u041e",
    "\u041f\u0003\u0002\u0002\u0002\u041f\u0093\u0003\u0002\u0002\u0002\u0420",
    "\u041e\u0003\u0002\u0002\u0002\u0421\u042c\u0007.\u0002\u0002\u0422",
    "\u0428\u0005\u009cO\u0002\u0423\u0424\u0005\u009eP\u0002\u0424\u0425",
    "\u0005\u009cO\u0002\u0425\u0427\u0003\u0002\u0002\u0002\u0426\u0423",
    "\u0003\u0002\u0002\u0002\u0427\u042a\u0003\u0002\u0002\u0002\u0428\u0426",
    "\u0003\u0002\u0002\u0002\u0428\u0429\u0003\u0002\u0002\u0002\u0429\u042c",
    "\u0003\u0002\u0002\u0002\u042a\u0428\u0003\u0002\u0002\u0002\u042b\u0421",
    "\u0003\u0002\u0002\u0002\u042b\u0422\u0003\u0002\u0002\u0002\u042c\u0095",
    "\u0003\u0002\u0002\u0002\u042d\u042e\u0005\u0098M\u0002\u042e\u042f",
    "\u0005\u009eP\u0002\u042f\u0430\u0007\u0007\u0002\u0002\u0430\u0432",
    "\u0005\u009eP\u0002\u0431\u0433\u0005\u009aN\u0002\u0432\u0431\u0003",
    "\u0002\u0002\u0002\u0432\u0433\u0003\u0002\u0002\u0002\u0433\u043c\u0003",
    "\u0002\u0002\u0002\u0434\u0435\u0005\u009eP\u0002\u0435\u0436\u0007",
    "\u0003\u0002\u0002\u0436\u0438\u0005\u009eP\u0002\u0437\u0439\u0005",
    "\u009aN\u0002\u0438\u0437\u0003\u0002\u0002\u0002\u0438\u0439\u0003",
    "\u0002\u0002\u0002\u0439\u043b\u0003\u0002\u0002\u0002\u043a\u0434\u0003",
    "\u0002\u0002\u0002\u043b\u043e\u0003\u0002\u0002\u0002\u043c\u043a\u0003",
    "\u0002\u0002\u0002\u043c\u043d\u0003\u0002\u0002\u0002\u043d\u043f\u0003",
    "\u0002\u0002\u0002\u043e\u043c\u0003\u0002\u0002\u0002\u043f\u0440\u0007",
    "\b\u0002\u0002\u0440\u0441\u0005\u009eP\u0002\u0441\u0097\u0003\u0002",
    "\u0002\u0002\u0442\u0443\u0005^0\u0002\u0443\u0099\u0003\u0002\u0002",
    "\u0002\u0444\u0445\u0005\u009cO\u0002\u0445\u0446\u0005\u009eP\u0002",
    "\u0446\u0447\u0007\u0005\u0002\u0002\u0447\u0448\u0005\u009eP\u0002",
    "\u0448\u044e\u0005R*\u0002\u0449\u044a\u0005\u009eP\u0002\u044a\u044b",
    "\u0005R*\u0002\u044b\u044d\u0003\u0002\u0002\u0002\u044c\u0449\u0003",
    "\u0002\u0002\u0002\u044d\u0450\u0003\u0002\u0002\u0002\u044e\u044c\u0003",
    "\u0002\u0002\u0002\u044e\u044f\u0003\u0002\u0002\u0002\u044f\u009b\u0003",
    "\u0002\u0002\u0002\u0450\u044e\u0003\u0002\u0002\u0002\u0451\u0452\t",
    "\t\u0002\u0002\u0452\u009d\u0003\u0002\u0002\u0002\u0453\u0455\t\n\u0002",
    "\u0002\u0454\u0453\u0003\u0002\u0002\u0002\u0455\u0458\u0003\u0002\u0002",
    "\u0002\u0456\u0454\u0003\u0002\u0002\u0002\u0456\u0457\u0003\u0002\u0002",
    "\u0002\u0457\u009f\u0003\u0002\u0002\u0002\u0458\u0456\u0003\u0002\u0002",
    "\u0002l\u00a5\u00aa\u00b1\u00b6\u00bd\u00c2\u00c9\u00ce\u00dd\u00f9",
    "\u0100\u010c\u0111\u0122\u0125\u012a\u0135\u013f\u0142\u014d\u0158\u015d",
    "\u0162\u0166\u0177\u0182\u018d\u0191\u0198\u019a\u01a2\u01a4\u01a6\u01a9",
    "\u01af\u01b6\u01c0\u01c8\u01cc\u01d2\u01d6\u01e4\u01e9\u01f7\u0201\u020c",
    "\u0212\u021a\u0220\u0225\u022b\u0233\u0237\u023f\u0246\u0250\u0252\u0256",
    "\u025b\u0278\u028a\u028f\u0294\u0299\u02be\u02c0\u02ca\u02cc\u02d6\u02d8",
    "\u02de\u02e5\u02eb\u02fa\u0307\u0309\u0319\u0320\u0330\u033a\u034e\u035c",
    "\u0366\u0368\u0385\u0392\u0394\u03a9\u03b0\u03b5\u03b9\u03c9\u03db\u03e2",
    "\u03ee\u03f6\u0402\u0410\u041e\u0428\u042b\u0432\u0438\u043c\u044e\u0456"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "'('", "':'", "')'", "'{'", "'}'", "'*'", 
                     "'|'", "'.'", "'['", "'='", "']'", "'/'", "'_'", "'@'", 
                     null, null, "'<!--'", "'-->'", "'~='", "'|='", null, 
                     null, null, null, null, "'@charset '", null, null, 
                     null, null, null, null, null, null, null, "'+'", "'-'", 
                     "'>'", "','", "'~'", null, null, null, "'^='", "'$='", 
                     "'*='", null, null, null, null, null, null, "'calc('", 
                     null, null, null, null, null, "'var('" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, "Comment", 
                      "Space", "Cdo", "Cdc", "Includes", "DashMatch", "Hash", 
                      "Import", "Page", "Media", "Namespace", "Charset", 
                      "Important", "Percentage", "Uri", "UnicodeRange", 
                      "MediaOnly", "Not", "And", "Dimension", "UnknownDimension", 
                      "Plus", "Minus", "Greater", "Comma", "Tilde", "PseudoNot", 
                      "Number", "String", "PrefixMatch", "SuffixMatch", 
                      "SubstringMatch", "FontFace", "Supports", "Or", "Keyframes", 
                      "From", "To", "Calc", "Viewport", "CounterStyle", 
                      "FontFeatureValues", "DxImageTransform", "Variable", 
                      "Var", "Ident", "Function" ];

var ruleNames =  [ "stylesheet", "charset", "imports", "namespace", "namespacePrefix", 
                   "media", "mediaQueryList", "mediaQuery", "mediaType", 
                   "mediaExpression", "mediaFeature", "page", "pseudoPage", 
                   "selectorGroup", "selector", "combinator", "simpleSelectorSequence", 
                   "typeSelector", "typeNamespacePrefix", "elementName", 
                   "universal", "className", "attrib", "pseudo", "functionalPseudo", 
                   "expression", "negation", "negationArg", "operator", 
                   "property", "ruleset", "declarationList", "declaration", 
                   "prio", "value", "expr", "term", "function", "dxImageTransform", 
                   "hexcolor", "number", "percentage", "dimension", "unknownDimension", 
                   "any", "atRule", "atKeyword", "unused", "block", "nestedStatement", 
                   "groupRuleBody", "supportsRule", "supportsCondition", 
                   "supportsConditionInParens", "supportsNegation", "supportsConjunction", 
                   "supportsDisjunction", "supportsDeclarationCondition", 
                   "generalEnclosed", "var", "calc", "calcSum", "calcProduct", 
                   "calcValue", "fontFaceRule", "fontFaceDeclaration", "keyframesRule", 
                   "keyframesBlocks", "keyframeSelector", "viewport", "counterStyle", 
                   "fontFeatureValuesRule", "fontFamilyNameList", "fontFamilyName", 
                   "featureValueBlock", "featureType", "featureValueDefinition", 
                   "ident", "ws" ];

function css3Parser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

css3Parser.prototype = Object.create(antlr4.Parser.prototype);
css3Parser.prototype.constructor = css3Parser;

Object.defineProperty(css3Parser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

css3Parser.EOF = antlr4.Token.EOF;
css3Parser.T__0 = 1;
css3Parser.T__1 = 2;
css3Parser.T__2 = 3;
css3Parser.T__3 = 4;
css3Parser.T__4 = 5;
css3Parser.T__5 = 6;
css3Parser.T__6 = 7;
css3Parser.T__7 = 8;
css3Parser.T__8 = 9;
css3Parser.T__9 = 10;
css3Parser.T__10 = 11;
css3Parser.T__11 = 12;
css3Parser.T__12 = 13;
css3Parser.T__13 = 14;
css3Parser.T__14 = 15;
css3Parser.Comment = 16;
css3Parser.Space = 17;
css3Parser.Cdo = 18;
css3Parser.Cdc = 19;
css3Parser.Includes = 20;
css3Parser.DashMatch = 21;
css3Parser.Hash = 22;
css3Parser.Import = 23;
css3Parser.Page = 24;
css3Parser.Media = 25;
css3Parser.Namespace = 26;
css3Parser.Charset = 27;
css3Parser.Important = 28;
css3Parser.Percentage = 29;
css3Parser.Uri = 30;
css3Parser.UnicodeRange = 31;
css3Parser.MediaOnly = 32;
css3Parser.Not = 33;
css3Parser.And = 34;
css3Parser.Dimension = 35;
css3Parser.UnknownDimension = 36;
css3Parser.Plus = 37;
css3Parser.Minus = 38;
css3Parser.Greater = 39;
css3Parser.Comma = 40;
css3Parser.Tilde = 41;
css3Parser.PseudoNot = 42;
css3Parser.Number = 43;
css3Parser.String = 44;
css3Parser.PrefixMatch = 45;
css3Parser.SuffixMatch = 46;
css3Parser.SubstringMatch = 47;
css3Parser.FontFace = 48;
css3Parser.Supports = 49;
css3Parser.Or = 50;
css3Parser.Keyframes = 51;
css3Parser.From = 52;
css3Parser.To = 53;
css3Parser.Calc = 54;
css3Parser.Viewport = 55;
css3Parser.CounterStyle = 56;
css3Parser.FontFeatureValues = 57;
css3Parser.DxImageTransform = 58;
css3Parser.Variable = 59;
css3Parser.Var = 60;
css3Parser.Ident = 61;
css3Parser.Function = 62;

css3Parser.RULE_stylesheet = 0;
css3Parser.RULE_charset = 1;
css3Parser.RULE_imports = 2;
css3Parser.RULE_namespace = 3;
css3Parser.RULE_namespacePrefix = 4;
css3Parser.RULE_media = 5;
css3Parser.RULE_mediaQueryList = 6;
css3Parser.RULE_mediaQuery = 7;
css3Parser.RULE_mediaType = 8;
css3Parser.RULE_mediaExpression = 9;
css3Parser.RULE_mediaFeature = 10;
css3Parser.RULE_page = 11;
css3Parser.RULE_pseudoPage = 12;
css3Parser.RULE_selectorGroup = 13;
css3Parser.RULE_selector = 14;
css3Parser.RULE_combinator = 15;
css3Parser.RULE_simpleSelectorSequence = 16;
css3Parser.RULE_typeSelector = 17;
css3Parser.RULE_typeNamespacePrefix = 18;
css3Parser.RULE_elementName = 19;
css3Parser.RULE_universal = 20;
css3Parser.RULE_className = 21;
css3Parser.RULE_attrib = 22;
css3Parser.RULE_pseudo = 23;
css3Parser.RULE_functionalPseudo = 24;
css3Parser.RULE_expression = 25;
css3Parser.RULE_negation = 26;
css3Parser.RULE_negationArg = 27;
css3Parser.RULE_operator = 28;
css3Parser.RULE_property = 29;
css3Parser.RULE_ruleset = 30;
css3Parser.RULE_declarationList = 31;
css3Parser.RULE_declaration = 32;
css3Parser.RULE_prio = 33;
css3Parser.RULE_value = 34;
css3Parser.RULE_expr = 35;
css3Parser.RULE_term = 36;
css3Parser.RULE_function = 37;
css3Parser.RULE_dxImageTransform = 38;
css3Parser.RULE_hexcolor = 39;
css3Parser.RULE_number = 40;
css3Parser.RULE_percentage = 41;
css3Parser.RULE_dimension = 42;
css3Parser.RULE_unknownDimension = 43;
css3Parser.RULE_any = 44;
css3Parser.RULE_atRule = 45;
css3Parser.RULE_atKeyword = 46;
css3Parser.RULE_unused = 47;
css3Parser.RULE_block = 48;
css3Parser.RULE_nestedStatement = 49;
css3Parser.RULE_groupRuleBody = 50;
css3Parser.RULE_supportsRule = 51;
css3Parser.RULE_supportsCondition = 52;
css3Parser.RULE_supportsConditionInParens = 53;
css3Parser.RULE_supportsNegation = 54;
css3Parser.RULE_supportsConjunction = 55;
css3Parser.RULE_supportsDisjunction = 56;
css3Parser.RULE_supportsDeclarationCondition = 57;
css3Parser.RULE_generalEnclosed = 58;
css3Parser.RULE_var = 59;
css3Parser.RULE_calc = 60;
css3Parser.RULE_calcSum = 61;
css3Parser.RULE_calcProduct = 62;
css3Parser.RULE_calcValue = 63;
css3Parser.RULE_fontFaceRule = 64;
css3Parser.RULE_fontFaceDeclaration = 65;
css3Parser.RULE_keyframesRule = 66;
css3Parser.RULE_keyframesBlocks = 67;
css3Parser.RULE_keyframeSelector = 68;
css3Parser.RULE_viewport = 69;
css3Parser.RULE_counterStyle = 70;
css3Parser.RULE_fontFeatureValuesRule = 71;
css3Parser.RULE_fontFamilyNameList = 72;
css3Parser.RULE_fontFamilyName = 73;
css3Parser.RULE_featureValueBlock = 74;
css3Parser.RULE_featureType = 75;
css3Parser.RULE_featureValueDefinition = 76;
css3Parser.RULE_ident = 77;
css3Parser.RULE_ws = 78;

function StylesheetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_stylesheet;
    return this;
}

StylesheetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StylesheetContext.prototype.constructor = StylesheetContext;

StylesheetContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

StylesheetContext.prototype.charset = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CharsetContext);
    } else {
        return this.getTypedRuleContext(CharsetContext,i);
    }
};

StylesheetContext.prototype.imports = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportsContext);
    } else {
        return this.getTypedRuleContext(ImportsContext,i);
    }
};

StylesheetContext.prototype.namespace = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamespaceContext);
    } else {
        return this.getTypedRuleContext(NamespaceContext,i);
    }
};

StylesheetContext.prototype.nestedStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NestedStatementContext);
    } else {
        return this.getTypedRuleContext(NestedStatementContext,i);
    }
};

StylesheetContext.prototype.Comment = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Comment);
    } else {
        return this.getToken(css3Parser.Comment, i);
    }
};


StylesheetContext.prototype.Space = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Space);
    } else {
        return this.getToken(css3Parser.Space, i);
    }
};


StylesheetContext.prototype.Cdo = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Cdo);
    } else {
        return this.getToken(css3Parser.Cdo, i);
    }
};


StylesheetContext.prototype.Cdc = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Cdc);
    } else {
        return this.getToken(css3Parser.Cdc, i);
    }
};


StylesheetContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterStylesheet(this);
	}
};

StylesheetContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitStylesheet(this);
	}
};

StylesheetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitStylesheet(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.StylesheetContext = StylesheetContext;

css3Parser.prototype.stylesheet = function() {

    var localctx = new StylesheetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, css3Parser.RULE_stylesheet);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 158;
        this.ws();
        this.state = 168;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===css3Parser.Charset) {
            this.state = 159;
            this.charset();
            this.state = 163;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0)) {
                this.state = 160;
                _la = this._input.LA(1);
                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 165;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 170;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 180;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===css3Parser.Import) {
            this.state = 171;
            this.imports();
            this.state = 175;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0)) {
                this.state = 172;
                _la = this._input.LA(1);
                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 177;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 182;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 192;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===css3Parser.Namespace) {
            this.state = 183;
            this.namespace();
            this.state = 187;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0)) {
                this.state = 184;
                _la = this._input.LA(1);
                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 189;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 194;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 204;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__6) | (1 << css3Parser.T__7) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Page) | (1 << css3Parser.Media) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.PseudoNot - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String - 32)) | (1 << (css3Parser.FontFace - 32)) | (1 << (css3Parser.Supports - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.Keyframes - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Viewport - 32)) | (1 << (css3Parser.CounterStyle - 32)) | (1 << (css3Parser.FontFeatureValues - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function - 32)))) !== 0)) {
            this.state = 195;
            this.nestedStatement();
            this.state = 199;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0)) {
                this.state = 196;
                _la = this._input.LA(1);
                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.Comment) | (1 << css3Parser.Space) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 201;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 206;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CharsetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_charset;
    return this;
}

CharsetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CharsetContext.prototype.constructor = CharsetContext;


 
CharsetContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BadCharsetContext(parser, ctx) {
	CharsetContext.call(this, parser);
    CharsetContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BadCharsetContext.prototype = Object.create(CharsetContext.prototype);
BadCharsetContext.prototype.constructor = BadCharsetContext;

css3Parser.BadCharsetContext = BadCharsetContext;

BadCharsetContext.prototype.Charset = function() {
    return this.getToken(css3Parser.Charset, 0);
};

BadCharsetContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

BadCharsetContext.prototype.String = function() {
    return this.getToken(css3Parser.String, 0);
};
BadCharsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterBadCharset(this);
	}
};

BadCharsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitBadCharset(this);
	}
};

BadCharsetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitBadCharset(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function GoodCharsetContext(parser, ctx) {
	CharsetContext.call(this, parser);
    CharsetContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GoodCharsetContext.prototype = Object.create(CharsetContext.prototype);
GoodCharsetContext.prototype.constructor = GoodCharsetContext;

css3Parser.GoodCharsetContext = GoodCharsetContext;

GoodCharsetContext.prototype.Charset = function() {
    return this.getToken(css3Parser.Charset, 0);
};

GoodCharsetContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

GoodCharsetContext.prototype.String = function() {
    return this.getToken(css3Parser.String, 0);
};
GoodCharsetContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterGoodCharset(this);
	}
};

GoodCharsetContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitGoodCharset(this);
	}
};

GoodCharsetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitGoodCharset(this);
    } else {
        return visitor.visitChildren(this);
    }
};



css3Parser.CharsetContext = CharsetContext;

css3Parser.prototype.charset = function() {

    var localctx = new CharsetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, css3Parser.RULE_charset);
    try {
        this.state = 219;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            localctx = new GoodCharsetContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 207;
            this.match(css3Parser.Charset);
            this.state = 208;
            this.ws();
            this.state = 209;
            this.match(css3Parser.String);
            this.state = 210;
            this.ws();
            this.state = 211;
            this.match(css3Parser.T__0);
            this.state = 212;
            this.ws();
            break;

        case 2:
            localctx = new BadCharsetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 214;
            this.match(css3Parser.Charset);
            this.state = 215;
            this.ws();
            this.state = 216;
            this.match(css3Parser.String);
            this.state = 217;
            this.ws();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_imports;
    return this;
}

ImportsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportsContext.prototype.constructor = ImportsContext;


 
ImportsContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BadImportContext(parser, ctx) {
	ImportsContext.call(this, parser);
    ImportsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BadImportContext.prototype = Object.create(ImportsContext.prototype);
BadImportContext.prototype.constructor = BadImportContext;

css3Parser.BadImportContext = BadImportContext;

BadImportContext.prototype.Import = function() {
    return this.getToken(css3Parser.Import, 0);
};

BadImportContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

BadImportContext.prototype.mediaQueryList = function() {
    return this.getTypedRuleContext(MediaQueryListContext,0);
};

BadImportContext.prototype.String = function() {
    return this.getToken(css3Parser.String, 0);
};

BadImportContext.prototype.Uri = function() {
    return this.getToken(css3Parser.Uri, 0);
};
BadImportContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterBadImport(this);
	}
};

BadImportContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitBadImport(this);
	}
};

BadImportContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitBadImport(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function GoodImportContext(parser, ctx) {
	ImportsContext.call(this, parser);
    ImportsContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GoodImportContext.prototype = Object.create(ImportsContext.prototype);
GoodImportContext.prototype.constructor = GoodImportContext;

css3Parser.GoodImportContext = GoodImportContext;

GoodImportContext.prototype.Import = function() {
    return this.getToken(css3Parser.Import, 0);
};

GoodImportContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

GoodImportContext.prototype.mediaQueryList = function() {
    return this.getTypedRuleContext(MediaQueryListContext,0);
};

GoodImportContext.prototype.String = function() {
    return this.getToken(css3Parser.String, 0);
};

GoodImportContext.prototype.Uri = function() {
    return this.getToken(css3Parser.Uri, 0);
};
GoodImportContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterGoodImport(this);
	}
};

GoodImportContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitGoodImport(this);
	}
};

GoodImportContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitGoodImport(this);
    } else {
        return visitor.visitChildren(this);
    }
};



css3Parser.ImportsContext = ImportsContext;

css3Parser.prototype.imports = function() {

    var localctx = new ImportsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, css3Parser.RULE_imports);
    var _la = 0; // Token type
    try {
        this.state = 247;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            localctx = new GoodImportContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 221;
            this.match(css3Parser.Import);
            this.state = 222;
            this.ws();
            this.state = 223;
            _la = this._input.LA(1);
            if(!(_la===css3Parser.Uri || _la===css3Parser.String)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 224;
            this.ws();
            this.state = 225;
            this.mediaQueryList();
            this.state = 226;
            this.match(css3Parser.T__0);
            this.state = 227;
            this.ws();
            break;

        case 2:
            localctx = new GoodImportContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 229;
            this.match(css3Parser.Import);
            this.state = 230;
            this.ws();
            this.state = 231;
            _la = this._input.LA(1);
            if(!(_la===css3Parser.Uri || _la===css3Parser.String)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 232;
            this.ws();
            this.state = 233;
            this.match(css3Parser.T__0);
            this.state = 234;
            this.ws();
            break;

        case 3:
            localctx = new BadImportContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 236;
            this.match(css3Parser.Import);
            this.state = 237;
            this.ws();
            this.state = 238;
            _la = this._input.LA(1);
            if(!(_la===css3Parser.Uri || _la===css3Parser.String)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 239;
            this.ws();
            this.state = 240;
            this.mediaQueryList();
            break;

        case 4:
            localctx = new BadImportContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 242;
            this.match(css3Parser.Import);
            this.state = 243;
            this.ws();
            this.state = 244;
            _la = this._input.LA(1);
            if(!(_la===css3Parser.Uri || _la===css3Parser.String)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 245;
            this.ws();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_namespace;
    return this;
}

NamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceContext.prototype.constructor = NamespaceContext;


 
NamespaceContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function GoodNamespaceContext(parser, ctx) {
	NamespaceContext.call(this, parser);
    NamespaceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GoodNamespaceContext.prototype = Object.create(NamespaceContext.prototype);
GoodNamespaceContext.prototype.constructor = GoodNamespaceContext;

css3Parser.GoodNamespaceContext = GoodNamespaceContext;

GoodNamespaceContext.prototype.Namespace = function() {
    return this.getToken(css3Parser.Namespace, 0);
};

GoodNamespaceContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

GoodNamespaceContext.prototype.String = function() {
    return this.getToken(css3Parser.String, 0);
};

GoodNamespaceContext.prototype.Uri = function() {
    return this.getToken(css3Parser.Uri, 0);
};

GoodNamespaceContext.prototype.namespacePrefix = function() {
    return this.getTypedRuleContext(NamespacePrefixContext,0);
};
GoodNamespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterGoodNamespace(this);
	}
};

GoodNamespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitGoodNamespace(this);
	}
};

GoodNamespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitGoodNamespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BadNamespaceContext(parser, ctx) {
	NamespaceContext.call(this, parser);
    NamespaceContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BadNamespaceContext.prototype = Object.create(NamespaceContext.prototype);
BadNamespaceContext.prototype.constructor = BadNamespaceContext;

css3Parser.BadNamespaceContext = BadNamespaceContext;

BadNamespaceContext.prototype.Namespace = function() {
    return this.getToken(css3Parser.Namespace, 0);
};

BadNamespaceContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

BadNamespaceContext.prototype.String = function() {
    return this.getToken(css3Parser.String, 0);
};

BadNamespaceContext.prototype.Uri = function() {
    return this.getToken(css3Parser.Uri, 0);
};

BadNamespaceContext.prototype.namespacePrefix = function() {
    return this.getTypedRuleContext(NamespacePrefixContext,0);
};
BadNamespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterBadNamespace(this);
	}
};

BadNamespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitBadNamespace(this);
	}
};

BadNamespaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitBadNamespace(this);
    } else {
        return visitor.visitChildren(this);
    }
};



css3Parser.NamespaceContext = NamespaceContext;

css3Parser.prototype.namespace = function() {

    var localctx = new NamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, css3Parser.RULE_namespace);
    var _la = 0; // Token type
    try {
        this.state = 271;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            localctx = new GoodNamespaceContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 249;
            this.match(css3Parser.Namespace);
            this.state = 250;
            this.ws();
            this.state = 254;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
                this.state = 251;
                this.namespacePrefix();
                this.state = 252;
                this.ws();
            }

            this.state = 256;
            _la = this._input.LA(1);
            if(!(_la===css3Parser.Uri || _la===css3Parser.String)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 257;
            this.ws();
            this.state = 258;
            this.match(css3Parser.T__0);
            this.state = 259;
            this.ws();
            break;

        case 2:
            localctx = new BadNamespaceContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 261;
            this.match(css3Parser.Namespace);
            this.state = 262;
            this.ws();
            this.state = 266;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
                this.state = 263;
                this.namespacePrefix();
                this.state = 264;
                this.ws();
            }

            this.state = 268;
            _la = this._input.LA(1);
            if(!(_la===css3Parser.Uri || _la===css3Parser.String)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 269;
            this.ws();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespacePrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_namespacePrefix;
    return this;
}

NamespacePrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespacePrefixContext.prototype.constructor = NamespacePrefixContext;

NamespacePrefixContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

NamespacePrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterNamespacePrefix(this);
	}
};

NamespacePrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitNamespacePrefix(this);
	}
};

NamespacePrefixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitNamespacePrefix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.NamespacePrefixContext = NamespacePrefixContext;

css3Parser.prototype.namespacePrefix = function() {

    var localctx = new NamespacePrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, css3Parser.RULE_namespacePrefix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 273;
        this.ident();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MediaContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_media;
    return this;
}

MediaContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MediaContext.prototype.constructor = MediaContext;

MediaContext.prototype.Media = function() {
    return this.getToken(css3Parser.Media, 0);
};

MediaContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

MediaContext.prototype.mediaQueryList = function() {
    return this.getTypedRuleContext(MediaQueryListContext,0);
};

MediaContext.prototype.groupRuleBody = function() {
    return this.getTypedRuleContext(GroupRuleBodyContext,0);
};

MediaContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterMedia(this);
	}
};

MediaContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitMedia(this);
	}
};

MediaContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitMedia(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.MediaContext = MediaContext;

css3Parser.prototype.media = function() {

    var localctx = new MediaContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, css3Parser.RULE_media);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 275;
        this.match(css3Parser.Media);
        this.state = 276;
        this.ws();
        this.state = 277;
        this.mediaQueryList();
        this.state = 278;
        this.groupRuleBody();
        this.state = 279;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MediaQueryListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_mediaQueryList;
    return this;
}

MediaQueryListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MediaQueryListContext.prototype.constructor = MediaQueryListContext;

MediaQueryListContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

MediaQueryListContext.prototype.mediaQuery = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MediaQueryContext);
    } else {
        return this.getTypedRuleContext(MediaQueryContext,i);
    }
};

MediaQueryListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Comma);
    } else {
        return this.getToken(css3Parser.Comma, i);
    }
};


MediaQueryListContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterMediaQueryList(this);
	}
};

MediaQueryListContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitMediaQueryList(this);
	}
};

MediaQueryListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitMediaQueryList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.MediaQueryListContext = MediaQueryListContext;

css3Parser.prototype.mediaQueryList = function() {

    var localctx = new MediaQueryListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, css3Parser.RULE_mediaQueryList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 291;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        if(la_===1) {
            this.state = 281;
            this.mediaQuery();
            this.state = 288;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===css3Parser.Comma) {
                this.state = 282;
                this.match(css3Parser.Comma);
                this.state = 283;
                this.ws();
                this.state = 284;
                this.mediaQuery();
                this.state = 290;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

        }
        this.state = 293;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MediaQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_mediaQuery;
    return this;
}

MediaQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MediaQueryContext.prototype.constructor = MediaQueryContext;

MediaQueryContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

MediaQueryContext.prototype.mediaType = function() {
    return this.getTypedRuleContext(MediaTypeContext,0);
};

MediaQueryContext.prototype.And = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.And);
    } else {
        return this.getToken(css3Parser.And, i);
    }
};


MediaQueryContext.prototype.mediaExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MediaExpressionContext);
    } else {
        return this.getTypedRuleContext(MediaExpressionContext,i);
    }
};

MediaQueryContext.prototype.MediaOnly = function() {
    return this.getToken(css3Parser.MediaOnly, 0);
};

MediaQueryContext.prototype.Not = function() {
    return this.getToken(css3Parser.Not, 0);
};

MediaQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterMediaQuery(this);
	}
};

MediaQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitMediaQuery(this);
	}
};

MediaQueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitMediaQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.MediaQueryContext = MediaQueryContext;

css3Parser.prototype.mediaQuery = function() {

    var localctx = new MediaQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, css3Parser.RULE_mediaQuery);
    var _la = 0; // Token type
    try {
        this.state = 320;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case css3Parser.Comment:
        case css3Parser.Space:
        case css3Parser.MediaOnly:
        case css3Parser.Not:
        case css3Parser.And:
        case css3Parser.Or:
        case css3Parser.From:
        case css3Parser.To:
        case css3Parser.Ident:
            this.enterOuterAlt(localctx, 1);
            this.state = 296;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 295;
                _la = this._input.LA(1);
                if(!(_la===css3Parser.MediaOnly || _la===css3Parser.Not)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            this.state = 298;
            this.ws();
            this.state = 299;
            this.mediaType();
            this.state = 300;
            this.ws();
            this.state = 307;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 301;
                    this.match(css3Parser.And);
                    this.state = 302;
                    this.ws();
                    this.state = 303;
                    this.mediaExpression(); 
                }
                this.state = 309;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
            }

            break;
        case css3Parser.T__1:
            this.enterOuterAlt(localctx, 2);
            this.state = 310;
            this.mediaExpression();
            this.state = 317;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 311;
                    this.match(css3Parser.And);
                    this.state = 312;
                    this.ws();
                    this.state = 313;
                    this.mediaExpression(); 
                }
                this.state = 319;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MediaTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_mediaType;
    return this;
}

MediaTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MediaTypeContext.prototype.constructor = MediaTypeContext;

MediaTypeContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

MediaTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterMediaType(this);
	}
};

MediaTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitMediaType(this);
	}
};

MediaTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitMediaType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.MediaTypeContext = MediaTypeContext;

css3Parser.prototype.mediaType = function() {

    var localctx = new MediaTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, css3Parser.RULE_mediaType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 322;
        this.ident();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MediaExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_mediaExpression;
    return this;
}

MediaExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MediaExpressionContext.prototype.constructor = MediaExpressionContext;

MediaExpressionContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

MediaExpressionContext.prototype.mediaFeature = function() {
    return this.getTypedRuleContext(MediaFeatureContext,0);
};

MediaExpressionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

MediaExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterMediaExpression(this);
	}
};

MediaExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitMediaExpression(this);
	}
};

MediaExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitMediaExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.MediaExpressionContext = MediaExpressionContext;

css3Parser.prototype.mediaExpression = function() {

    var localctx = new MediaExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, css3Parser.RULE_mediaExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 324;
        this.match(css3Parser.T__1);
        this.state = 325;
        this.ws();
        this.state = 326;
        this.mediaFeature();
        this.state = 331;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===css3Parser.T__2) {
            this.state = 327;
            this.match(css3Parser.T__2);
            this.state = 328;
            this.ws();
            this.state = 329;
            this.expr();
        }

        this.state = 333;
        this.match(css3Parser.T__3);
        this.state = 334;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MediaFeatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_mediaFeature;
    return this;
}

MediaFeatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MediaFeatureContext.prototype.constructor = MediaFeatureContext;

MediaFeatureContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

MediaFeatureContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

MediaFeatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterMediaFeature(this);
	}
};

MediaFeatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitMediaFeature(this);
	}
};

MediaFeatureContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitMediaFeature(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.MediaFeatureContext = MediaFeatureContext;

css3Parser.prototype.mediaFeature = function() {

    var localctx = new MediaFeatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, css3Parser.RULE_mediaFeature);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this.ident();
        this.state = 337;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_page;
    return this;
}

PageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PageContext.prototype.constructor = PageContext;

PageContext.prototype.Page = function() {
    return this.getToken(css3Parser.Page, 0);
};

PageContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

PageContext.prototype.pseudoPage = function() {
    return this.getTypedRuleContext(PseudoPageContext,0);
};

PageContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

PageContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterPage(this);
	}
};

PageContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitPage(this);
	}
};

PageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitPage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.PageContext = PageContext;

css3Parser.prototype.page = function() {

    var localctx = new PageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, css3Parser.RULE_page);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 339;
        this.match(css3Parser.Page);
        this.state = 340;
        this.ws();
        this.state = 342;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===css3Parser.T__2) {
            this.state = 341;
            this.pseudoPage();
        }

        this.state = 344;
        this.match(css3Parser.T__4);
        this.state = 345;
        this.ws();
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===css3Parser.T__6 || _la===css3Parser.T__13 || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
            this.state = 346;
            this.declaration();
        }

        this.state = 356;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===css3Parser.T__0) {
            this.state = 349;
            this.match(css3Parser.T__0);
            this.state = 350;
            this.ws();
            this.state = 352;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===css3Parser.T__6 || _la===css3Parser.T__13 || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
                this.state = 351;
                this.declaration();
            }

            this.state = 358;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 359;
        this.match(css3Parser.T__5);
        this.state = 360;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PseudoPageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_pseudoPage;
    return this;
}

PseudoPageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PseudoPageContext.prototype.constructor = PseudoPageContext;

PseudoPageContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

PseudoPageContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

PseudoPageContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterPseudoPage(this);
	}
};

PseudoPageContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitPseudoPage(this);
	}
};

PseudoPageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitPseudoPage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.PseudoPageContext = PseudoPageContext;

css3Parser.prototype.pseudoPage = function() {

    var localctx = new PseudoPageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, css3Parser.RULE_pseudoPage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 362;
        this.match(css3Parser.T__2);
        this.state = 363;
        this.ident();
        this.state = 364;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectorGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_selectorGroup;
    return this;
}

SelectorGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectorGroupContext.prototype.constructor = SelectorGroupContext;

SelectorGroupContext.prototype.selector = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectorContext);
    } else {
        return this.getTypedRuleContext(SelectorContext,i);
    }
};

SelectorGroupContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Comma);
    } else {
        return this.getToken(css3Parser.Comma, i);
    }
};


SelectorGroupContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

SelectorGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterSelectorGroup(this);
	}
};

SelectorGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitSelectorGroup(this);
	}
};

SelectorGroupContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitSelectorGroup(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.SelectorGroupContext = SelectorGroupContext;

css3Parser.prototype.selectorGroup = function() {

    var localctx = new SelectorGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, css3Parser.RULE_selectorGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this.selector();
        this.state = 373;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===css3Parser.Comma) {
            this.state = 367;
            this.match(css3Parser.Comma);
            this.state = 368;
            this.ws();
            this.state = 369;
            this.selector();
            this.state = 375;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_selector;
    return this;
}

SelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectorContext.prototype.constructor = SelectorContext;

SelectorContext.prototype.simpleSelectorSequence = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimpleSelectorSequenceContext);
    } else {
        return this.getTypedRuleContext(SimpleSelectorSequenceContext,i);
    }
};

SelectorContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

SelectorContext.prototype.combinator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CombinatorContext);
    } else {
        return this.getTypedRuleContext(CombinatorContext,i);
    }
};

SelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterSelector(this);
	}
};

SelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitSelector(this);
	}
};

SelectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitSelector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.SelectorContext = SelectorContext;

css3Parser.prototype.selector = function() {

    var localctx = new SelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, css3Parser.RULE_selector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 376;
        this.simpleSelectorSequence();
        this.state = 377;
        this.ws();
        this.state = 384;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 17)) & ~0x1f) == 0 && ((1 << (_la - 17)) & ((1 << (css3Parser.Space - 17)) | (1 << (css3Parser.Plus - 17)) | (1 << (css3Parser.Greater - 17)) | (1 << (css3Parser.Tilde - 17)))) !== 0)) {
            this.state = 378;
            this.combinator();
            this.state = 379;
            this.simpleSelectorSequence();
            this.state = 380;
            this.ws();
            this.state = 386;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CombinatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_combinator;
    return this;
}

CombinatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CombinatorContext.prototype.constructor = CombinatorContext;

CombinatorContext.prototype.Plus = function() {
    return this.getToken(css3Parser.Plus, 0);
};

CombinatorContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

CombinatorContext.prototype.Greater = function() {
    return this.getToken(css3Parser.Greater, 0);
};

CombinatorContext.prototype.Tilde = function() {
    return this.getToken(css3Parser.Tilde, 0);
};

CombinatorContext.prototype.Space = function() {
    return this.getToken(css3Parser.Space, 0);
};

CombinatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterCombinator(this);
	}
};

CombinatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitCombinator(this);
	}
};

CombinatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitCombinator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.CombinatorContext = CombinatorContext;

css3Parser.prototype.combinator = function() {

    var localctx = new CombinatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, css3Parser.RULE_combinator);
    try {
        this.state = 395;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case css3Parser.Plus:
            this.enterOuterAlt(localctx, 1);
            this.state = 387;
            this.match(css3Parser.Plus);
            this.state = 388;
            this.ws();
            break;
        case css3Parser.Greater:
            this.enterOuterAlt(localctx, 2);
            this.state = 389;
            this.match(css3Parser.Greater);
            this.state = 390;
            this.ws();
            break;
        case css3Parser.Tilde:
            this.enterOuterAlt(localctx, 3);
            this.state = 391;
            this.match(css3Parser.Tilde);
            this.state = 392;
            this.ws();
            break;
        case css3Parser.Space:
            this.enterOuterAlt(localctx, 4);
            this.state = 393;
            this.match(css3Parser.Space);
            this.state = 394;
            this.ws();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpleSelectorSequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_simpleSelectorSequence;
    return this;
}

SimpleSelectorSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleSelectorSequenceContext.prototype.constructor = SimpleSelectorSequenceContext;

SimpleSelectorSequenceContext.prototype.typeSelector = function() {
    return this.getTypedRuleContext(TypeSelectorContext,0);
};

SimpleSelectorSequenceContext.prototype.universal = function() {
    return this.getTypedRuleContext(UniversalContext,0);
};

SimpleSelectorSequenceContext.prototype.Hash = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Hash);
    } else {
        return this.getToken(css3Parser.Hash, i);
    }
};


SimpleSelectorSequenceContext.prototype.className = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassNameContext);
    } else {
        return this.getTypedRuleContext(ClassNameContext,i);
    }
};

SimpleSelectorSequenceContext.prototype.attrib = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AttribContext);
    } else {
        return this.getTypedRuleContext(AttribContext,i);
    }
};

SimpleSelectorSequenceContext.prototype.pseudo = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PseudoContext);
    } else {
        return this.getTypedRuleContext(PseudoContext,i);
    }
};

SimpleSelectorSequenceContext.prototype.negation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NegationContext);
    } else {
        return this.getTypedRuleContext(NegationContext,i);
    }
};

SimpleSelectorSequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterSimpleSelectorSequence(this);
	}
};

SimpleSelectorSequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitSimpleSelectorSequence(this);
	}
};

SimpleSelectorSequenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitSimpleSelectorSequence(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.SimpleSelectorSequenceContext = SimpleSelectorSequenceContext;

css3Parser.prototype.simpleSelectorSequence = function() {

    var localctx = new SimpleSelectorSequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, css3Parser.RULE_simpleSelectorSequence);
    var _la = 0; // Token type
    try {
        this.state = 420;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case css3Parser.T__6:
        case css3Parser.T__7:
        case css3Parser.MediaOnly:
        case css3Parser.Not:
        case css3Parser.And:
        case css3Parser.Or:
        case css3Parser.From:
        case css3Parser.To:
        case css3Parser.Ident:
            this.enterOuterAlt(localctx, 1);
            this.state = 399;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
            switch(la_) {
            case 1:
                this.state = 397;
                this.typeSelector();
                break;

            case 2:
                this.state = 398;
                this.universal();
                break;

            }
            this.state = 408;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__2) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.Hash))) !== 0) || _la===css3Parser.PseudoNot) {
                this.state = 406;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case css3Parser.Hash:
                    this.state = 401;
                    this.match(css3Parser.Hash);
                    break;
                case css3Parser.T__8:
                    this.state = 402;
                    this.className();
                    break;
                case css3Parser.T__9:
                    this.state = 403;
                    this.attrib();
                    break;
                case css3Parser.T__2:
                    this.state = 404;
                    this.pseudo();
                    break;
                case css3Parser.PseudoNot:
                    this.state = 405;
                    this.negation();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 410;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case css3Parser.T__2:
        case css3Parser.T__8:
        case css3Parser.T__9:
        case css3Parser.Hash:
        case css3Parser.PseudoNot:
            this.enterOuterAlt(localctx, 2);
            this.state = 416; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 416;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case css3Parser.Hash:
                    this.state = 411;
                    this.match(css3Parser.Hash);
                    break;
                case css3Parser.T__8:
                    this.state = 412;
                    this.className();
                    break;
                case css3Parser.T__9:
                    this.state = 413;
                    this.attrib();
                    break;
                case css3Parser.T__2:
                    this.state = 414;
                    this.pseudo();
                    break;
                case css3Parser.PseudoNot:
                    this.state = 415;
                    this.negation();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 418; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__2) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.Hash))) !== 0) || _la===css3Parser.PseudoNot);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_typeSelector;
    return this;
}

TypeSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSelectorContext.prototype.constructor = TypeSelectorContext;

TypeSelectorContext.prototype.elementName = function() {
    return this.getTypedRuleContext(ElementNameContext,0);
};

TypeSelectorContext.prototype.typeNamespacePrefix = function() {
    return this.getTypedRuleContext(TypeNamespacePrefixContext,0);
};

TypeSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterTypeSelector(this);
	}
};

TypeSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitTypeSelector(this);
	}
};

TypeSelectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitTypeSelector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.TypeSelectorContext = TypeSelectorContext;

css3Parser.prototype.typeSelector = function() {

    var localctx = new TypeSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, css3Parser.RULE_typeSelector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 423;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        if(la_===1) {
            this.state = 422;
            this.typeNamespacePrefix();

        }
        this.state = 425;
        this.elementName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeNamespacePrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_typeNamespacePrefix;
    return this;
}

TypeNamespacePrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNamespacePrefixContext.prototype.constructor = TypeNamespacePrefixContext;

TypeNamespacePrefixContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

TypeNamespacePrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterTypeNamespacePrefix(this);
	}
};

TypeNamespacePrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitTypeNamespacePrefix(this);
	}
};

TypeNamespacePrefixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitTypeNamespacePrefix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.TypeNamespacePrefixContext = TypeNamespacePrefixContext;

css3Parser.prototype.typeNamespacePrefix = function() {

    var localctx = new TypeNamespacePrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, css3Parser.RULE_typeNamespacePrefix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 429;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case css3Parser.MediaOnly:
        case css3Parser.Not:
        case css3Parser.And:
        case css3Parser.Or:
        case css3Parser.From:
        case css3Parser.To:
        case css3Parser.Ident:
        	this.state = 427;
        	this.ident();
        	break;
        case css3Parser.T__6:
        	this.state = 428;
        	this.match(css3Parser.T__6);
        	break;
        case css3Parser.T__7:
        	break;
        default:
        	break;
        }
        this.state = 431;
        this.match(css3Parser.T__7);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_elementName;
    return this;
}

ElementNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementNameContext.prototype.constructor = ElementNameContext;

ElementNameContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ElementNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterElementName(this);
	}
};

ElementNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitElementName(this);
	}
};

ElementNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitElementName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.ElementNameContext = ElementNameContext;

css3Parser.prototype.elementName = function() {

    var localctx = new ElementNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, css3Parser.RULE_elementName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 433;
        this.ident();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UniversalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_universal;
    return this;
}

UniversalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UniversalContext.prototype.constructor = UniversalContext;

UniversalContext.prototype.typeNamespacePrefix = function() {
    return this.getTypedRuleContext(TypeNamespacePrefixContext,0);
};

UniversalContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterUniversal(this);
	}
};

UniversalContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitUniversal(this);
	}
};

UniversalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitUniversal(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.UniversalContext = UniversalContext;

css3Parser.prototype.universal = function() {

    var localctx = new UniversalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, css3Parser.RULE_universal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 436;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 435;
            this.typeNamespacePrefix();

        }
        this.state = 438;
        this.match(css3Parser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_className;
    return this;
}

ClassNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassNameContext.prototype.constructor = ClassNameContext;

ClassNameContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ClassNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterClassName(this);
	}
};

ClassNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitClassName(this);
	}
};

ClassNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitClassName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.ClassNameContext = ClassNameContext;

css3Parser.prototype.className = function() {

    var localctx = new ClassNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, css3Parser.RULE_className);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 440;
        this.match(css3Parser.T__8);
        this.state = 441;
        this.ident();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AttribContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_attrib;
    return this;
}

AttribContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttribContext.prototype.constructor = AttribContext;

AttribContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

AttribContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

AttribContext.prototype.typeNamespacePrefix = function() {
    return this.getTypedRuleContext(TypeNamespacePrefixContext,0);
};

AttribContext.prototype.PrefixMatch = function() {
    return this.getToken(css3Parser.PrefixMatch, 0);
};

AttribContext.prototype.SuffixMatch = function() {
    return this.getToken(css3Parser.SuffixMatch, 0);
};

AttribContext.prototype.SubstringMatch = function() {
    return this.getToken(css3Parser.SubstringMatch, 0);
};

AttribContext.prototype.Includes = function() {
    return this.getToken(css3Parser.Includes, 0);
};

AttribContext.prototype.DashMatch = function() {
    return this.getToken(css3Parser.DashMatch, 0);
};

AttribContext.prototype.String = function() {
    return this.getToken(css3Parser.String, 0);
};

AttribContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterAttrib(this);
	}
};

AttribContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitAttrib(this);
	}
};

AttribContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitAttrib(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.AttribContext = AttribContext;

css3Parser.prototype.attrib = function() {

    var localctx = new AttribContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, css3Parser.RULE_attrib);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 443;
        this.match(css3Parser.T__9);
        this.state = 444;
        this.ws();
        this.state = 446;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        if(la_===1) {
            this.state = 445;
            this.typeNamespacePrefix();

        }
        this.state = 448;
        this.ident();
        this.state = 449;
        this.ws();
        this.state = 458;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__10) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (css3Parser.PrefixMatch - 45)) | (1 << (css3Parser.SuffixMatch - 45)) | (1 << (css3Parser.SubstringMatch - 45)))) !== 0)) {
            this.state = 450;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__10) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (css3Parser.PrefixMatch - 45)) | (1 << (css3Parser.SuffixMatch - 45)) | (1 << (css3Parser.SubstringMatch - 45)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 451;
            this.ws();
            this.state = 454;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case css3Parser.MediaOnly:
            case css3Parser.Not:
            case css3Parser.And:
            case css3Parser.Or:
            case css3Parser.From:
            case css3Parser.To:
            case css3Parser.Ident:
                this.state = 452;
                this.ident();
                break;
            case css3Parser.String:
                this.state = 453;
                this.match(css3Parser.String);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 456;
            this.ws();
        }

        this.state = 460;
        this.match(css3Parser.T__11);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PseudoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_pseudo;
    return this;
}

PseudoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PseudoContext.prototype.constructor = PseudoContext;

PseudoContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

PseudoContext.prototype.functionalPseudo = function() {
    return this.getTypedRuleContext(FunctionalPseudoContext,0);
};

PseudoContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterPseudo(this);
	}
};

PseudoContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitPseudo(this);
	}
};

PseudoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitPseudo(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.PseudoContext = PseudoContext;

css3Parser.prototype.pseudo = function() {

    var localctx = new PseudoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, css3Parser.RULE_pseudo);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 462;
        this.match(css3Parser.T__2);
        this.state = 464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===css3Parser.T__2) {
            this.state = 463;
            this.match(css3Parser.T__2);
        }

        this.state = 468;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case css3Parser.MediaOnly:
        case css3Parser.Not:
        case css3Parser.And:
        case css3Parser.Or:
        case css3Parser.From:
        case css3Parser.To:
        case css3Parser.Ident:
            this.state = 466;
            this.ident();
            break;
        case css3Parser.Function:
            this.state = 467;
            this.functionalPseudo();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionalPseudoContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_functionalPseudo;
    return this;
}

FunctionalPseudoContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionalPseudoContext.prototype.constructor = FunctionalPseudoContext;

FunctionalPseudoContext.prototype.Function = function() {
    return this.getToken(css3Parser.Function, 0);
};

FunctionalPseudoContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

FunctionalPseudoContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

FunctionalPseudoContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterFunctionalPseudo(this);
	}
};

FunctionalPseudoContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitFunctionalPseudo(this);
	}
};

FunctionalPseudoContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitFunctionalPseudo(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.FunctionalPseudoContext = FunctionalPseudoContext;

css3Parser.prototype.functionalPseudo = function() {

    var localctx = new FunctionalPseudoContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, css3Parser.RULE_functionalPseudo);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 470;
        this.match(css3Parser.Function);
        this.state = 471;
        this.ws();
        this.state = 472;
        this.expression();
        this.state = 473;
        this.match(css3Parser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

ExpressionContext.prototype.Plus = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Plus);
    } else {
        return this.getToken(css3Parser.Plus, i);
    }
};


ExpressionContext.prototype.Minus = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Minus);
    } else {
        return this.getToken(css3Parser.Minus, i);
    }
};


ExpressionContext.prototype.Dimension = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Dimension);
    } else {
        return this.getToken(css3Parser.Dimension, i);
    }
};


ExpressionContext.prototype.UnknownDimension = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.UnknownDimension);
    } else {
        return this.getToken(css3Parser.UnknownDimension, i);
    }
};


ExpressionContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Number);
    } else {
        return this.getToken(css3Parser.Number, i);
    }
};


ExpressionContext.prototype.String = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.String);
    } else {
        return this.getToken(css3Parser.String, i);
    }
};


ExpressionContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.ExpressionContext = ExpressionContext;

css3Parser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, css3Parser.RULE_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 485; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 482;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case css3Parser.Plus:
                this.state = 475;
                this.match(css3Parser.Plus);
                break;
            case css3Parser.Minus:
                this.state = 476;
                this.match(css3Parser.Minus);
                break;
            case css3Parser.Dimension:
                this.state = 477;
                this.match(css3Parser.Dimension);
                break;
            case css3Parser.UnknownDimension:
                this.state = 478;
                this.match(css3Parser.UnknownDimension);
                break;
            case css3Parser.Number:
                this.state = 479;
                this.match(css3Parser.Number);
                break;
            case css3Parser.String:
                this.state = 480;
                this.match(css3Parser.String);
                break;
            case css3Parser.MediaOnly:
            case css3Parser.Not:
            case css3Parser.And:
            case css3Parser.Or:
            case css3Parser.From:
            case css3Parser.To:
            case css3Parser.Ident:
                this.state = 481;
                this.ident();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 484;
            this.ws();
            this.state = 487; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NegationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_negation;
    return this;
}

NegationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NegationContext.prototype.constructor = NegationContext;

NegationContext.prototype.PseudoNot = function() {
    return this.getToken(css3Parser.PseudoNot, 0);
};

NegationContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

NegationContext.prototype.negationArg = function() {
    return this.getTypedRuleContext(NegationArgContext,0);
};

NegationContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterNegation(this);
	}
};

NegationContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitNegation(this);
	}
};

NegationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitNegation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.NegationContext = NegationContext;

css3Parser.prototype.negation = function() {

    var localctx = new NegationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, css3Parser.RULE_negation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 489;
        this.match(css3Parser.PseudoNot);
        this.state = 490;
        this.ws();
        this.state = 491;
        this.negationArg();
        this.state = 492;
        this.ws();
        this.state = 493;
        this.match(css3Parser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NegationArgContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_negationArg;
    return this;
}

NegationArgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NegationArgContext.prototype.constructor = NegationArgContext;

NegationArgContext.prototype.typeSelector = function() {
    return this.getTypedRuleContext(TypeSelectorContext,0);
};

NegationArgContext.prototype.universal = function() {
    return this.getTypedRuleContext(UniversalContext,0);
};

NegationArgContext.prototype.Hash = function() {
    return this.getToken(css3Parser.Hash, 0);
};

NegationArgContext.prototype.className = function() {
    return this.getTypedRuleContext(ClassNameContext,0);
};

NegationArgContext.prototype.attrib = function() {
    return this.getTypedRuleContext(AttribContext,0);
};

NegationArgContext.prototype.pseudo = function() {
    return this.getTypedRuleContext(PseudoContext,0);
};

NegationArgContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterNegationArg(this);
	}
};

NegationArgContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitNegationArg(this);
	}
};

NegationArgContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitNegationArg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.NegationArgContext = NegationArgContext;

css3Parser.prototype.negationArg = function() {

    var localctx = new NegationArgContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, css3Parser.RULE_negationArg);
    try {
        this.state = 501;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 495;
            this.typeSelector();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 496;
            this.universal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 497;
            this.match(css3Parser.Hash);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 498;
            this.className();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 499;
            this.attrib();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 500;
            this.pseudo();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;


 
OperatorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BadOperatorContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BadOperatorContext.prototype = Object.create(OperatorContext.prototype);
BadOperatorContext.prototype.constructor = BadOperatorContext;

css3Parser.BadOperatorContext = BadOperatorContext;

BadOperatorContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};
BadOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterBadOperator(this);
	}
};

BadOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitBadOperator(this);
	}
};

BadOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitBadOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function GoodOperatorContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GoodOperatorContext.prototype = Object.create(OperatorContext.prototype);
GoodOperatorContext.prototype.constructor = GoodOperatorContext;

css3Parser.GoodOperatorContext = GoodOperatorContext;

GoodOperatorContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

GoodOperatorContext.prototype.Comma = function() {
    return this.getToken(css3Parser.Comma, 0);
};

GoodOperatorContext.prototype.Space = function() {
    return this.getToken(css3Parser.Space, 0);
};
GoodOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterGoodOperator(this);
	}
};

GoodOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitGoodOperator(this);
	}
};

GoodOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitGoodOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



css3Parser.OperatorContext = OperatorContext;

css3Parser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, css3Parser.RULE_operator);
    try {
        this.state = 511;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case css3Parser.T__12:
            localctx = new GoodOperatorContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 503;
            this.match(css3Parser.T__12);
            this.state = 504;
            this.ws();
            break;
        case css3Parser.Comma:
            localctx = new GoodOperatorContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 505;
            this.match(css3Parser.Comma);
            this.state = 506;
            this.ws();
            break;
        case css3Parser.Space:
            localctx = new GoodOperatorContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 507;
            this.match(css3Parser.Space);
            this.state = 508;
            this.ws();
            break;
        case css3Parser.T__10:
            localctx = new BadOperatorContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 509;
            this.match(css3Parser.T__10);
            this.state = 510;
            this.ws();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_property;
    return this;
}

PropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyContext.prototype.constructor = PropertyContext;


 
PropertyContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BadPropertyContext(parser, ctx) {
	PropertyContext.call(this, parser);
    PropertyContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BadPropertyContext.prototype = Object.create(PropertyContext.prototype);
BadPropertyContext.prototype.constructor = BadPropertyContext;

css3Parser.BadPropertyContext = BadPropertyContext;

BadPropertyContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};
BadPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterBadProperty(this);
	}
};

BadPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitBadProperty(this);
	}
};

BadPropertyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitBadProperty(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function GoodPropertyContext(parser, ctx) {
	PropertyContext.call(this, parser);
    PropertyContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GoodPropertyContext.prototype = Object.create(PropertyContext.prototype);
GoodPropertyContext.prototype.constructor = GoodPropertyContext;

css3Parser.GoodPropertyContext = GoodPropertyContext;

GoodPropertyContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

GoodPropertyContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

GoodPropertyContext.prototype.Variable = function() {
    return this.getToken(css3Parser.Variable, 0);
};
GoodPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterGoodProperty(this);
	}
};

GoodPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitGoodProperty(this);
	}
};

GoodPropertyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitGoodProperty(this);
    } else {
        return visitor.visitChildren(this);
    }
};



css3Parser.PropertyContext = PropertyContext;

css3Parser.prototype.property = function() {

    var localctx = new PropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, css3Parser.RULE_property);
    try {
        this.state = 522;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case css3Parser.MediaOnly:
        case css3Parser.Not:
        case css3Parser.And:
        case css3Parser.Or:
        case css3Parser.From:
        case css3Parser.To:
        case css3Parser.Ident:
            localctx = new GoodPropertyContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 513;
            this.ident();
            this.state = 514;
            this.ws();
            break;
        case css3Parser.Variable:
            localctx = new GoodPropertyContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 516;
            this.match(css3Parser.Variable);
            this.state = 517;
            this.ws();
            break;
        case css3Parser.T__6:
            localctx = new BadPropertyContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 518;
            this.match(css3Parser.T__6);
            this.state = 519;
            this.ident();
            break;
        case css3Parser.T__13:
            localctx = new BadPropertyContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 520;
            this.match(css3Parser.T__13);
            this.state = 521;
            this.ident();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RulesetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_ruleset;
    return this;
}

RulesetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RulesetContext.prototype.constructor = RulesetContext;


 
RulesetContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UnknownRulesetContext(parser, ctx) {
	RulesetContext.call(this, parser);
    RulesetContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnknownRulesetContext.prototype = Object.create(RulesetContext.prototype);
UnknownRulesetContext.prototype.constructor = UnknownRulesetContext;

css3Parser.UnknownRulesetContext = UnknownRulesetContext;

UnknownRulesetContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

UnknownRulesetContext.prototype.any = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnyContext);
    } else {
        return this.getTypedRuleContext(AnyContext,i);
    }
};

UnknownRulesetContext.prototype.declarationList = function() {
    return this.getTypedRuleContext(DeclarationListContext,0);
};
UnknownRulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterUnknownRuleset(this);
	}
};

UnknownRulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitUnknownRuleset(this);
	}
};

UnknownRulesetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitUnknownRuleset(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function KnownRulesetContext(parser, ctx) {
	RulesetContext.call(this, parser);
    RulesetContext.prototype.copyFrom.call(this, ctx);
    return this;
}

KnownRulesetContext.prototype = Object.create(RulesetContext.prototype);
KnownRulesetContext.prototype.constructor = KnownRulesetContext;

css3Parser.KnownRulesetContext = KnownRulesetContext;

KnownRulesetContext.prototype.selectorGroup = function() {
    return this.getTypedRuleContext(SelectorGroupContext,0);
};

KnownRulesetContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

KnownRulesetContext.prototype.declarationList = function() {
    return this.getTypedRuleContext(DeclarationListContext,0);
};
KnownRulesetContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterKnownRuleset(this);
	}
};

KnownRulesetContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitKnownRuleset(this);
	}
};

KnownRulesetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitKnownRuleset(this);
    } else {
        return visitor.visitChildren(this);
    }
};



css3Parser.RulesetContext = RulesetContext;

css3Parser.prototype.ruleset = function() {

    var localctx = new RulesetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, css3Parser.RULE_ruleset);
    var _la = 0; // Token type
    try {
        this.state = 547;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        switch(la_) {
        case 1:
            localctx = new KnownRulesetContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 524;
            this.selectorGroup();
            this.state = 525;
            this.match(css3Parser.T__4);
            this.state = 526;
            this.ws();
            this.state = 528;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
                this.state = 527;
                this.declarationList();
            }

            this.state = 530;
            this.match(css3Parser.T__5);
            this.state = 531;
            this.ws();
            break;

        case 2:
            localctx = new UnknownRulesetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 536;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__9) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function - 32)))) !== 0)) {
                this.state = 533;
                this.any();
                this.state = 538;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 539;
            this.match(css3Parser.T__4);
            this.state = 540;
            this.ws();
            this.state = 542;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
                this.state = 541;
                this.declarationList();
            }

            this.state = 544;
            this.match(css3Parser.T__5);
            this.state = 545;
            this.ws();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_declarationList;
    return this;
}

DeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationListContext.prototype.constructor = DeclarationListContext;

DeclarationListContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

DeclarationListContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

DeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterDeclarationList(this);
	}
};

DeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitDeclarationList(this);
	}
};

DeclarationListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitDeclarationList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.DeclarationListContext = DeclarationListContext;

css3Parser.prototype.declarationList = function() {

    var localctx = new DeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, css3Parser.RULE_declarationList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===css3Parser.T__0) {
            this.state = 549;
            this.match(css3Parser.T__0);
            this.state = 550;
            this.ws();
            this.state = 555;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 556;
        this.declaration();
        this.state = 557;
        this.ws();
        this.state = 565;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 558;
                this.match(css3Parser.T__0);
                this.state = 559;
                this.ws();
                this.state = 561;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
                if(la_===1) {
                    this.state = 560;
                    this.declaration();

                } 
            }
            this.state = 567;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;


 
DeclarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UnknownDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnknownDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
UnknownDeclarationContext.prototype.constructor = UnknownDeclarationContext;

css3Parser.UnknownDeclarationContext = UnknownDeclarationContext;

UnknownDeclarationContext.prototype.property = function() {
    return this.getTypedRuleContext(PropertyContext,0);
};

UnknownDeclarationContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

UnknownDeclarationContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};
UnknownDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterUnknownDeclaration(this);
	}
};

UnknownDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitUnknownDeclaration(this);
	}
};

UnknownDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitUnknownDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function KnownDeclarationContext(parser, ctx) {
	DeclarationContext.call(this, parser);
    DeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

KnownDeclarationContext.prototype = Object.create(DeclarationContext.prototype);
KnownDeclarationContext.prototype.constructor = KnownDeclarationContext;

css3Parser.KnownDeclarationContext = KnownDeclarationContext;

KnownDeclarationContext.prototype.property = function() {
    return this.getTypedRuleContext(PropertyContext,0);
};

KnownDeclarationContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

KnownDeclarationContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

KnownDeclarationContext.prototype.prio = function() {
    return this.getTypedRuleContext(PrioContext,0);
};
KnownDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterKnownDeclaration(this);
	}
};

KnownDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitKnownDeclaration(this);
	}
};

KnownDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitKnownDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};



css3Parser.DeclarationContext = DeclarationContext;

css3Parser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, css3Parser.RULE_declaration);
    var _la = 0; // Token type
    try {
        this.state = 580;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            localctx = new KnownDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 568;
            this.property();
            this.state = 569;
            this.match(css3Parser.T__2);
            this.state = 570;
            this.ws();
            this.state = 571;
            this.expr();
            this.state = 573;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===css3Parser.Important) {
                this.state = 572;
                this.prio();
            }

            break;

        case 2:
            localctx = new UnknownDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 575;
            this.property();
            this.state = 576;
            this.match(css3Parser.T__2);
            this.state = 577;
            this.ws();
            this.state = 578;
            this.value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrioContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_prio;
    return this;
}

PrioContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrioContext.prototype.constructor = PrioContext;

PrioContext.prototype.Important = function() {
    return this.getToken(css3Parser.Important, 0);
};

PrioContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

PrioContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterPrio(this);
	}
};

PrioContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitPrio(this);
	}
};

PrioContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitPrio(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.PrioContext = PrioContext;

css3Parser.prototype.prio = function() {

    var localctx = new PrioContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, css3Parser.RULE_prio);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 582;
        this.match(css3Parser.Important);
        this.state = 583;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_value;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.any = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnyContext);
    } else {
        return this.getTypedRuleContext(AnyContext,i);
    }
};

ValueContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

ValueContext.prototype.atKeyword = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AtKeywordContext);
    } else {
        return this.getTypedRuleContext(AtKeywordContext,i);
    }
};

ValueContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

ValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterValue(this);
	}
};

ValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitValue(this);
	}
};

ValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.ValueContext = ValueContext;

css3Parser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, css3Parser.RULE_value);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 590; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 590;
        		this._errHandler.sync(this);
        		switch(this._input.LA(1)) {
        		case css3Parser.T__1:
        		case css3Parser.T__2:
        		case css3Parser.T__9:
        		case css3Parser.Includes:
        		case css3Parser.DashMatch:
        		case css3Parser.Hash:
        		case css3Parser.Percentage:
        		case css3Parser.Uri:
        		case css3Parser.UnicodeRange:
        		case css3Parser.MediaOnly:
        		case css3Parser.Not:
        		case css3Parser.And:
        		case css3Parser.Dimension:
        		case css3Parser.UnknownDimension:
        		case css3Parser.Plus:
        		case css3Parser.Minus:
        		case css3Parser.Number:
        		case css3Parser.String:
        		case css3Parser.Or:
        		case css3Parser.From:
        		case css3Parser.To:
        		case css3Parser.Ident:
        		case css3Parser.Function:
        		    this.state = 585;
        		    this.any();
        		    break;
        		case css3Parser.T__4:
        		    this.state = 586;
        		    this.block();
        		    break;
        		case css3Parser.T__14:
        		    this.state = 587;
        		    this.atKeyword();
        		    this.state = 588;
        		    this.ws();
        		    break;
        		default:
        		    throw new antlr4.error.NoViableAltException(this);
        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 592; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,56, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TermContext);
    } else {
        return this.getTypedRuleContext(TermContext,i);
    }
};

ExprContext.prototype.operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OperatorContext);
    } else {
        return this.getTypedRuleContext(OperatorContext,i);
    }
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitExpr(this);
	}
};

ExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.ExprContext = ExprContext;

css3Parser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, css3Parser.RULE_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.term();
        this.state = 601;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 596;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (css3Parser.T__10 - 11)) | (1 << (css3Parser.T__12 - 11)) | (1 << (css3Parser.Space - 11)) | (1 << (css3Parser.Comma - 11)))) !== 0)) {
                    this.state = 595;
                    this.operator();
                }

                this.state = 598;
                this.term(); 
            }
            this.state = 603;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_term;
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;


 
TermContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BadTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BadTermContext.prototype = Object.create(TermContext.prototype);
BadTermContext.prototype.constructor = BadTermContext;

css3Parser.BadTermContext = BadTermContext;

BadTermContext.prototype.dxImageTransform = function() {
    return this.getTypedRuleContext(DxImageTransformContext,0);
};
BadTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterBadTerm(this);
	}
};

BadTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitBadTerm(this);
	}
};

BadTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitBadTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function KnownTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

KnownTermContext.prototype = Object.create(TermContext.prototype);
KnownTermContext.prototype.constructor = KnownTermContext;

css3Parser.KnownTermContext = KnownTermContext;

KnownTermContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

KnownTermContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

KnownTermContext.prototype.percentage = function() {
    return this.getTypedRuleContext(PercentageContext,0);
};

KnownTermContext.prototype.dimension = function() {
    return this.getTypedRuleContext(DimensionContext,0);
};

KnownTermContext.prototype.String = function() {
    return this.getToken(css3Parser.String, 0);
};

KnownTermContext.prototype.UnicodeRange = function() {
    return this.getToken(css3Parser.UnicodeRange, 0);
};

KnownTermContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

KnownTermContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

KnownTermContext.prototype.Uri = function() {
    return this.getToken(css3Parser.Uri, 0);
};

KnownTermContext.prototype.hexcolor = function() {
    return this.getTypedRuleContext(HexcolorContext,0);
};

KnownTermContext.prototype.calc = function() {
    return this.getTypedRuleContext(CalcContext,0);
};

KnownTermContext.prototype.function = function() {
    return this.getTypedRuleContext(FunctionContext,0);
};
KnownTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterKnownTerm(this);
	}
};

KnownTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitKnownTerm(this);
	}
};

KnownTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitKnownTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnknownTermContext(parser, ctx) {
	TermContext.call(this, parser);
    TermContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnknownTermContext.prototype = Object.create(TermContext.prototype);
UnknownTermContext.prototype.constructor = UnknownTermContext;

css3Parser.UnknownTermContext = UnknownTermContext;

UnknownTermContext.prototype.unknownDimension = function() {
    return this.getTypedRuleContext(UnknownDimensionContext,0);
};

UnknownTermContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};
UnknownTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterUnknownTerm(this);
	}
};

UnknownTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitUnknownTerm(this);
	}
};

UnknownTermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitUnknownTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};



css3Parser.TermContext = TermContext;

css3Parser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, css3Parser.RULE_term);
    try {
        this.state = 630;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
        switch(la_) {
        case 1:
            localctx = new KnownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 604;
            this.number();
            this.state = 605;
            this.ws();
            break;

        case 2:
            localctx = new KnownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 607;
            this.percentage();
            this.state = 608;
            this.ws();
            break;

        case 3:
            localctx = new KnownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 610;
            this.dimension();
            this.state = 611;
            this.ws();
            break;

        case 4:
            localctx = new KnownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 613;
            this.match(css3Parser.String);
            this.state = 614;
            this.ws();
            break;

        case 5:
            localctx = new KnownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 615;
            this.match(css3Parser.UnicodeRange);
            this.state = 616;
            this.ws();
            break;

        case 6:
            localctx = new KnownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 617;
            this.ident();
            this.state = 618;
            this.ws();
            break;

        case 7:
            localctx = new KnownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 620;
            this.var();
            break;

        case 8:
            localctx = new KnownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 621;
            this.match(css3Parser.Uri);
            this.state = 622;
            this.ws();
            break;

        case 9:
            localctx = new KnownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 623;
            this.hexcolor();
            break;

        case 10:
            localctx = new KnownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 624;
            this.calc();
            break;

        case 11:
            localctx = new KnownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 625;
            this.function();
            break;

        case 12:
            localctx = new UnknownTermContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 626;
            this.unknownDimension();
            this.state = 627;
            this.ws();
            break;

        case 13:
            localctx = new BadTermContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 629;
            this.dxImageTransform();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_function;
    return this;
}

FunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionContext.prototype.constructor = FunctionContext;

FunctionContext.prototype.Function = function() {
    return this.getToken(css3Parser.Function, 0);
};

FunctionContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

FunctionContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

FunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterFunction(this);
	}
};

FunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitFunction(this);
	}
};

FunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.FunctionContext = FunctionContext;

css3Parser.prototype.function = function() {

    var localctx = new FunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, css3Parser.RULE_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 632;
        this.match(css3Parser.Function);
        this.state = 633;
        this.ws();
        this.state = 634;
        this.expr();
        this.state = 635;
        this.match(css3Parser.T__3);
        this.state = 636;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DxImageTransformContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_dxImageTransform;
    return this;
}

DxImageTransformContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DxImageTransformContext.prototype.constructor = DxImageTransformContext;

DxImageTransformContext.prototype.DxImageTransform = function() {
    return this.getToken(css3Parser.DxImageTransform, 0);
};

DxImageTransformContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

DxImageTransformContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

DxImageTransformContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterDxImageTransform(this);
	}
};

DxImageTransformContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitDxImageTransform(this);
	}
};

DxImageTransformContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitDxImageTransform(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.DxImageTransformContext = DxImageTransformContext;

css3Parser.prototype.dxImageTransform = function() {

    var localctx = new DxImageTransformContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, css3Parser.RULE_dxImageTransform);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 638;
        this.match(css3Parser.DxImageTransform);
        this.state = 639;
        this.ws();
        this.state = 640;
        this.expr();
        this.state = 641;
        this.match(css3Parser.T__3);
        this.state = 642;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HexcolorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_hexcolor;
    return this;
}

HexcolorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HexcolorContext.prototype.constructor = HexcolorContext;

HexcolorContext.prototype.Hash = function() {
    return this.getToken(css3Parser.Hash, 0);
};

HexcolorContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

HexcolorContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterHexcolor(this);
	}
};

HexcolorContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitHexcolor(this);
	}
};

HexcolorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitHexcolor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.HexcolorContext = HexcolorContext;

css3Parser.prototype.hexcolor = function() {

    var localctx = new HexcolorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, css3Parser.RULE_hexcolor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        this.match(css3Parser.Hash);
        this.state = 645;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;

NumberContext.prototype.Number = function() {
    return this.getToken(css3Parser.Number, 0);
};

NumberContext.prototype.Plus = function() {
    return this.getToken(css3Parser.Plus, 0);
};

NumberContext.prototype.Minus = function() {
    return this.getToken(css3Parser.Minus, 0);
};

NumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterNumber(this);
	}
};

NumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitNumber(this);
	}
};

NumberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitNumber(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.NumberContext = NumberContext;

css3Parser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, css3Parser.RULE_number);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 648;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===css3Parser.Plus || _la===css3Parser.Minus) {
            this.state = 647;
            _la = this._input.LA(1);
            if(!(_la===css3Parser.Plus || _la===css3Parser.Minus)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 650;
        this.match(css3Parser.Number);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PercentageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_percentage;
    return this;
}

PercentageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PercentageContext.prototype.constructor = PercentageContext;

PercentageContext.prototype.Percentage = function() {
    return this.getToken(css3Parser.Percentage, 0);
};

PercentageContext.prototype.Plus = function() {
    return this.getToken(css3Parser.Plus, 0);
};

PercentageContext.prototype.Minus = function() {
    return this.getToken(css3Parser.Minus, 0);
};

PercentageContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterPercentage(this);
	}
};

PercentageContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitPercentage(this);
	}
};

PercentageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitPercentage(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.PercentageContext = PercentageContext;

css3Parser.prototype.percentage = function() {

    var localctx = new PercentageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, css3Parser.RULE_percentage);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 653;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===css3Parser.Plus || _la===css3Parser.Minus) {
            this.state = 652;
            _la = this._input.LA(1);
            if(!(_la===css3Parser.Plus || _la===css3Parser.Minus)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 655;
        this.match(css3Parser.Percentage);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_dimension;
    return this;
}

DimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimensionContext.prototype.constructor = DimensionContext;

DimensionContext.prototype.Dimension = function() {
    return this.getToken(css3Parser.Dimension, 0);
};

DimensionContext.prototype.Plus = function() {
    return this.getToken(css3Parser.Plus, 0);
};

DimensionContext.prototype.Minus = function() {
    return this.getToken(css3Parser.Minus, 0);
};

DimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterDimension(this);
	}
};

DimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitDimension(this);
	}
};

DimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitDimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.DimensionContext = DimensionContext;

css3Parser.prototype.dimension = function() {

    var localctx = new DimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, css3Parser.RULE_dimension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 658;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===css3Parser.Plus || _la===css3Parser.Minus) {
            this.state = 657;
            _la = this._input.LA(1);
            if(!(_la===css3Parser.Plus || _la===css3Parser.Minus)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 660;
        this.match(css3Parser.Dimension);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnknownDimensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_unknownDimension;
    return this;
}

UnknownDimensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnknownDimensionContext.prototype.constructor = UnknownDimensionContext;

UnknownDimensionContext.prototype.UnknownDimension = function() {
    return this.getToken(css3Parser.UnknownDimension, 0);
};

UnknownDimensionContext.prototype.Plus = function() {
    return this.getToken(css3Parser.Plus, 0);
};

UnknownDimensionContext.prototype.Minus = function() {
    return this.getToken(css3Parser.Minus, 0);
};

UnknownDimensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterUnknownDimension(this);
	}
};

UnknownDimensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitUnknownDimension(this);
	}
};

UnknownDimensionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitUnknownDimension(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.UnknownDimensionContext = UnknownDimensionContext;

css3Parser.prototype.unknownDimension = function() {

    var localctx = new UnknownDimensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, css3Parser.RULE_unknownDimension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 663;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===css3Parser.Plus || _la===css3Parser.Minus) {
            this.state = 662;
            _la = this._input.LA(1);
            if(!(_la===css3Parser.Plus || _la===css3Parser.Minus)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 665;
        this.match(css3Parser.UnknownDimension);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_any;
    return this;
}

AnyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnyContext.prototype.constructor = AnyContext;

AnyContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnyContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

AnyContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

AnyContext.prototype.percentage = function() {
    return this.getTypedRuleContext(PercentageContext,0);
};

AnyContext.prototype.dimension = function() {
    return this.getTypedRuleContext(DimensionContext,0);
};

AnyContext.prototype.unknownDimension = function() {
    return this.getTypedRuleContext(UnknownDimensionContext,0);
};

AnyContext.prototype.String = function() {
    return this.getToken(css3Parser.String, 0);
};

AnyContext.prototype.Uri = function() {
    return this.getToken(css3Parser.Uri, 0);
};

AnyContext.prototype.Hash = function() {
    return this.getToken(css3Parser.Hash, 0);
};

AnyContext.prototype.UnicodeRange = function() {
    return this.getToken(css3Parser.UnicodeRange, 0);
};

AnyContext.prototype.Includes = function() {
    return this.getToken(css3Parser.Includes, 0);
};

AnyContext.prototype.DashMatch = function() {
    return this.getToken(css3Parser.DashMatch, 0);
};

AnyContext.prototype.Function = function() {
    return this.getToken(css3Parser.Function, 0);
};

AnyContext.prototype.any = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnyContext);
    } else {
        return this.getTypedRuleContext(AnyContext,i);
    }
};

AnyContext.prototype.unused = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnusedContext);
    } else {
        return this.getTypedRuleContext(UnusedContext,i);
    }
};

AnyContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterAny(this);
	}
};

AnyContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitAny(this);
	}
};

AnyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitAny(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.AnyContext = AnyContext;

css3Parser.prototype.any = function() {

    var localctx = new AnyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, css3Parser.RULE_any);
    var _la = 0; // Token type
    try {
        this.state = 732;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 667;
            this.ident();
            this.state = 668;
            this.ws();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 670;
            this.number();
            this.state = 671;
            this.ws();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 673;
            this.percentage();
            this.state = 674;
            this.ws();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 676;
            this.dimension();
            this.state = 677;
            this.ws();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 679;
            this.unknownDimension();
            this.state = 680;
            this.ws();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 682;
            this.match(css3Parser.String);
            this.state = 683;
            this.ws();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 684;
            this.match(css3Parser.Uri);
            this.state = 685;
            this.ws();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 686;
            this.match(css3Parser.Hash);
            this.state = 687;
            this.ws();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 688;
            this.match(css3Parser.UnicodeRange);
            this.state = 689;
            this.ws();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 690;
            this.match(css3Parser.Includes);
            this.state = 691;
            this.ws();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 692;
            this.match(css3Parser.DashMatch);
            this.state = 693;
            this.ws();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 694;
            this.match(css3Parser.T__2);
            this.state = 695;
            this.ws();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 696;
            this.match(css3Parser.Function);
            this.state = 697;
            this.ws();
            this.state = 702;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function - 32)))) !== 0)) {
                this.state = 700;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case css3Parser.T__1:
                case css3Parser.T__2:
                case css3Parser.T__9:
                case css3Parser.Includes:
                case css3Parser.DashMatch:
                case css3Parser.Hash:
                case css3Parser.Percentage:
                case css3Parser.Uri:
                case css3Parser.UnicodeRange:
                case css3Parser.MediaOnly:
                case css3Parser.Not:
                case css3Parser.And:
                case css3Parser.Dimension:
                case css3Parser.UnknownDimension:
                case css3Parser.Plus:
                case css3Parser.Minus:
                case css3Parser.Number:
                case css3Parser.String:
                case css3Parser.Or:
                case css3Parser.From:
                case css3Parser.To:
                case css3Parser.Ident:
                case css3Parser.Function:
                    this.state = 698;
                    this.any();
                    break;
                case css3Parser.T__0:
                case css3Parser.T__4:
                case css3Parser.T__14:
                case css3Parser.Cdo:
                case css3Parser.Cdc:
                    this.state = 699;
                    this.unused();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 704;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 705;
            this.match(css3Parser.T__3);
            this.state = 706;
            this.ws();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 708;
            this.match(css3Parser.T__1);
            this.state = 709;
            this.ws();
            this.state = 714;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function - 32)))) !== 0)) {
                this.state = 712;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case css3Parser.T__1:
                case css3Parser.T__2:
                case css3Parser.T__9:
                case css3Parser.Includes:
                case css3Parser.DashMatch:
                case css3Parser.Hash:
                case css3Parser.Percentage:
                case css3Parser.Uri:
                case css3Parser.UnicodeRange:
                case css3Parser.MediaOnly:
                case css3Parser.Not:
                case css3Parser.And:
                case css3Parser.Dimension:
                case css3Parser.UnknownDimension:
                case css3Parser.Plus:
                case css3Parser.Minus:
                case css3Parser.Number:
                case css3Parser.String:
                case css3Parser.Or:
                case css3Parser.From:
                case css3Parser.To:
                case css3Parser.Ident:
                case css3Parser.Function:
                    this.state = 710;
                    this.any();
                    break;
                case css3Parser.T__0:
                case css3Parser.T__4:
                case css3Parser.T__14:
                case css3Parser.Cdo:
                case css3Parser.Cdc:
                    this.state = 711;
                    this.unused();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 716;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 717;
            this.match(css3Parser.T__3);
            this.state = 718;
            this.ws();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 720;
            this.match(css3Parser.T__9);
            this.state = 721;
            this.ws();
            this.state = 726;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function - 32)))) !== 0)) {
                this.state = 724;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case css3Parser.T__1:
                case css3Parser.T__2:
                case css3Parser.T__9:
                case css3Parser.Includes:
                case css3Parser.DashMatch:
                case css3Parser.Hash:
                case css3Parser.Percentage:
                case css3Parser.Uri:
                case css3Parser.UnicodeRange:
                case css3Parser.MediaOnly:
                case css3Parser.Not:
                case css3Parser.And:
                case css3Parser.Dimension:
                case css3Parser.UnknownDimension:
                case css3Parser.Plus:
                case css3Parser.Minus:
                case css3Parser.Number:
                case css3Parser.String:
                case css3Parser.Or:
                case css3Parser.From:
                case css3Parser.To:
                case css3Parser.Ident:
                case css3Parser.Function:
                    this.state = 722;
                    this.any();
                    break;
                case css3Parser.T__0:
                case css3Parser.T__4:
                case css3Parser.T__14:
                case css3Parser.Cdo:
                case css3Parser.Cdc:
                    this.state = 723;
                    this.unused();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 728;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 729;
            this.match(css3Parser.T__11);
            this.state = 730;
            this.ws();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_atRule;
    return this;
}

AtRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtRuleContext.prototype.constructor = AtRuleContext;


 
AtRuleContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UnknownAtRuleContext(parser, ctx) {
	AtRuleContext.call(this, parser);
    AtRuleContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnknownAtRuleContext.prototype = Object.create(AtRuleContext.prototype);
UnknownAtRuleContext.prototype.constructor = UnknownAtRuleContext;

css3Parser.UnknownAtRuleContext = UnknownAtRuleContext;

UnknownAtRuleContext.prototype.atKeyword = function() {
    return this.getTypedRuleContext(AtKeywordContext,0);
};

UnknownAtRuleContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

UnknownAtRuleContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

UnknownAtRuleContext.prototype.any = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnyContext);
    } else {
        return this.getTypedRuleContext(AnyContext,i);
    }
};
UnknownAtRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterUnknownAtRule(this);
	}
};

UnknownAtRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitUnknownAtRule(this);
	}
};

UnknownAtRuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitUnknownAtRule(this);
    } else {
        return visitor.visitChildren(this);
    }
};



css3Parser.AtRuleContext = AtRuleContext;

css3Parser.prototype.atRule = function() {

    var localctx = new AtRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, css3Parser.RULE_atRule);
    var _la = 0; // Token type
    try {
        localctx = new UnknownAtRuleContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 734;
        this.atKeyword();
        this.state = 735;
        this.ws();
        this.state = 739;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__9) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function - 32)))) !== 0)) {
            this.state = 736;
            this.any();
            this.state = 741;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 745;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case css3Parser.T__4:
            this.state = 742;
            this.block();
            break;
        case css3Parser.T__0:
            this.state = 743;
            this.match(css3Parser.T__0);
            this.state = 744;
            this.ws();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtKeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_atKeyword;
    return this;
}

AtKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtKeywordContext.prototype.constructor = AtKeywordContext;

AtKeywordContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AtKeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterAtKeyword(this);
	}
};

AtKeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitAtKeyword(this);
	}
};

AtKeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitAtKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.AtKeywordContext = AtKeywordContext;

css3Parser.prototype.atKeyword = function() {

    var localctx = new AtKeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, css3Parser.RULE_atKeyword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 747;
        this.match(css3Parser.T__14);
        this.state = 748;
        this.ident();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnusedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_unused;
    return this;
}

UnusedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnusedContext.prototype.constructor = UnusedContext;

UnusedContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

UnusedContext.prototype.atKeyword = function() {
    return this.getTypedRuleContext(AtKeywordContext,0);
};

UnusedContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

UnusedContext.prototype.Cdo = function() {
    return this.getToken(css3Parser.Cdo, 0);
};

UnusedContext.prototype.Cdc = function() {
    return this.getToken(css3Parser.Cdc, 0);
};

UnusedContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterUnused(this);
	}
};

UnusedContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitUnused(this);
	}
};

UnusedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitUnused(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.UnusedContext = UnusedContext;

css3Parser.prototype.unused = function() {

    var localctx = new UnusedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, css3Parser.RULE_unused);
    try {
        this.state = 760;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case css3Parser.T__4:
            this.enterOuterAlt(localctx, 1);
            this.state = 750;
            this.block();
            break;
        case css3Parser.T__14:
            this.enterOuterAlt(localctx, 2);
            this.state = 751;
            this.atKeyword();
            this.state = 752;
            this.ws();
            break;
        case css3Parser.T__0:
            this.enterOuterAlt(localctx, 3);
            this.state = 754;
            this.match(css3Parser.T__0);
            this.state = 755;
            this.ws();
            break;
        case css3Parser.Cdo:
            this.enterOuterAlt(localctx, 4);
            this.state = 756;
            this.match(css3Parser.Cdo);
            this.state = 757;
            this.ws();
            break;
        case css3Parser.Cdc:
            this.enterOuterAlt(localctx, 5);
            this.state = 758;
            this.match(css3Parser.Cdc);
            this.state = 759;
            this.ws();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

BlockContext.prototype.declarationList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationListContext);
    } else {
        return this.getTypedRuleContext(DeclarationListContext,i);
    }
};

BlockContext.prototype.nestedStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NestedStatementContext);
    } else {
        return this.getTypedRuleContext(NestedStatementContext,i);
    }
};

BlockContext.prototype.any = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnyContext);
    } else {
        return this.getTypedRuleContext(AnyContext,i);
    }
};

BlockContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

BlockContext.prototype.atKeyword = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AtKeywordContext);
    } else {
        return this.getTypedRuleContext(AtKeywordContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.BlockContext = BlockContext;

css3Parser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, css3Parser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 762;
        this.match(css3Parser.T__4);
        this.state = 763;
        this.ws();
        this.state = 775;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__6) | (1 << css3Parser.T__7) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.T__13) | (1 << css3Parser.T__14) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Page) | (1 << css3Parser.Media) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.PseudoNot - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String - 32)) | (1 << (css3Parser.FontFace - 32)) | (1 << (css3Parser.Supports - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.Keyframes - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Viewport - 32)) | (1 << (css3Parser.CounterStyle - 32)) | (1 << (css3Parser.FontFeatureValues - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function - 32)))) !== 0)) {
            this.state = 773;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
            switch(la_) {
            case 1:
                this.state = 764;
                this.declarationList();
                break;

            case 2:
                this.state = 765;
                this.nestedStatement();
                break;

            case 3:
                this.state = 766;
                this.any();
                break;

            case 4:
                this.state = 767;
                this.block();
                break;

            case 5:
                this.state = 768;
                this.atKeyword();
                this.state = 769;
                this.ws();
                break;

            case 6:
                this.state = 771;
                this.match(css3Parser.T__0);
                this.state = 772;
                this.ws();
                break;

            }
            this.state = 777;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 778;
        this.match(css3Parser.T__5);
        this.state = 779;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NestedStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_nestedStatement;
    return this;
}

NestedStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NestedStatementContext.prototype.constructor = NestedStatementContext;

NestedStatementContext.prototype.ruleset = function() {
    return this.getTypedRuleContext(RulesetContext,0);
};

NestedStatementContext.prototype.media = function() {
    return this.getTypedRuleContext(MediaContext,0);
};

NestedStatementContext.prototype.page = function() {
    return this.getTypedRuleContext(PageContext,0);
};

NestedStatementContext.prototype.fontFaceRule = function() {
    return this.getTypedRuleContext(FontFaceRuleContext,0);
};

NestedStatementContext.prototype.keyframesRule = function() {
    return this.getTypedRuleContext(KeyframesRuleContext,0);
};

NestedStatementContext.prototype.supportsRule = function() {
    return this.getTypedRuleContext(SupportsRuleContext,0);
};

NestedStatementContext.prototype.viewport = function() {
    return this.getTypedRuleContext(ViewportContext,0);
};

NestedStatementContext.prototype.counterStyle = function() {
    return this.getTypedRuleContext(CounterStyleContext,0);
};

NestedStatementContext.prototype.fontFeatureValuesRule = function() {
    return this.getTypedRuleContext(FontFeatureValuesRuleContext,0);
};

NestedStatementContext.prototype.atRule = function() {
    return this.getTypedRuleContext(AtRuleContext,0);
};

NestedStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterNestedStatement(this);
	}
};

NestedStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitNestedStatement(this);
	}
};

NestedStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitNestedStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.NestedStatementContext = NestedStatementContext;

css3Parser.prototype.nestedStatement = function() {

    var localctx = new NestedStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, css3Parser.RULE_nestedStatement);
    try {
        this.state = 791;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case css3Parser.T__1:
        case css3Parser.T__2:
        case css3Parser.T__4:
        case css3Parser.T__6:
        case css3Parser.T__7:
        case css3Parser.T__8:
        case css3Parser.T__9:
        case css3Parser.Includes:
        case css3Parser.DashMatch:
        case css3Parser.Hash:
        case css3Parser.Percentage:
        case css3Parser.Uri:
        case css3Parser.UnicodeRange:
        case css3Parser.MediaOnly:
        case css3Parser.Not:
        case css3Parser.And:
        case css3Parser.Dimension:
        case css3Parser.UnknownDimension:
        case css3Parser.Plus:
        case css3Parser.Minus:
        case css3Parser.PseudoNot:
        case css3Parser.Number:
        case css3Parser.String:
        case css3Parser.Or:
        case css3Parser.From:
        case css3Parser.To:
        case css3Parser.Ident:
        case css3Parser.Function:
            this.enterOuterAlt(localctx, 1);
            this.state = 781;
            this.ruleset();
            break;
        case css3Parser.Media:
            this.enterOuterAlt(localctx, 2);
            this.state = 782;
            this.media();
            break;
        case css3Parser.Page:
            this.enterOuterAlt(localctx, 3);
            this.state = 783;
            this.page();
            break;
        case css3Parser.FontFace:
            this.enterOuterAlt(localctx, 4);
            this.state = 784;
            this.fontFaceRule();
            break;
        case css3Parser.Keyframes:
            this.enterOuterAlt(localctx, 5);
            this.state = 785;
            this.keyframesRule();
            break;
        case css3Parser.Supports:
            this.enterOuterAlt(localctx, 6);
            this.state = 786;
            this.supportsRule();
            break;
        case css3Parser.Viewport:
            this.enterOuterAlt(localctx, 7);
            this.state = 787;
            this.viewport();
            break;
        case css3Parser.CounterStyle:
            this.enterOuterAlt(localctx, 8);
            this.state = 788;
            this.counterStyle();
            break;
        case css3Parser.FontFeatureValues:
            this.enterOuterAlt(localctx, 9);
            this.state = 789;
            this.fontFeatureValuesRule();
            break;
        case css3Parser.T__14:
            this.enterOuterAlt(localctx, 10);
            this.state = 790;
            this.atRule();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupRuleBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_groupRuleBody;
    return this;
}

GroupRuleBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupRuleBodyContext.prototype.constructor = GroupRuleBodyContext;

GroupRuleBodyContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

GroupRuleBodyContext.prototype.nestedStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NestedStatementContext);
    } else {
        return this.getTypedRuleContext(NestedStatementContext,i);
    }
};

GroupRuleBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterGroupRuleBody(this);
	}
};

GroupRuleBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitGroupRuleBody(this);
	}
};

GroupRuleBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitGroupRuleBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.GroupRuleBodyContext = GroupRuleBodyContext;

css3Parser.prototype.groupRuleBody = function() {

    var localctx = new GroupRuleBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, css3Parser.RULE_groupRuleBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 793;
        this.match(css3Parser.T__4);
        this.state = 794;
        this.ws();
        this.state = 798;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__6) | (1 << css3Parser.T__7) | (1 << css3Parser.T__8) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Page) | (1 << css3Parser.Media) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.PseudoNot - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String - 32)) | (1 << (css3Parser.FontFace - 32)) | (1 << (css3Parser.Supports - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.Keyframes - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Viewport - 32)) | (1 << (css3Parser.CounterStyle - 32)) | (1 << (css3Parser.FontFeatureValues - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function - 32)))) !== 0)) {
            this.state = 795;
            this.nestedStatement();
            this.state = 800;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 801;
        this.match(css3Parser.T__5);
        this.state = 802;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SupportsRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_supportsRule;
    return this;
}

SupportsRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SupportsRuleContext.prototype.constructor = SupportsRuleContext;

SupportsRuleContext.prototype.Supports = function() {
    return this.getToken(css3Parser.Supports, 0);
};

SupportsRuleContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

SupportsRuleContext.prototype.supportsCondition = function() {
    return this.getTypedRuleContext(SupportsConditionContext,0);
};

SupportsRuleContext.prototype.groupRuleBody = function() {
    return this.getTypedRuleContext(GroupRuleBodyContext,0);
};

SupportsRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterSupportsRule(this);
	}
};

SupportsRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitSupportsRule(this);
	}
};

SupportsRuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitSupportsRule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.SupportsRuleContext = SupportsRuleContext;

css3Parser.prototype.supportsRule = function() {

    var localctx = new SupportsRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, css3Parser.RULE_supportsRule);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 804;
        this.match(css3Parser.Supports);
        this.state = 805;
        this.ws();
        this.state = 806;
        this.supportsCondition();
        this.state = 807;
        this.ws();
        this.state = 808;
        this.groupRuleBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SupportsConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_supportsCondition;
    return this;
}

SupportsConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SupportsConditionContext.prototype.constructor = SupportsConditionContext;

SupportsConditionContext.prototype.supportsNegation = function() {
    return this.getTypedRuleContext(SupportsNegationContext,0);
};

SupportsConditionContext.prototype.supportsConjunction = function() {
    return this.getTypedRuleContext(SupportsConjunctionContext,0);
};

SupportsConditionContext.prototype.supportsDisjunction = function() {
    return this.getTypedRuleContext(SupportsDisjunctionContext,0);
};

SupportsConditionContext.prototype.supportsConditionInParens = function() {
    return this.getTypedRuleContext(SupportsConditionInParensContext,0);
};

SupportsConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterSupportsCondition(this);
	}
};

SupportsConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitSupportsCondition(this);
	}
};

SupportsConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitSupportsCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.SupportsConditionContext = SupportsConditionContext;

css3Parser.prototype.supportsCondition = function() {

    var localctx = new SupportsConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, css3Parser.RULE_supportsCondition);
    try {
        this.state = 814;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 810;
            this.supportsNegation();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 811;
            this.supportsConjunction();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 812;
            this.supportsDisjunction();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 813;
            this.supportsConditionInParens();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SupportsConditionInParensContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_supportsConditionInParens;
    return this;
}

SupportsConditionInParensContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SupportsConditionInParensContext.prototype.constructor = SupportsConditionInParensContext;

SupportsConditionInParensContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

SupportsConditionInParensContext.prototype.supportsCondition = function() {
    return this.getTypedRuleContext(SupportsConditionContext,0);
};

SupportsConditionInParensContext.prototype.supportsDeclarationCondition = function() {
    return this.getTypedRuleContext(SupportsDeclarationConditionContext,0);
};

SupportsConditionInParensContext.prototype.generalEnclosed = function() {
    return this.getTypedRuleContext(GeneralEnclosedContext,0);
};

SupportsConditionInParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterSupportsConditionInParens(this);
	}
};

SupportsConditionInParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitSupportsConditionInParens(this);
	}
};

SupportsConditionInParensContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitSupportsConditionInParens(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.SupportsConditionInParensContext = SupportsConditionInParensContext;

css3Parser.prototype.supportsConditionInParens = function() {

    var localctx = new SupportsConditionInParensContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, css3Parser.RULE_supportsConditionInParens);
    try {
        this.state = 824;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 816;
            this.match(css3Parser.T__1);
            this.state = 817;
            this.ws();
            this.state = 818;
            this.supportsCondition();
            this.state = 819;
            this.ws();
            this.state = 820;
            this.match(css3Parser.T__3);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 822;
            this.supportsDeclarationCondition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 823;
            this.generalEnclosed();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SupportsNegationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_supportsNegation;
    return this;
}

SupportsNegationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SupportsNegationContext.prototype.constructor = SupportsNegationContext;

SupportsNegationContext.prototype.Not = function() {
    return this.getToken(css3Parser.Not, 0);
};

SupportsNegationContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

SupportsNegationContext.prototype.Space = function() {
    return this.getToken(css3Parser.Space, 0);
};

SupportsNegationContext.prototype.supportsConditionInParens = function() {
    return this.getTypedRuleContext(SupportsConditionInParensContext,0);
};

SupportsNegationContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterSupportsNegation(this);
	}
};

SupportsNegationContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitSupportsNegation(this);
	}
};

SupportsNegationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitSupportsNegation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.SupportsNegationContext = SupportsNegationContext;

css3Parser.prototype.supportsNegation = function() {

    var localctx = new SupportsNegationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, css3Parser.RULE_supportsNegation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 826;
        this.match(css3Parser.Not);
        this.state = 827;
        this.ws();
        this.state = 828;
        this.match(css3Parser.Space);
        this.state = 829;
        this.ws();
        this.state = 830;
        this.supportsConditionInParens();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SupportsConjunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_supportsConjunction;
    return this;
}

SupportsConjunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SupportsConjunctionContext.prototype.constructor = SupportsConjunctionContext;

SupportsConjunctionContext.prototype.supportsConditionInParens = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SupportsConditionInParensContext);
    } else {
        return this.getTypedRuleContext(SupportsConditionInParensContext,i);
    }
};

SupportsConjunctionContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

SupportsConjunctionContext.prototype.Space = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Space);
    } else {
        return this.getToken(css3Parser.Space, i);
    }
};


SupportsConjunctionContext.prototype.And = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.And);
    } else {
        return this.getToken(css3Parser.And, i);
    }
};


SupportsConjunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterSupportsConjunction(this);
	}
};

SupportsConjunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitSupportsConjunction(this);
	}
};

SupportsConjunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitSupportsConjunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.SupportsConjunctionContext = SupportsConjunctionContext;

css3Parser.prototype.supportsConjunction = function() {

    var localctx = new SupportsConjunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, css3Parser.RULE_supportsConjunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.supportsConditionInParens();
        this.state = 842; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 833;
        		this.ws();
        		this.state = 834;
        		this.match(css3Parser.Space);
        		this.state = 835;
        		this.ws();
        		this.state = 836;
        		this.match(css3Parser.And);
        		this.state = 837;
        		this.ws();
        		this.state = 838;
        		this.match(css3Parser.Space);
        		this.state = 839;
        		this.ws();
        		this.state = 840;
        		this.supportsConditionInParens();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 844; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,80, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SupportsDisjunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_supportsDisjunction;
    return this;
}

SupportsDisjunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SupportsDisjunctionContext.prototype.constructor = SupportsDisjunctionContext;

SupportsDisjunctionContext.prototype.supportsConditionInParens = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SupportsConditionInParensContext);
    } else {
        return this.getTypedRuleContext(SupportsConditionInParensContext,i);
    }
};

SupportsDisjunctionContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

SupportsDisjunctionContext.prototype.Space = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Space);
    } else {
        return this.getToken(css3Parser.Space, i);
    }
};


SupportsDisjunctionContext.prototype.Or = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Or);
    } else {
        return this.getToken(css3Parser.Or, i);
    }
};


SupportsDisjunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterSupportsDisjunction(this);
	}
};

SupportsDisjunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitSupportsDisjunction(this);
	}
};

SupportsDisjunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitSupportsDisjunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.SupportsDisjunctionContext = SupportsDisjunctionContext;

css3Parser.prototype.supportsDisjunction = function() {

    var localctx = new SupportsDisjunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, css3Parser.RULE_supportsDisjunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 846;
        this.supportsConditionInParens();
        this.state = 856; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 847;
        		this.ws();
        		this.state = 848;
        		this.match(css3Parser.Space);
        		this.state = 849;
        		this.ws();
        		this.state = 850;
        		this.match(css3Parser.Or);
        		this.state = 851;
        		this.ws();
        		this.state = 852;
        		this.match(css3Parser.Space);
        		this.state = 853;
        		this.ws();
        		this.state = 854;
        		this.supportsConditionInParens();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 858; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,81, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SupportsDeclarationConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_supportsDeclarationCondition;
    return this;
}

SupportsDeclarationConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SupportsDeclarationConditionContext.prototype.constructor = SupportsDeclarationConditionContext;

SupportsDeclarationConditionContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

SupportsDeclarationConditionContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

SupportsDeclarationConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterSupportsDeclarationCondition(this);
	}
};

SupportsDeclarationConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitSupportsDeclarationCondition(this);
	}
};

SupportsDeclarationConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitSupportsDeclarationCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.SupportsDeclarationConditionContext = SupportsDeclarationConditionContext;

css3Parser.prototype.supportsDeclarationCondition = function() {

    var localctx = new SupportsDeclarationConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, css3Parser.RULE_supportsDeclarationCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 860;
        this.match(css3Parser.T__1);
        this.state = 861;
        this.ws();
        this.state = 862;
        this.declaration();
        this.state = 863;
        this.match(css3Parser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneralEnclosedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_generalEnclosed;
    return this;
}

GeneralEnclosedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneralEnclosedContext.prototype.constructor = GeneralEnclosedContext;

GeneralEnclosedContext.prototype.Function = function() {
    return this.getToken(css3Parser.Function, 0);
};

GeneralEnclosedContext.prototype.any = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnyContext);
    } else {
        return this.getTypedRuleContext(AnyContext,i);
    }
};

GeneralEnclosedContext.prototype.unused = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnusedContext);
    } else {
        return this.getTypedRuleContext(UnusedContext,i);
    }
};

GeneralEnclosedContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterGeneralEnclosed(this);
	}
};

GeneralEnclosedContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitGeneralEnclosed(this);
	}
};

GeneralEnclosedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitGeneralEnclosed(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.GeneralEnclosedContext = GeneralEnclosedContext;

css3Parser.prototype.generalEnclosed = function() {

    var localctx = new GeneralEnclosedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, css3Parser.RULE_generalEnclosed);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 865;
        _la = this._input.LA(1);
        if(!(_la===css3Parser.T__1 || _la===css3Parser.Function)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 870;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__1) | (1 << css3Parser.T__2) | (1 << css3Parser.T__4) | (1 << css3Parser.T__9) | (1 << css3Parser.T__14) | (1 << css3Parser.Cdo) | (1 << css3Parser.Cdc) | (1 << css3Parser.Includes) | (1 << css3Parser.DashMatch) | (1 << css3Parser.Hash) | (1 << css3Parser.Percentage) | (1 << css3Parser.Uri) | (1 << css3Parser.UnicodeRange))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Dimension - 32)) | (1 << (css3Parser.UnknownDimension - 32)) | (1 << (css3Parser.Plus - 32)) | (1 << (css3Parser.Minus - 32)) | (1 << (css3Parser.Number - 32)) | (1 << (css3Parser.String - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)) | (1 << (css3Parser.Function - 32)))) !== 0)) {
            this.state = 868;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case css3Parser.T__1:
            case css3Parser.T__2:
            case css3Parser.T__9:
            case css3Parser.Includes:
            case css3Parser.DashMatch:
            case css3Parser.Hash:
            case css3Parser.Percentage:
            case css3Parser.Uri:
            case css3Parser.UnicodeRange:
            case css3Parser.MediaOnly:
            case css3Parser.Not:
            case css3Parser.And:
            case css3Parser.Dimension:
            case css3Parser.UnknownDimension:
            case css3Parser.Plus:
            case css3Parser.Minus:
            case css3Parser.Number:
            case css3Parser.String:
            case css3Parser.Or:
            case css3Parser.From:
            case css3Parser.To:
            case css3Parser.Ident:
            case css3Parser.Function:
                this.state = 866;
                this.any();
                break;
            case css3Parser.T__0:
            case css3Parser.T__4:
            case css3Parser.T__14:
            case css3Parser.Cdo:
            case css3Parser.Cdc:
                this.state = 867;
                this.unused();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 872;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 873;
        this.match(css3Parser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_var;
    return this;
}

VarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarContext.prototype.constructor = VarContext;

VarContext.prototype.Var = function() {
    return this.getToken(css3Parser.Var, 0);
};

VarContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

VarContext.prototype.Variable = function() {
    return this.getToken(css3Parser.Variable, 0);
};

VarContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterVar(this);
	}
};

VarContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitVar(this);
	}
};

VarContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitVar(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.VarContext = VarContext;

css3Parser.prototype.var = function() {

    var localctx = new VarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, css3Parser.RULE_var);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 875;
        this.match(css3Parser.Var);
        this.state = 876;
        this.ws();
        this.state = 877;
        this.match(css3Parser.Variable);
        this.state = 878;
        this.ws();
        this.state = 879;
        this.match(css3Parser.T__3);
        this.state = 880;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CalcContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_calc;
    return this;
}

CalcContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalcContext.prototype.constructor = CalcContext;

CalcContext.prototype.Calc = function() {
    return this.getToken(css3Parser.Calc, 0);
};

CalcContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

CalcContext.prototype.calcSum = function() {
    return this.getTypedRuleContext(CalcSumContext,0);
};

CalcContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterCalc(this);
	}
};

CalcContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitCalc(this);
	}
};

CalcContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitCalc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.CalcContext = CalcContext;

css3Parser.prototype.calc = function() {

    var localctx = new CalcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, css3Parser.RULE_calc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 882;
        this.match(css3Parser.Calc);
        this.state = 883;
        this.ws();
        this.state = 884;
        this.calcSum();
        this.state = 885;
        this.match(css3Parser.T__3);
        this.state = 886;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CalcSumContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_calcSum;
    return this;
}

CalcSumContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalcSumContext.prototype.constructor = CalcSumContext;

CalcSumContext.prototype.calcProduct = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CalcProductContext);
    } else {
        return this.getTypedRuleContext(CalcProductContext,i);
    }
};

CalcSumContext.prototype.Space = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Space);
    } else {
        return this.getToken(css3Parser.Space, i);
    }
};


CalcSumContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

CalcSumContext.prototype.Plus = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Plus);
    } else {
        return this.getToken(css3Parser.Plus, i);
    }
};


CalcSumContext.prototype.Minus = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Minus);
    } else {
        return this.getToken(css3Parser.Minus, i);
    }
};


CalcSumContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterCalcSum(this);
	}
};

CalcSumContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitCalcSum(this);
	}
};

CalcSumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitCalcSum(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.CalcSumContext = CalcSumContext;

css3Parser.prototype.calcSum = function() {

    var localctx = new CalcSumContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, css3Parser.RULE_calcSum);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 888;
        this.calcProduct();
        this.state = 899;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===css3Parser.Space) {
            this.state = 889;
            this.match(css3Parser.Space);
            this.state = 890;
            this.ws();
            this.state = 891;
            _la = this._input.LA(1);
            if(!(_la===css3Parser.Plus || _la===css3Parser.Minus)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 892;
            this.ws();
            this.state = 893;
            this.match(css3Parser.Space);
            this.state = 894;
            this.ws();
            this.state = 895;
            this.calcProduct();
            this.state = 901;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CalcProductContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_calcProduct;
    return this;
}

CalcProductContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalcProductContext.prototype.constructor = CalcProductContext;

CalcProductContext.prototype.calcValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CalcValueContext);
    } else {
        return this.getTypedRuleContext(CalcValueContext,i);
    }
};

CalcProductContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

CalcProductContext.prototype.number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumberContext);
    } else {
        return this.getTypedRuleContext(NumberContext,i);
    }
};

CalcProductContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterCalcProduct(this);
	}
};

CalcProductContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitCalcProduct(this);
	}
};

CalcProductContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitCalcProduct(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.CalcProductContext = CalcProductContext;

css3Parser.prototype.calcProduct = function() {

    var localctx = new CalcProductContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, css3Parser.RULE_calcProduct);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 902;
        this.calcValue();
        this.state = 914;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===css3Parser.T__6 || _la===css3Parser.T__12) {
            this.state = 912;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case css3Parser.T__6:
                this.state = 903;
                this.match(css3Parser.T__6);
                this.state = 904;
                this.ws();
                this.state = 905;
                this.calcValue();
                break;
            case css3Parser.T__12:
                this.state = 907;
                this.match(css3Parser.T__12);
                this.state = 908;
                this.ws();
                this.state = 909;
                this.number();
                this.state = 910;
                this.ws();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 916;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CalcValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_calcValue;
    return this;
}

CalcValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalcValueContext.prototype.constructor = CalcValueContext;

CalcValueContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

CalcValueContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

CalcValueContext.prototype.dimension = function() {
    return this.getTypedRuleContext(DimensionContext,0);
};

CalcValueContext.prototype.unknownDimension = function() {
    return this.getTypedRuleContext(UnknownDimensionContext,0);
};

CalcValueContext.prototype.percentage = function() {
    return this.getTypedRuleContext(PercentageContext,0);
};

CalcValueContext.prototype.calcSum = function() {
    return this.getTypedRuleContext(CalcSumContext,0);
};

CalcValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterCalcValue(this);
	}
};

CalcValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitCalcValue(this);
	}
};

CalcValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitCalcValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.CalcValueContext = CalcValueContext;

css3Parser.prototype.calcValue = function() {

    var localctx = new CalcValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, css3Parser.RULE_calcValue);
    try {
        this.state = 935;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 917;
            this.number();
            this.state = 918;
            this.ws();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 920;
            this.dimension();
            this.state = 921;
            this.ws();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 923;
            this.unknownDimension();
            this.state = 924;
            this.ws();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 926;
            this.percentage();
            this.state = 927;
            this.ws();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 929;
            this.match(css3Parser.T__1);
            this.state = 930;
            this.ws();
            this.state = 931;
            this.calcSum();
            this.state = 932;
            this.match(css3Parser.T__3);
            this.state = 933;
            this.ws();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FontFaceRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_fontFaceRule;
    return this;
}

FontFaceRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FontFaceRuleContext.prototype.constructor = FontFaceRuleContext;

FontFaceRuleContext.prototype.FontFace = function() {
    return this.getToken(css3Parser.FontFace, 0);
};

FontFaceRuleContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

FontFaceRuleContext.prototype.fontFaceDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FontFaceDeclarationContext);
    } else {
        return this.getTypedRuleContext(FontFaceDeclarationContext,i);
    }
};

FontFaceRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterFontFaceRule(this);
	}
};

FontFaceRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitFontFaceRule(this);
	}
};

FontFaceRuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitFontFaceRule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.FontFaceRuleContext = FontFaceRuleContext;

css3Parser.prototype.fontFaceRule = function() {

    var localctx = new FontFaceRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, css3Parser.RULE_fontFaceRule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 937;
        this.match(css3Parser.FontFace);
        this.state = 938;
        this.ws();
        this.state = 939;
        this.match(css3Parser.T__4);
        this.state = 940;
        this.ws();
        this.state = 942;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===css3Parser.T__6 || _la===css3Parser.T__13 || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
            this.state = 941;
            this.fontFaceDeclaration();
        }

        this.state = 951;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===css3Parser.T__0) {
            this.state = 944;
            this.match(css3Parser.T__0);
            this.state = 945;
            this.ws();
            this.state = 947;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===css3Parser.T__6 || _la===css3Parser.T__13 || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
                this.state = 946;
                this.fontFaceDeclaration();
            }

            this.state = 953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 954;
        this.match(css3Parser.T__5);
        this.state = 955;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FontFaceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_fontFaceDeclaration;
    return this;
}

FontFaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FontFaceDeclarationContext.prototype.constructor = FontFaceDeclarationContext;


 
FontFaceDeclarationContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function KnownFontFaceDeclarationContext(parser, ctx) {
	FontFaceDeclarationContext.call(this, parser);
    FontFaceDeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

KnownFontFaceDeclarationContext.prototype = Object.create(FontFaceDeclarationContext.prototype);
KnownFontFaceDeclarationContext.prototype.constructor = KnownFontFaceDeclarationContext;

css3Parser.KnownFontFaceDeclarationContext = KnownFontFaceDeclarationContext;

KnownFontFaceDeclarationContext.prototype.property = function() {
    return this.getTypedRuleContext(PropertyContext,0);
};

KnownFontFaceDeclarationContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

KnownFontFaceDeclarationContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
KnownFontFaceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterKnownFontFaceDeclaration(this);
	}
};

KnownFontFaceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitKnownFontFaceDeclaration(this);
	}
};

KnownFontFaceDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitKnownFontFaceDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnknownFontFaceDeclarationContext(parser, ctx) {
	FontFaceDeclarationContext.call(this, parser);
    FontFaceDeclarationContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnknownFontFaceDeclarationContext.prototype = Object.create(FontFaceDeclarationContext.prototype);
UnknownFontFaceDeclarationContext.prototype.constructor = UnknownFontFaceDeclarationContext;

css3Parser.UnknownFontFaceDeclarationContext = UnknownFontFaceDeclarationContext;

UnknownFontFaceDeclarationContext.prototype.property = function() {
    return this.getTypedRuleContext(PropertyContext,0);
};

UnknownFontFaceDeclarationContext.prototype.ws = function() {
    return this.getTypedRuleContext(WsContext,0);
};

UnknownFontFaceDeclarationContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};
UnknownFontFaceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterUnknownFontFaceDeclaration(this);
	}
};

UnknownFontFaceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitUnknownFontFaceDeclaration(this);
	}
};

UnknownFontFaceDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitUnknownFontFaceDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};



css3Parser.FontFaceDeclarationContext = FontFaceDeclarationContext;

css3Parser.prototype.fontFaceDeclaration = function() {

    var localctx = new FontFaceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, css3Parser.RULE_fontFaceDeclaration);
    try {
        this.state = 967;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            localctx = new KnownFontFaceDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 957;
            this.property();
            this.state = 958;
            this.match(css3Parser.T__2);
            this.state = 959;
            this.ws();
            this.state = 960;
            this.expr();
            break;

        case 2:
            localctx = new UnknownFontFaceDeclarationContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 962;
            this.property();
            this.state = 963;
            this.match(css3Parser.T__2);
            this.state = 964;
            this.ws();
            this.state = 965;
            this.value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeyframesRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_keyframesRule;
    return this;
}

KeyframesRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyframesRuleContext.prototype.constructor = KeyframesRuleContext;

KeyframesRuleContext.prototype.Keyframes = function() {
    return this.getToken(css3Parser.Keyframes, 0);
};

KeyframesRuleContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

KeyframesRuleContext.prototype.Space = function() {
    return this.getToken(css3Parser.Space, 0);
};

KeyframesRuleContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

KeyframesRuleContext.prototype.keyframesBlocks = function() {
    return this.getTypedRuleContext(KeyframesBlocksContext,0);
};

KeyframesRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterKeyframesRule(this);
	}
};

KeyframesRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitKeyframesRule(this);
	}
};

KeyframesRuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitKeyframesRule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.KeyframesRuleContext = KeyframesRuleContext;

css3Parser.prototype.keyframesRule = function() {

    var localctx = new KeyframesRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, css3Parser.RULE_keyframesRule);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 969;
        this.match(css3Parser.Keyframes);
        this.state = 970;
        this.ws();
        this.state = 971;
        this.match(css3Parser.Space);
        this.state = 972;
        this.ws();
        this.state = 973;
        this.ident();
        this.state = 974;
        this.ws();
        this.state = 975;
        this.match(css3Parser.T__4);
        this.state = 976;
        this.ws();
        this.state = 977;
        this.keyframesBlocks();
        this.state = 978;
        this.match(css3Parser.T__5);
        this.state = 979;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeyframesBlocksContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_keyframesBlocks;
    return this;
}

KeyframesBlocksContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyframesBlocksContext.prototype.constructor = KeyframesBlocksContext;

KeyframesBlocksContext.prototype.keyframeSelector = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeyframeSelectorContext);
    } else {
        return this.getTypedRuleContext(KeyframeSelectorContext,i);
    }
};

KeyframesBlocksContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

KeyframesBlocksContext.prototype.declarationList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationListContext);
    } else {
        return this.getTypedRuleContext(DeclarationListContext,i);
    }
};

KeyframesBlocksContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterKeyframesBlocks(this);
	}
};

KeyframesBlocksContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitKeyframesBlocks(this);
	}
};

KeyframesBlocksContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitKeyframesBlocks(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.KeyframesBlocksContext = KeyframesBlocksContext;

css3Parser.prototype.keyframesBlocks = function() {

    var localctx = new KeyframesBlocksContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, css3Parser.RULE_keyframesBlocks);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 992;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (css3Parser.Percentage - 29)) | (1 << (css3Parser.From - 29)) | (1 << (css3Parser.To - 29)))) !== 0)) {
            this.state = 981;
            this.keyframeSelector();
            this.state = 982;
            this.match(css3Parser.T__4);
            this.state = 983;
            this.ws();
            this.state = 985;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
                this.state = 984;
                this.declarationList();
            }

            this.state = 987;
            this.match(css3Parser.T__5);
            this.state = 988;
            this.ws();
            this.state = 994;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeyframeSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_keyframeSelector;
    return this;
}

KeyframeSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeyframeSelectorContext.prototype.constructor = KeyframeSelectorContext;

KeyframeSelectorContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

KeyframeSelectorContext.prototype.From = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.From);
    } else {
        return this.getToken(css3Parser.From, i);
    }
};


KeyframeSelectorContext.prototype.To = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.To);
    } else {
        return this.getToken(css3Parser.To, i);
    }
};


KeyframeSelectorContext.prototype.Percentage = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Percentage);
    } else {
        return this.getToken(css3Parser.Percentage, i);
    }
};


KeyframeSelectorContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Comma);
    } else {
        return this.getToken(css3Parser.Comma, i);
    }
};


KeyframeSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterKeyframeSelector(this);
	}
};

KeyframeSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitKeyframeSelector(this);
	}
};

KeyframeSelectorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitKeyframeSelector(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.KeyframeSelectorContext = KeyframeSelectorContext;

css3Parser.prototype.keyframeSelector = function() {

    var localctx = new KeyframeSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, css3Parser.RULE_keyframeSelector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 995;
        _la = this._input.LA(1);
        if(!(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (css3Parser.Percentage - 29)) | (1 << (css3Parser.From - 29)) | (1 << (css3Parser.To - 29)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 996;
        this.ws();
        this.state = 1004;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===css3Parser.Comma) {
            this.state = 997;
            this.match(css3Parser.Comma);
            this.state = 998;
            this.ws();
            this.state = 999;
            _la = this._input.LA(1);
            if(!(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (css3Parser.Percentage - 29)) | (1 << (css3Parser.From - 29)) | (1 << (css3Parser.To - 29)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1000;
            this.ws();
            this.state = 1006;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ViewportContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_viewport;
    return this;
}

ViewportContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewportContext.prototype.constructor = ViewportContext;

ViewportContext.prototype.Viewport = function() {
    return this.getToken(css3Parser.Viewport, 0);
};

ViewportContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

ViewportContext.prototype.declarationList = function() {
    return this.getTypedRuleContext(DeclarationListContext,0);
};

ViewportContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterViewport(this);
	}
};

ViewportContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitViewport(this);
	}
};

ViewportContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitViewport(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.ViewportContext = ViewportContext;

css3Parser.prototype.viewport = function() {

    var localctx = new ViewportContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, css3Parser.RULE_viewport);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1007;
        this.match(css3Parser.Viewport);
        this.state = 1008;
        this.ws();
        this.state = 1009;
        this.match(css3Parser.T__4);
        this.state = 1010;
        this.ws();
        this.state = 1012;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
            this.state = 1011;
            this.declarationList();
        }

        this.state = 1014;
        this.match(css3Parser.T__5);
        this.state = 1015;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CounterStyleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_counterStyle;
    return this;
}

CounterStyleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CounterStyleContext.prototype.constructor = CounterStyleContext;

CounterStyleContext.prototype.CounterStyle = function() {
    return this.getToken(css3Parser.CounterStyle, 0);
};

CounterStyleContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

CounterStyleContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

CounterStyleContext.prototype.declarationList = function() {
    return this.getTypedRuleContext(DeclarationListContext,0);
};

CounterStyleContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterCounterStyle(this);
	}
};

CounterStyleContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitCounterStyle(this);
	}
};

CounterStyleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitCounterStyle(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.CounterStyleContext = CounterStyleContext;

css3Parser.prototype.counterStyle = function() {

    var localctx = new CounterStyleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, css3Parser.RULE_counterStyle);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1017;
        this.match(css3Parser.CounterStyle);
        this.state = 1018;
        this.ws();
        this.state = 1019;
        this.ident();
        this.state = 1020;
        this.ws();
        this.state = 1021;
        this.match(css3Parser.T__4);
        this.state = 1022;
        this.ws();
        this.state = 1024;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.T__6) | (1 << css3Parser.T__13))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Variable - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
            this.state = 1023;
            this.declarationList();
        }

        this.state = 1026;
        this.match(css3Parser.T__5);
        this.state = 1027;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FontFeatureValuesRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_fontFeatureValuesRule;
    return this;
}

FontFeatureValuesRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FontFeatureValuesRuleContext.prototype.constructor = FontFeatureValuesRuleContext;

FontFeatureValuesRuleContext.prototype.FontFeatureValues = function() {
    return this.getToken(css3Parser.FontFeatureValues, 0);
};

FontFeatureValuesRuleContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

FontFeatureValuesRuleContext.prototype.fontFamilyNameList = function() {
    return this.getTypedRuleContext(FontFamilyNameListContext,0);
};

FontFeatureValuesRuleContext.prototype.featureValueBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FeatureValueBlockContext);
    } else {
        return this.getTypedRuleContext(FeatureValueBlockContext,i);
    }
};

FontFeatureValuesRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterFontFeatureValuesRule(this);
	}
};

FontFeatureValuesRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitFontFeatureValuesRule(this);
	}
};

FontFeatureValuesRuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitFontFeatureValuesRule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.FontFeatureValuesRuleContext = FontFeatureValuesRuleContext;

css3Parser.prototype.fontFeatureValuesRule = function() {

    var localctx = new FontFeatureValuesRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, css3Parser.RULE_fontFeatureValuesRule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1029;
        this.match(css3Parser.FontFeatureValues);
        this.state = 1030;
        this.ws();
        this.state = 1031;
        this.fontFamilyNameList();
        this.state = 1032;
        this.ws();
        this.state = 1033;
        this.match(css3Parser.T__4);
        this.state = 1034;
        this.ws();
        this.state = 1038;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===css3Parser.T__14) {
            this.state = 1035;
            this.featureValueBlock();
            this.state = 1040;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1041;
        this.match(css3Parser.T__5);
        this.state = 1042;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FontFamilyNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_fontFamilyNameList;
    return this;
}

FontFamilyNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FontFamilyNameListContext.prototype.constructor = FontFamilyNameListContext;

FontFamilyNameListContext.prototype.fontFamilyName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FontFamilyNameContext);
    } else {
        return this.getTypedRuleContext(FontFamilyNameContext,i);
    }
};

FontFamilyNameListContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

FontFamilyNameListContext.prototype.Comma = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Comma);
    } else {
        return this.getToken(css3Parser.Comma, i);
    }
};


FontFamilyNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterFontFamilyNameList(this);
	}
};

FontFamilyNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitFontFamilyNameList(this);
	}
};

FontFamilyNameListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitFontFamilyNameList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.FontFamilyNameListContext = FontFamilyNameListContext;

css3Parser.prototype.fontFamilyNameList = function() {

    var localctx = new FontFamilyNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, css3Parser.RULE_fontFamilyNameList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1044;
        this.fontFamilyName();
        this.state = 1052;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,98,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1045;
                this.ws();
                this.state = 1046;
                this.match(css3Parser.Comma);
                this.state = 1047;
                this.ws();
                this.state = 1048;
                this.fontFamilyName(); 
            }
            this.state = 1054;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,98,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FontFamilyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_fontFamilyName;
    return this;
}

FontFamilyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FontFamilyNameContext.prototype.constructor = FontFamilyNameContext;

FontFamilyNameContext.prototype.String = function() {
    return this.getToken(css3Parser.String, 0);
};

FontFamilyNameContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

FontFamilyNameContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

FontFamilyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterFontFamilyName(this);
	}
};

FontFamilyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitFontFamilyName(this);
	}
};

FontFamilyNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitFontFamilyName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.FontFamilyNameContext = FontFamilyNameContext;

css3Parser.prototype.fontFamilyName = function() {

    var localctx = new FontFamilyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, css3Parser.RULE_fontFamilyName);
    try {
        this.state = 1065;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case css3Parser.String:
            this.enterOuterAlt(localctx, 1);
            this.state = 1055;
            this.match(css3Parser.String);
            break;
        case css3Parser.MediaOnly:
        case css3Parser.Not:
        case css3Parser.And:
        case css3Parser.Or:
        case css3Parser.From:
        case css3Parser.To:
        case css3Parser.Ident:
            this.enterOuterAlt(localctx, 2);
            this.state = 1056;
            this.ident();
            this.state = 1062;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,99,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1057;
                    this.ws();
                    this.state = 1058;
                    this.ident(); 
                }
                this.state = 1064;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,99,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FeatureValueBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_featureValueBlock;
    return this;
}

FeatureValueBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FeatureValueBlockContext.prototype.constructor = FeatureValueBlockContext;

FeatureValueBlockContext.prototype.featureType = function() {
    return this.getTypedRuleContext(FeatureTypeContext,0);
};

FeatureValueBlockContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

FeatureValueBlockContext.prototype.featureValueDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FeatureValueDefinitionContext);
    } else {
        return this.getTypedRuleContext(FeatureValueDefinitionContext,i);
    }
};

FeatureValueBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterFeatureValueBlock(this);
	}
};

FeatureValueBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitFeatureValueBlock(this);
	}
};

FeatureValueBlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitFeatureValueBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.FeatureValueBlockContext = FeatureValueBlockContext;

css3Parser.prototype.featureValueBlock = function() {

    var localctx = new FeatureValueBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, css3Parser.RULE_featureValueBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1067;
        this.featureType();
        this.state = 1068;
        this.ws();
        this.state = 1069;
        this.match(css3Parser.T__4);
        this.state = 1070;
        this.ws();
        this.state = 1072;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
            this.state = 1071;
            this.featureValueDefinition();
        }

        this.state = 1082;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << css3Parser.T__0) | (1 << css3Parser.Comment) | (1 << css3Parser.Space))) !== 0)) {
            this.state = 1074;
            this.ws();
            this.state = 1075;
            this.match(css3Parser.T__0);
            this.state = 1076;
            this.ws();
            this.state = 1078;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0)) {
                this.state = 1077;
                this.featureValueDefinition();
            }

            this.state = 1084;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1085;
        this.match(css3Parser.T__5);
        this.state = 1086;
        this.ws();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FeatureTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_featureType;
    return this;
}

FeatureTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FeatureTypeContext.prototype.constructor = FeatureTypeContext;

FeatureTypeContext.prototype.atKeyword = function() {
    return this.getTypedRuleContext(AtKeywordContext,0);
};

FeatureTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterFeatureType(this);
	}
};

FeatureTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitFeatureType(this);
	}
};

FeatureTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitFeatureType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.FeatureTypeContext = FeatureTypeContext;

css3Parser.prototype.featureType = function() {

    var localctx = new FeatureTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, css3Parser.RULE_featureType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1088;
        this.atKeyword();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FeatureValueDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_featureValueDefinition;
    return this;
}

FeatureValueDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FeatureValueDefinitionContext.prototype.constructor = FeatureValueDefinitionContext;

FeatureValueDefinitionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

FeatureValueDefinitionContext.prototype.ws = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WsContext);
    } else {
        return this.getTypedRuleContext(WsContext,i);
    }
};

FeatureValueDefinitionContext.prototype.number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumberContext);
    } else {
        return this.getTypedRuleContext(NumberContext,i);
    }
};

FeatureValueDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterFeatureValueDefinition(this);
	}
};

FeatureValueDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitFeatureValueDefinition(this);
	}
};

FeatureValueDefinitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitFeatureValueDefinition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.FeatureValueDefinitionContext = FeatureValueDefinitionContext;

css3Parser.prototype.featureValueDefinition = function() {

    var localctx = new FeatureValueDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, css3Parser.RULE_featureValueDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1090;
        this.ident();
        this.state = 1091;
        this.ws();
        this.state = 1092;
        this.match(css3Parser.T__2);
        this.state = 1093;
        this.ws();
        this.state = 1094;
        this.number();
        this.state = 1100;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1095;
                this.ws();
                this.state = 1096;
                this.number(); 
            }
            this.state = 1102;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_ident;
    return this;
}

IdentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentContext.prototype.constructor = IdentContext;

IdentContext.prototype.Ident = function() {
    return this.getToken(css3Parser.Ident, 0);
};

IdentContext.prototype.MediaOnly = function() {
    return this.getToken(css3Parser.MediaOnly, 0);
};

IdentContext.prototype.Not = function() {
    return this.getToken(css3Parser.Not, 0);
};

IdentContext.prototype.And = function() {
    return this.getToken(css3Parser.And, 0);
};

IdentContext.prototype.Or = function() {
    return this.getToken(css3Parser.Or, 0);
};

IdentContext.prototype.From = function() {
    return this.getToken(css3Parser.From, 0);
};

IdentContext.prototype.To = function() {
    return this.getToken(css3Parser.To, 0);
};

IdentContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterIdent(this);
	}
};

IdentContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitIdent(this);
	}
};

IdentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitIdent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.IdentContext = IdentContext;

css3Parser.prototype.ident = function() {

    var localctx = new IdentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, css3Parser.RULE_ident);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1103;
        _la = this._input.LA(1);
        if(!(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (css3Parser.MediaOnly - 32)) | (1 << (css3Parser.Not - 32)) | (1 << (css3Parser.And - 32)) | (1 << (css3Parser.Or - 32)) | (1 << (css3Parser.From - 32)) | (1 << (css3Parser.To - 32)) | (1 << (css3Parser.Ident - 32)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = css3Parser.RULE_ws;
    return this;
}

WsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WsContext.prototype.constructor = WsContext;

WsContext.prototype.Comment = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Comment);
    } else {
        return this.getToken(css3Parser.Comment, i);
    }
};


WsContext.prototype.Space = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(css3Parser.Space);
    } else {
        return this.getToken(css3Parser.Space, i);
    }
};


WsContext.prototype.enterRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.enterWs(this);
	}
};

WsContext.prototype.exitRule = function(listener) {
    if(listener instanceof css3Listener ) {
        listener.exitWs(this);
	}
};

WsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof css3Visitor ) {
        return visitor.visitWs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




css3Parser.WsContext = WsContext;

css3Parser.prototype.ws = function() {

    var localctx = new WsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, css3Parser.RULE_ws);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1108;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1105;
                _la = this._input.LA(1);
                if(!(_la===css3Parser.Comment || _la===css3Parser.Space)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 1110;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.css3Parser = css3Parser;
